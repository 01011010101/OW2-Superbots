settings
{
	main
	{
		Description: "Level up by getting assists and killing blows. Damage increases as you level up, but bots get tougher as they die! Team comp is everything here. Stay alive, try to kill everything that moves and watch out for Lucio's ult! Almost every character has been tweaked in one way or another, play them to find out what's new!\n\r\nCreated by Cel#1115. Updated for OW2 by Arkhanglesk#11200. Full list of hero abilities: https://tinyurl.com/ow2superbots.\r\n\r\n[WORK IN PROGRESS] Feb 22, 2024: 36 of 39 heroes updated."
		Mode Name: "STOP THE SUPERBOTS!"
	}

	lobby
	{
		Allow Players Who Are In Queue: Yes
		Map Rotation: After A Game
		Max Team 1 Players: 4
		Max Team 2 Players: 6
		Return To Lobby: Never
		Swap Teams After Match: No
	}

	modes
	{
		Assault
		{
			Capture Speed Modifier: 200%

			enabled maps
			{
				Horizon Lunar Colony 972777519512068154
			}
		}

		disabled Control
		{
			Capture Speed Modifier: 300%
		}

		Escort
		{
			Payload Speed Modifier: 300%

			disabled maps
			{
				Rialto
			}
		}

		Hybrid
		{
			Capture Speed Modifier: 500%
			Payload Speed Modifier: 300%

			disabled maps
			{
				Blizzard World Winter
				Eichenwalde Halloween
				Hollywood Halloween
				King's Row Winter
			}
		}

		Push
		{
			TS-1 Push Speed Modifier: 125%
			TS-1 Walk Speed Modifier: 125%
		}

		General
		{
			Game Mode Start: Immediately
			Kill Cam: Off
			Spawn Health Packs: Disabled
			Tank Role Passive Health Bonus: Disabled
		}
	}

	heroes
	{
		Team 1
		{
			Ultimate Generation - Passive: 500%

			Ana
			{
				Biotic Grenade Cooldown Time: 25%
				Damage Dealt: 150%
				Health: 200%
				Jump Vertical Speed: 250%
				No Ammunition Requirement: On
			}

			Ashe
			{
				Coach Gun Cooldown Time: 50%
				Coach Gun Knockback Scalar Enemy: 200%
				Coach Gun Knockback Scalar Self: 200%
				Damage Dealt: 170%
				Dynamite Cooldown Time: 15%
				Dynamite Fuse Time Scalar: 1%
				Health: 150%
				Ultimate Duration: 250%
				Ultimate Generation - Combat B.O.B.: 10%
			}

			Baptiste
			{
				Damage Dealt: 170%
				Healing Dealt: 200%
				Health: 200%
				Jump Vertical Speed: 125%
				No Ammunition Requirement: On
				Regenerative Burst Cooldown Time: 50%
				Ultimate Duration: 300%
				Ultimate Generation - Combat Amplification Matrix: 10%
			}

			Bastion
			{
				A-36 Tactical Grenade Cooldown Time: 10%
				A-36 Tactical Grenade Knockback Scalar: 150%
				Damage Dealt: 180%
				Health: 150%
				No Ammunition Requirement: On
				Reconfigure Cooldown Time: 0%
				Ultimate Duration: 500%
				Ultimate Generation - Combat Configuration: Artillery: 3%
			}

			Brigitte
			{
				Barrier Shield Cooldown Time: 0%
				Barrier Shield Recharge Rate: 500%
				Damage Dealt: 145%
				Health: 250%
				Repair Pack Cooldown Time: 35%
				Shield Bash Cooldown Time: 50%
				Ultimate Generation - Combat Rally: 20%
				Whip Shot Knockback Scalar: 200%
			}

			Cassidy
			{
				Ammunition Clip Size Scalar: 300%
				Combat Roll Cooldown Time: 40%
				Damage Dealt: 180%
				Health: 150%
				Ultimate Generation - Combat Deadeye: 1%
			}

			D.Va
			{
				Boosters Cooldown Time: 20%
				Damage Dealt: 150%
				Defense Matrix Maximum Time: 300%
				Defense Matrix Recharge Rate: 200%
				Health: 125%
				Micro Missiles Cooldown Time: 35%
				Ultimate Generation - Combat Self-Destruct: 5%
			}

			Doomfist
			{
				Health: 165%
				Infinite Ultimate Duration: On
				Meteor Strike Knockback Scalar: 150%
				No Ammunition Requirement: On
				Power Block Charge Rate: 50%
				Power Block Cooldown Time: 15%
				Quick Melee: Off
				Rocket Punch Cooldown Time: 25%
				Seismic Slam Cooldown Time: 15%
				Ultimate Duration: 110%
			}

			Echo
			{
				Damage Dealt: 180%
				Flight Cooldown Time: 30%
				Focusing Beam Cooldown Time: 160%
				Health: 135%
				No Ammunition Requirement: On
				Sticky Bombs Cooldown Time: 15%
				Ultimate Generation - Combat Duplicate: 2%
			}

			Genji
			{
				Damage Dealt: 175%
				Deflect Cooldown Time: 25%
				Health: 200%
				No Ammunition Requirement: On
				Swift Strike Cooldown Time: 25%
				Ultimate Duration: 200%
				Ultimate Generation - Combat Dragonblade: 10%
			}

			Hanzo
			{
				Damage Dealt: 135%
				Lunge Cooldown Time: 25%
				Lunge Distance Scalar: 200%
				Sonic Arrow Cooldown Time: 50%
				Storm Arrows Cooldown Time: 25%
				Storm Arrows Quantity: 12
				Ultimate Generation - Combat Dragonstrike: 5%
				Ultimate Generation - Passive Dragonstrike: 50%
			}

			Illari
			{
				Damage Dealt: 160%
				Healing Dealt: 200%
				Healing Pylon Cooldown Time: 50%
				Health: 150%
				Movement Gravity: 90%
				No Ammunition Requirement: On
				Outburst Cooldown Time: 50%
				Solar Energy Maximum: 500%
				Ultimate Generation - Combat Captive Sun: 50%
			}

			Junker Queen
			{
				Carnage Cooldown Time: 35%
				Commanding Shout Cooldown Time: 35%
				Damage Dealt: 135%
				Health: 150%
				Jagged Blade Cooldown Time: 25%
				Jagged Blade Knockback Scalar: 125%
				No Ammunition Requirement: On
			}

			Junkrat
			{
				Concussion Mine Cooldown Time: 50%
				Damage Dealt: 160%
				Health: 350%
				No Ammunition Requirement: On
				Ultimate Generation - Combat RIP-Tire: 25%
				Ultimate Generation - Passive RIP-Tire: 75%
			}

			Kiriko
			{
				Damage Dealt: 150%
				Healing Dealt: 300%
				No Ammunition Requirement: On
				Projectile Speed: 500%
				Protection Suzu Cooldown Time: 25%
				Swift Step Cooldown Time: 25%
				Swift Step Distance Scalar: 300%
			}

			Lifeweaver
			{
				Damage Dealt: 200%
				Healing Dealt: 300%
				Health: 350%
				Life Grip and Healing Blossom Range: 25%
				Life Grip Cooldown Time: 25%
				No Ammunition Requirement: On
				Petal Platform Cooldown Time: 25%
				Petal Platform Health: 25%
				Rejuvenating Dash Cooldown Time: 0%
				Rejuvenating Dash Healing: 200%
				Tree of Life Health: 300%
				Ultimate Generation - Combat Tree of Life: 10%
			}

			LÃºcio
			{
				Amp It Up Cooldown Time: 30%
				Crossfade: Off
				Damage Dealt: 200%
				No Ammunition Requirement: On
				Ultimate Generation - Combat Sound Barrier: 1%
				Ultimate Generation - Passive Sound Barrier: 400%
			}

			Mauga
			{
				Cardiac Overdrive Cooldown Time: 75%
				Damage Dealt: 150%
				Health: 185%
				Incendiary Chaingun Ignite Rate: 150%
				No Ammunition Requirement: On
				Overrun Cooldown Time: 50%
				Overrun Knockback: 110%
				Ultimate Duration: 200%
				Ultimate Generation - Combat Cage Fight: 10%
			}

			Mei
			{
				Cryo-Freeze Cooldown Time: 75%
				Damage Dealt: 105%
				Freeze Stacking: On
				Health: 150%
				No Ammunition Requirement: On
				Ultimate Generation - Combat Blizzard: 1%
				Weapon Freeze Duration Scalar: 200%
				Weapon Freeze Rate Scalar: 200%
			}

			Mercy
			{
				Damage Dealt: 180%
				Guardian Angel Cooldown Time: 25%
				Health: 200%
				Jump Vertical Speed: 250%
				Movement Gravity: 75%
				No Ammunition Requirement: On
				Resurrect Cooldown Time: 25%
				Ultimate Generation - Combat Valkyrie: 0%
				Ultimate Generation - Passive Valkyrie: 200%
				Ultimate Generation Valkyrie: 50%
				Weapons Enabled: Caduceus Blaster Only
			}

			Moira
			{
				Biotic Energy Recharge Rate: 500%
				Biotic Orb Cooldown Time: 40%
				Biotic Orb Max Damage Scalar: 500%
				Biotic Orb Max Healing Scalar: 500%
				Damage Dealt: 150%
				Fade Cooldown Time: 0%
				Healing Dealt: 200%
				Health: 250%
				Ultimate Duration: 122%
				Ultimate Generation - Combat Coalescence: 2%
			}

			Orisa
			{
				Damage Dealt: 145%
				Energy Javelin Cooldown Time: 70%
				Fortify Cooldown Time: 90%
				Health: 150%
				Javelin Spin Cooldown Time: 50%
				No Ammunition Requirement: On
				Ultimate Generation - Combat Terra Surge: 50%
				Ultimate Generation - Passive Terra Surge: 50%
			}

			Pharah
			{
				Concussive Blast Knockback Scalar: 25%
				Hover Jets Unlimited Fuel: On
				Jump Jet Cooldown Time: 0%
				No Ammunition Requirement: On
				Rocket Launcher Knockback Scalar: 0%
				Ultimate Generation - Combat Barrage: 10%
			}

			Ramattra
			{
				Damage Dealt: 110%
				Health: 150%
				Nemesis Form Cooldown Time: 25%
				No Ammunition Requirement: On
				Projectile Gravity: 110%
				Ravenous Vortex Cooldown Time: 25%
				Ultimate Duration: 200%
				Ultimate Generation - Combat Annihilation: 50%
				Void Barrier Omnic Form Cooldown Time: 25%
			}

			Reaper
			{
				Damage Dealt: 160%
				Healing Dealt: 200%
				Health: 275%
				No Ammunition Requirement: On
				Ultimate Generation - Combat Death Blossom: 5%
				Wraith Form Cooldown Time: 50%
			}

			Reinhardt
			{
				Barrier Field Cooldown Time: 0%
				Charge Cooldown Time: 75%
				Charge Knockback Scalar: 120%
				Health: 160%
				Rocket Hammer Knockback Scalar: 50%
				Ultimate Generation - Combat Earthshatter: 10%
			}

			Roadhog
			{
				Chain Hook Cooldown Time: 50%
				Damage Dealt: 125%
				Healing Dealt: 200%
				Health: 150%
				No Ammunition Requirement: On
				Take a Breather Cooldown Time: 200%
				Take a Breather Maximum Time: 50%
				Ultimate Generation - Combat Whole Hog: 50%
				Whole Hog Knockback Scalar: 0%
			}

			Sigma
			{
				Accretion Cooldown Time: 25%
				Accretion Knockback Scalar: 300%
				Damage Dealt: 130%
				Experimental Barrier Cooldown Time: 25%
				Health: 150%
				Jump Vertical Speed: 250%
				Kinetic Grasp Cooldown Time: 200%
				Ultimate Generation - Combat Gravitic Flux: 0%
				Ultimate Generation - Passive Gravitic Flux: 375%
			}

			Sojourn
			{
				Damage Dealt: 165%
				Disruptor Shot Cooldown Time: 25%
				Health: 275%
				No Ammunition Requirement: On
				Power Slide Cooldown Time: 35%
				Projectile Speed: 150%
				Railgun Alt Fire Energy Charge Rate: 0%
				Ultimate Generation - Combat Overclock: 5%
			}

			Soldier: 76
			{
				Damage Dealt: 180%
				Health: 250%
				Helix Rockets Cooldown Time: 30%
				Helix Rockets Knockback Scalar: 400%
				No Ammunition Requirement: On
				Ultimate Duration: 200%
				Ultimate Generation - Combat Tactical Visor: 0%
				Ultimate Generation - Passive Tactical Visor: 450%
			}

			Sombra
			{
				Damage Dealt: 165%
				Health: 150%
				No Ammunition Requirement: On
				Translocator Cooldown Time: 50%
				Ultimate Generation - Combat EMP: 1%
				Virus Cooldown Time: 0%
			}

			Symmetra
			{
				Damage Dealt: 175%
				Health: 350%
				No Ammunition Requirement: On
				Projectile Speed: 50%
				Sentry Turret Cooldown Time: 75%
			}

			TorbjÃ¶rn
			{
				Damage Dealt: 145%
				Deploy Turret Cooldown Time: 0%
				Health: 225%
				No Ammunition Requirement: On
				Overload Duration Scalar: 200%
				Ultimate Generation - Combat Molten Core: 3%
				Ultimate Generation - Passive Molten Core: 50%
			}

			Tracer
			{
				Blink Cooldown Time: 25%
				Damage Dealt: 180%
				Health: 150%
				No Ammunition Requirement: On
				Ultimate Generation - Combat Pulse Bomb: 0%
				Ultimate Generation - Passive Pulse Bomb: 250%
			}

			Widowmaker
			{
				Damage Dealt: 180%
				Grappling Hook Cooldown Time: 0%
				No Ammunition Requirement: On
				Ultimate Generation - Combat Infra-Sight: 1%
				Ultimate Generation - Passive Infra-Sight: 175%
			}

			Winston
			{
				Jump Pack Acceleration Scalar: 45%
				Jump Pack Cooldown Time: 0%
				Jump Vertical Speed: 200%
				No Ammunition Requirement: On
				Ultimate Duration: 50%
				Ultimate Generation - Combat Primal Rage: 25%
			}

			Wrecking Ball
			{
				Adaptive Shield Cooldown Time: 80%
				Damage Dealt: 165%
				Grappling Claw Cooldown Time: 0%
				Grappling Claw Knockback Scalar: 120%
				Infinite Ultimate Duration: On
				Minefield Knockback Scalar: 0%
				No Ammunition Requirement: On
				Piledriver Cooldown Time: 0%
				Ultimate Generation - Combat Minefield: 15%
			}

			Zarya
			{
				Damage Dealt: 150%
				Health: 150%
				No Ammunition Requirement: On
				Particle Barrier Cooldown Time: 50%
				Projected Barrier Cooldown Time: 75%
				Ultimate Generation - Combat Graviton Surge: 10%
			}

			Zenyatta
			{
				Damage Dealt: 150%
				Health: 150%
				No Ammunition Requirement: On
				Ultimate Generation - Combat Transcendence: 0%
				Ultimate Generation - Passive Transcendence: 300%
			}
		}

		Team 2
		{
			Ana
			{
				Ammunition Clip Size Scalar: 200%
				Biotic Grenade Cooldown Time: 150%
				Damage Dealt: 165%
				Health: 500%
				Sleep Dart Cooldown Time: 200%
				Ultimate Generation - Combat Nano Boost: 500%
				Ultimate Generation - Passive Nano Boost: 300%
			}

			Ashe
			{
				Ammunition Clip Size Scalar: 250%
				Coach Gun Knockback Scalar Enemy: 50%
				Coach Gun Knockback Scalar Self: 125%
				Damage Dealt: 160%
				Dynamite Cooldown Time: 15%
				Dynamite Fuse Time Scalar: 1%
				Health: 500%
				No Ammunition Requirement: On
				Projectile Speed: 90%
				Ultimate Duration: 150%
				Ultimate Generation - Combat B.O.B.: 300%
				Ultimate Generation - Passive B.O.B.: 500%
			}

			Baptiste
			{
				Ammunition Clip Size Scalar: 200%
				Damage Dealt: 155%
				Health: 500%
				Immortality Field Cooldown Time: 300%
				Movement Gravity: 90%
				Projectile Gravity: 60%
				Regenerative Burst Cooldown Time: 150%
				Ultimate Duration: 200%
				Ultimate Generation - Combat Amplification Matrix: 200%
				Ultimate Generation - Passive Amplification Matrix: 150%
			}

			Bastion
			{
				A-36 Tactical Grenade: Off
				Damage Dealt: 160%
				Health: 500%
				Movement Gravity: 110%
				Movement Speed: 95%
				No Ammunition Requirement: On
				Reconfigure Cooldown Time: 0%
				Ultimate Duration: 500%
				Ultimate Generation - Combat Configuration: Artillery: 500%
				Ultimate Generation - Passive Configuration: Artillery: 500%
			}

			Brigitte
			{
				Barrier Shield Cooldown Time: 150%
				Barrier Shield Recharge Rate: 50%
				Damage Dealt: 160%
				Health: 500%
				Shield Bash Cooldown Time: 150%
				Shield Bash Knockback Scalar: 50%
				Ultimate Generation - Combat Rally: 500%
				Ultimate Generation - Passive Rally: 300%
			}

			Cassidy
			{
				Ammunition Clip Size Scalar: 150%
				Combat Roll Cooldown Time: 150%
				Damage Dealt: 150%
				Health: 500%
				Magnetic Grenade Cooldown Time: 200%
				Ultimate Generation - Combat Deadeye: 300%
				Ultimate Generation - Passive Deadeye: 150%
			}

			D.Va
			{
				Damage Dealt: 150%
			}

			Doomfist
			{
				Ammunition Clip Size Scalar: 200%
				Ammunition Regeneration Time Scalar: 200%
				Damage Dealt: 160%
				Health: 500%
				Meteor Strike Knockback Scalar: 60%
				No Ammunition Requirement: On
				Power Block Cooldown Time: 200%
				Rocket Punch Knockback Scalar: 50%
				Seismic Slam Cooldown Time: 15%
				Ultimate Duration: 150%
				Ultimate Generation - Combat Meteor Strike: 500%
				Ultimate Generation - Passive Meteor Strike: 300%
			}

			Echo
			{
				Damage Dealt: 190%
				Flight Cooldown Time: 30%
				Focusing Beam Cooldown Time: 160%
				Ultimate Generation - Combat Duplicate: 20%
			}

			Genji
			{
				Damage Dealt: 160%
				Health: 500%
				Movement Gravity: 90%
				Ultimate Generation - Combat Dragonblade: 500%
				Ultimate Generation - Passive Dragonblade: 300%
			}

			Hanzo
			{
				Damage Dealt: 150%
				Health: 500%
				Movement Gravity: 95%
				Spawn With Ultimate Ready: On
				Storm Arrows Cooldown Time: 15%
				Storm Arrows Quantity: 12
				Ultimate Generation - Combat Dragonstrike: 400%
				Ultimate Generation - Passive Dragonstrike: 500%
			}

			Illari
			{
				Ammunition Clip Size Scalar: 200%
				Damage Dealt: 160%
				Healing Dealt: 400%
				Healing Pylon Cooldown Time: 50%
				Health: 500%
				Movement Gravity: 90%
				Outburst Cooldown Time: 25%
				Ultimate Generation - Combat Captive Sun: 400%
				Ultimate Generation - Passive Captive Sun: 300%
			}

			Junker Queen
			{
				Carnage Cooldown Time: 50%
				Commanding Shout Cooldown Time: 35%
				Damage Dealt: 160%
				Health: 500%
				Jagged Blade Cooldown Time: 75%
				Jagged Blade Knockback Scalar: 50%
				Ultimate Generation - Combat Rampage: 400%
				Ultimate Generation - Passive Rampage: 200%
			}

			Junkrat
			{
				Ammunition Clip Size Scalar: 150%
				Concussion Mine Cooldown Time: 200%
				Concussion Mine Knockback Scalar: 50%
				Damage Dealt: 175%
				Frag Launcher Knockback Scalar: 60%
				Health: 500%
				Movement Gravity: 50%
				Steel Trap Cooldown Time: 200%
				Ultimate Duration: 500%
				Ultimate Generation - Passive RIP-Tire: 500%
			}

			Kiriko
			{
				Damage Dealt: 160%
				Health: 500%
				Projectile Speed: 300%
				Ultimate Generation - Combat Kitsune Rush: 500%
				Ultimate Generation - Passive Kitsune Rush: 300%
			}

			LÃºcio
			{
				Crossfade: Off
				Damage Dealt: 200%
				No Ammunition Requirement: On
				Soundwave Cooldown Time: 150%
				Soundwave Knockback Scalar: 50%
				Ultimate Generation - Combat Sound Barrier: 1%
				Ultimate Generation - Passive Sound Barrier: 500%
				Ultimate Generation Sound Barrier: 200%
			}

			Mauga
			{
				Ammunition Clip Size Scalar: 150%
				Cardiac Overdrive Cooldown Time: 200%
				Damage Dealt: 125%
				Health: 400%
				Incendiary Chaingun Ignite Duration: 25%
				Incendiary Chaingun Ignite Rate: 150%
				Overrun Knockback: 50%
				Quick Melee: Off
				Ultimate Duration: 75%
				Ultimate Generation - Combat Cage Fight: 40%
				Ultimate Generation - Passive Cage Fight: 500%
			}

			Mei
			{
				Ammunition Clip Size Scalar: 175%
				Cryo-Freeze Cooldown Time: 200%
				Damage Dealt: 165%
				Health: 500%
				Ice Wall Cooldown Time: 200%
				Ultimate Generation - Combat Blizzard: 400%
				Ultimate Generation - Passive Blizzard: 200%
				Weapon Freeze Rate Scalar: 75%
			}

			Mercy
			{
				Damage Dealt: 300%
				Guardian Angel Cooldown Time: 0%
				Health: 500%
				No Ammunition Requirement: On
				Resurrect: Off
			}

			Moira
			{
				Damage Dealt: 160%
				Health: 500%
				Ultimate Duration: 300%
				Ultimate Generation - Combat Coalescence: 500%
				Ultimate Generation - Passive Coalescence: 500%
			}

			Orisa
			{
				Ammunition Clip Size Scalar: 200%
				Damage Dealt: 160%
				Energy Javelin Cooldown Time: 70%
				Fortify Cooldown Time: 90%
				Health: 475%
				Javelin Spin Cooldown Time: 50%
				Ultimate Generation - Combat Terra Surge: 400%
				Ultimate Generation - Passive Terra Surge: 300%
			}

			Ramattra
			{
				Damage Dealt: 160%
				Health: 500%
				Projectile Gravity: 110%
				Ravenous Vortex Cooldown Time: 50%
				Ultimate Generation - Combat Annihilation: 450%
				Ultimate Generation - Passive Annihilation: 200%
				Void Barrier Omnic Form Cooldown Time: 25%
			}

			Reaper
			{
				Damage Dealt: 175%
				Health: 500%
				No Ammunition Requirement: On
				Quick Melee: Off
				Shadow Step: Off
				Ultimate Generation - Combat Death Blossom: 5%
				Ultimate Generation - Passive Death Blossom: 500%
				Wraith Form Cooldown Time: 200%
			}

			Reinhardt
			{
				Barrier Field Cooldown Time: 200%
				Barrier Field Recharge Rate: 15%
				Charge Knockback Scalar: 35%
				Damage Dealt: 165%
				Health: 500%
				Movement Gravity: 110%
				Rocket Hammer Knockback Scalar: 50%
				Ultimate Generation - Passive Earthshatter: 500%
			}

			Roadhog
			{
				Chain Hook Cooldown Time: 150%
				Damage Dealt: 200%
				Healing Dealt: 200%
				Health: 500%
				No Ammunition Requirement: On
				Quick Melee: Off
				Spawn With Ultimate Ready: On
				Take a Breather Cooldown Time: 150%
				Take a Breather Recharge Rate: 25%
				Ultimate Generation - Combat Whole Hog: 200%
				Ultimate Generation Whole Hog: 500%
				Whole Hog Knockback Scalar: 0%
			}

			Sigma
			{
				Accretion Knockback Scalar: 65%
				Damage Dealt: 200%
				Experimental Barrier Cooldown Time: 125%
				Experimental Barrier Recharge Rate: 50%
				Health: 500%
				Movement Gravity: 50%
				Projectile Gravity: 50%
				Ultimate Generation - Passive Gravitic Flux: 500%
			}

			Sojourn
			{
				Damage Dealt: 160%
				Health: 500%
				Power Slide Cooldown Time: 35%
				Ultimate Generation - Combat Overclock: 5%
				Ultimate Generation - Passive Overclock: 500%
			}

			Soldier: 76
			{
				Ammunition Clip Size Scalar: 150%
				Biotic Field Cooldown Time: 200%
				Damage Dealt: 150%
				Health: 500%
				Helix Rockets Cooldown Time: 30%
				Ultimate Generation - Passive Tactical Visor: 500%
			}

			Sombra
			{
				Damage Dealt: 200%
				Hack Cooldown Time: 500%
				Health: 500%
				Projectile Speed: 300%
				Translocator Cooldown Time: 50%
				Ultimate Ability EMP: Off
				Virus Cooldown Time: 50%
			}

			Symmetra
			{
				Ammunition Clip Size Scalar: 225%
				Damage Dealt: 165%
				Health: 500%
				Projectile Speed: 60%
				Sentry Turret Cooldown Time: 300%
				Teleporter: Off
				Ultimate Generation - Passive Photon Barrier: 500%
			}

			TorbjÃ¶rn
			{
				Ammunition Clip Size Scalar: 100%
				Damage Dealt: 175%
				Deploy Turret Cooldown Time: 500%
				Health: 450%
				No Ammunition Requirement: On
				Quick Melee: Off
				Ultimate Duration: 500%
				Ultimate Generation - Combat Molten Core: 500%
				Ultimate Generation - Passive Molten Core: 400%
			}

			Tracer
			{
				Ammunition Clip Size Scalar: 200%
				Damage Dealt: 250%
				Health: 250%
				Movement Gravity: 90%
				Movement Speed: 110%
				Ultimate Generation - Combat Pulse Bomb: 400%
				Ultimate Generation - Passive Pulse Bomb: 300%
			}

			Widowmaker
			{
				Damage Dealt: 150%
				Grappling Hook Cooldown Time: 25%
				Health: 500%
				Movement Speed: 110%
				No Ammunition Requirement: On
				No Automatic Fire: On
				Ultimate Ability Infra-Sight: Off
				Venom Mine Cooldown Time: 25%
			}

			Winston
			{
				Ammunition Clip Size Scalar: 250%
				Barrier Projector Cooldown Time: 150%
				Damage Dealt: 200%
				Health: 475%
				Infinite Ultimate Duration: On
				Jump Pack Acceleration Scalar: 75%
				Jump Pack Cooldown Time: 50%
				Jump Pack Knockback Scalar: 50%
				Primal Rage Melee Knockback Scalar: 50%
				Spawn With Ultimate Ready: On
				Ultimate Duration: 500%
				Ultimate Generation - Combat Primal Rage: 500%
				Ultimate Generation - Passive Primal Rage: 500%
			}

			Wrecking Ball
			{
				Grappling Claw Knockback Scalar: 130%
			}

			Zarya
			{
				Damage Dealt: 165%
				Health: 475%
				No Ammunition Requirement: On
				Particle Barrier: Off
				Projected Barrier Cooldown Time: 49%
				Quick Melee: Off
			}

			Zenyatta
			{
				Damage Dealt: 170%
				Health: 400%
				No Ammunition Requirement: On
				Secondary Fire: Off
				Ultimate Generation - Combat Transcendence: 500%
				Ultimate Generation - Passive Transcendence: 300%
			}
		}
	}

	extensions
	{
		Buff Status Effects
		Buff and Debuff Sounds
		Spawn More Dummy Bots
	}
}

variables
{
	global:
		0: Armor0
		1: Armor25
		2: Armor50
		3: Armor75
		4: RelicDescriptions
		5: RelicIcons
		9: PlayerDeathCount
		10: SuperbotDeathCount
		11: SuperbotLevel
		12: ChallengeDmgMod
		13: ChallengeRoulette
		14: LucioRoulette
		15: LucioSmokeEffect
		24: SlowTimeCheck
		26: Ark
		27: ControlMaps

	player:
		0: LEVEL
		1: DAMAGE
		2: HEALTH
		3: MOVEMENT
		4: ARMOR
		5: RelicVariable1
		6: RelicVariable2
		7: MercyHoT
		9: HUDTextHidden
		12: HeroOfPlayer
		13: RelicReadyToEquip
		14: DamageMOD
		22: AegisRelicEffect
		23: RootVariable
		24: RelicSelected
		25: RelicEquipped
		26: ID_Array
		28: GenjiMarkofDeath
		29: GenjiMarkofDeathStacks
		30: EnableFlying
		31: MercyCharm
		32: JunkElimCounter
		33: MercyDoT
		34: SuperbotEnrageCounter
		35: UltimateThirdPerson
		36: FullAutoFire
		38: RandomEmote
		39: PlayerHUD
		125: Flight
		126: FlightKnockInterrupt
		127: FlightSpeedMetersPerSecond
}

subroutines
{
	0: ClearAllStatus
	1: EnableButtons
	2: DisableButtons
	3: ResetRelicStatus
	4: DvaBunnyHopDeactivate
	5: MoiraExplosion
	6: ReaperCreepingDeathOff
}

rule("CREATED BY CEL#1115")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Disable Inspector Recording;
		"Relic descriptions."
		Global.RelicDescriptions = Array(Custom String("+200% HEALING DEALT/RECEIVED \r\n+50% DAMAGE AT FULL HP \r\n+10% HP/SEC"),
			Custom String("+100% MOVEMENT SPEED \r\n+DAMAGE BASED ON SPEED \r\n-7 SECOND RESPAWN TIMER"), Custom String(
			"+100% DAMAGE \r\n-25% ARMOR \r\n+5% ULT ON LAST HIT"), Custom String(
			"+10-25 ARMOR BASED ON ROLE \r\n+25% DMG PER NEARBY BOT \r\n+SHIELD WHEN LOW HP"), Custom String(
			"+25% DAMAGE \r\n+25% SPEED \r\n+25% HP PER ELIMINATION \r\n-1 SEC COOLDOWN ON DMG"));
		"Relic Icons."
		Global.RelicIcons = Array(Custom String("{0}", Icon String(Plus)), Icon String(Spiral), Icon String(Skull), Icon String(Moon),
			Icon String(Bolt));
		"Overtime Roulette"
		Global.ChallengeRoulette = Array(Null, Null, Custom String("SEPARATION ANXIETY"), Custom String("SOCIAL DISTANCING"),
			Custom String("RELENTLESS"), Custom String("SUDDEN DEATH"), Custom String("JUGGERNAUT"), Custom String("SWARM!"),
			Custom String("APOTHEOSIS"));
		"Control Maps (Disabled, workshop overload issues)"
		disabled Global.ControlMaps = Array(Null, Null, Custom String("Antarctic Peninsula"), Custom String("Busan"), Custom String("Ilios"),
			Custom String("Lijiang Tower"), Custom String("Lijiang Tower (Lunar New Year)"), Custom String("Nepal"), Custom String(
			"Oasis"));
		"Cel, update this (if you want to use it)."
		Global.Ark = Custom String("Arkhangelsk");
	}
}

rule("BOT CHECK 1")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
	}

	actions
	{
		If(Number Of Heroes(Hero(LÃºcio), Team 2) < 1 || Number Of Heroes(Hero(LÃºcio), Team 2) > 1);
			Wait(5, Ignore Condition);
			Big Message(All Players(All Teams), Custom String("ERROR: REQUIRES ONLY ONE LUCIO BOT"));
			Wait(10, Abort When False);
			Declare Match Draw;
		End;
	}
}

rule("BOT CHECK 2")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Number Of Players(Team 1) < 2;
		Is In Setup == True;
	}

	actions
	{
		Wait(5, Ignore Condition);
		If(Custom String("{0}", Host Player) != Global.Ark);
			Big Message(All Players(All Teams), Custom String("ERROR: REQUIRES ONLY ONE LUCIO BOT"));
			disabled Big Message(All Players(Team Of(Event Player)), Custom String("{0} {1}", String("Critical"), String("Failure")));
			Declare Match Draw;
	}
}

rule("ASSEMBLING HEROES PHASE")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Assembling Heroes == True;
	}

	actions
	{
		Set Match Time(0);
	}
}

rule("SETUP PHASE")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is In Setup == True;
	}

	actions
	{
		Global.SlowTimeCheck = False;
		"Player damage taken based on player count."
		Start Damage Modification(All Players(Team 1), All Players(Team 2), 40 + Number Of Players(Team 1) * 10,
			Receivers Damagers and Damage Percent);
		"Player damage dealt based on player count and Superbot level."
		Start Damage Modification(All Players(Team 2), All Players(Team 1), Max(40, 160 - Number Of Players(Team 1)
			* 10 - Global.SuperbotLevel * 5), Receivers Damagers and Damage Percent);
		"Superbots healing based on number of players."
		Start Healing Modification(All Players(Team 2), All Players(Team 2), 40 + Number Of Players(Team 1) * 10,
			Receivers Healers and Healing Percent);
		"Player self-damage set to zero."
		Start Damage Modification(All Players(Team 1), All Players(Team 1), 0, Receivers Damagers and Damage Percent);
		"Superbots damage based on level."
		Start Damage Modification(All Players(Team 1), All Players(Team 2), 100 + Global.SuperbotLevel * 20,
			Receivers Damagers and Damage Percent);
		"If not Control map (Disabled due to workshop load errors)"
		disabled If(Array Contains(Global.ControlMaps, Custom String("{0}", Current Map)) == False);
		Set Match Time(30);
		"If Control map"
		disabled Else;
		disabled Set Match Time(25);
	}
}

rule("GAME IN PROGRESS PHASE")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
	}

	actions
	{
		Set Objective Description(All Players(All Teams), Custom String("{0} STOP THE SUPERBOTS!", Icon String(Skull)),
			Visible To and String);
		"If not Control map (Disabled due to workshop load errors)"
		disabled If(Array Contains(Global.ControlMaps, Custom String("{0}", Current Map)) == False);
		"Set match time to 8 minutes."
		Set Match Time(480);
		"If Control map (Disabled due to workshop load errors)"
		disabled Else;
		"Control Point Active in __ (secs)"
		disabled Set Match Time(15);
	}
}

rule("LOOKING FOR MATCH / AUTO RESTART [Added by Arkhanglesk#11200]")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		(Number Of Players(Team Of(Event Player)) == 1) == True;
		Total Time Elapsed < 45;
		Is Game In Progress == True;
	}

	actions
	{
		Abort If Condition Is False;
		Restart Match;
	}
}

rule("Clear Status on Respawn or Resurrect")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
	}

	actions
	{
		Clear Status(Event Player, Burning);
		Stop All Damage Over Time(Event Player);
		Start Rule(ClearAllStatus, Do Nothing);
		Event Player.RootVariable = 0;
		If(Team Of(Event Player) == Team 1);
			Clear Status(Event Player, Invincible);
			Clear Status(Event Player, Phased Out);
			Wait(0.100, Ignore Condition);
			"Spawn protection."
			Set Status(Event Player, Null, Phased Out, 1.500);
			"Reset AEGIS cooldown."
			If(Event Player.RelicEquipped == 3);
				Event Player.RelicVariable1 = 100;
			End;
		End;
	}
}

rule("GLOBAL HUDS [Updated by Arkhanglesk#11200]")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		"PRESS [F] TO SWITCH RELICS"
		Create HUD Text(Filtered Array(All Players(Team 1), Is In Spawn Room(Current Array Element)), Null, Null, Custom String(
			" \n \n \n \n \n \n \n \n \n          WELCOME TO SUPERBOTS!\n \nPRESS [INTERACT] TO SWITCH RELICS\n"), Top, 5, Color(White),
			Color(White), Color(Yellow), Visible To and String, Default Visibility);
		"Website link and version info."
		Create HUD Text(All Players(All Teams), Null, Custom String("tinyurl.com/ow2superbots"), Null, Top, -2, Color(White), Color(
			Lime Green), Color(White), Visible To and String, Default Visibility);
		"Challenge Roulette HUD (off when Disabled)."
		Create HUD Text(All Players(All Teams),
			Global.ChallengeRoulette[0] >= 2 ? Global.ChallengeRoulette[Global.ChallengeRoulette[0]] : Custom String(""), Null, Null,
			Right, -3, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		"Superbot level."
		Create HUD Text(All Players(All Teams), String("{0} {1}", String("{0} {1}", Custom String("SUPERBOT LEVEL:"),
			Global.SuperbotLevel), Hero Icon String(Hero(Roadhog))), Null, Null, Right, -2, Color(Purple), Color(White), Color(White),
			Visible To and String, Default Visibility);
		"Lucio Ultimate charge percent HUD (\"Lucio's Ult: x%\") [Disabled by Arkhanglesk#11200]"
		disabled Create HUD Text(All Players(All Teams), Custom String("LUCIO ULT: {0}%{1}", Ultimate Charge Percent(Players On Hero(Hero(LÃºcio),
			Team 2)), Hero Icon String(Hero(LÃºcio))), Null, Null, Right, Null, Color(Red), Color(White), Color(White),
			Visible To and String, Default Visibility);
		"Lucio Ultimate charge percent HUD (Dynamic) [Added by Arkhanglesk#11200]"
		Create HUD Text(All Players(All Teams), Custom String("LUCIO ULT: {0}{1}{2}", Ultimate Charge Percent(Players On Hero(Hero(LÃºcio),
			Team 2)) < 74 ? Ultimate Charge Percent(Players On Hero(Hero(LÃºcio), Team 2)) : String("Danger"), Ultimate Charge Percent(
			Players On Hero(Hero(LÃºcio), Team 2)) < 74 ? Custom String("%") : Custom String(""), Hero Icon String(Hero(LÃºcio))), Null,
			Null, Right, Null, Color(Red), Color(White), Color(White), Visible To and String, Default Visibility);
		"Flying HUD."
		Create HUD Text(Filtered Array(All Players(Team 1), Hero Of(Current Array Element) == Hero(Sigma) || Hero Of(Current Array Element)
			== Hero(Zenyatta)), Custom String("{0}", Icon String(Arrow: Up)), Custom String("[RELOAD] TO TOGGLE FLYING"), Custom String(
			"FREE FLIGHT"), Left, 9, Color(White), Color(Yellow), Color(White), Visible To and String, Default Visibility);
		"Player Relic HUD info."
		Create HUD Text(All Players(Team 1), Null, Custom String("(HOLD [CROUCH] FOR MORE INFO)"), Null, Left, 11, Color(White), Color(
			Yellow), Color(White), Visible To and String, Default Visibility);
	}
}

disabled rule("DEBUG HUD (Server Load) [Added by Arkhanglesk#11200] - High server cost")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Slot 0;
	}

	actions
	{
		If(Event Player == Host Player);
			"Server Load (As this number approaches or exceeds 100, it becomes increasingly likely that the instance will be shut down because it is consuming too many resources)"
			Create HUD Text(All Players(All Teams), Null, Custom String("{0} :Server Load", Server Load), Null, Right, 1, Color(White), Color(
				White), Color(White), Visible To and String, Default Visibility);
			"Average Server Load"
			Create HUD Text(All Players(All Teams), Null, Custom String("{0} :Server Load (AVG)", Server Load Average), Null, Right, 2, Color(
				White), Color(White), Color(White), Visible To and String, Default Visibility);
			"Server Load Peak (Max/2s)"
			Create HUD Text(All Players(All Teams), Null, Custom String("{0} :Server Load (MAX/2s)", Server Load Peak), Null, Right, 3, Color(
				White), Color(White), Color(White), Visible To and String, Default Visibility);
	}
}

rule("PLAYER HUD and [Join Late Script by SCOURGE#11437]")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Event Player.RelicEquipped = -1;
		"Icon, Level and Armor HUD."
		Create HUD Text(Event Player, Custom String("{0}", Hero Icon String(Hero Of(Event Player))), Custom String("LEVEL: {0}",
			Event Player.LEVEL), Custom String("ARMOR: {0}%", 100 - Event Player.ARMOR), Left, 1, Color(Blue), Color(White), Color(Orange),
			Visible To and String, Default Visibility);
		"Set Player Base Damage"
		Event Player.DAMAGE = 100;
		"Add Team's DAMAGE variable."
		Event Player.DAMAGE = Players In Slot(0, Team 1).DAMAGE + Players In Slot(1, Team 1).DAMAGE + Players In Slot(2, Team 1)
			.DAMAGE + Players In Slot(3, Team 1).DAMAGE + Players In Slot(4, Team 1).DAMAGE + Players In Slot(5, Team 1).DAMAGE;
		Event Player.DAMAGE /= Number Of Players(Team 1);
		Event Player.DAMAGE = Round To Integer(Max(100, Event Player.DAMAGE), Down);
		Wait(0.100, Ignore Condition);
		Event Player.LEVEL = Round To Integer(Event Player.DAMAGE / 100, Down);
		"DAMAGE HUD."
		Create HUD Text(Event Player, Custom String("{0}% DAMAGE", Event Player.DAMAGE), Null, Null, Left, 2, Color(Yellow), Color(White),
			Color(White), Visible To and String, Default Visibility);
		Event Player.HEALTH = 75 + Event Player.LEVEL * 25;
		Set Max Health(Event Player, Event Player.HEALTH);
		"SPEED HUD."
		Create HUD Text(Event Player, Custom String("{0}% SPEED", Event Player.MOVEMENT), Null, Null, Left, 4, Color(Blue), Color(White),
			Color(White), Visible To and String, Default Visibility);
		Event Player.MOVEMENT = 95 + Event Player.LEVEL * 5;
		Set Move Speed(Event Player, Event Player.MOVEMENT);
		"Player DAMAGE Modification."
		Start Damage Modification(All Players(Team 2), Event Player, Event Player.DAMAGE, Receivers Damagers and Damage Percent);
		"Player DEFENSE Modification."
		Start Damage Modification(Event Player, All Players(Team 2), Event Player.ARMOR, Receivers Damagers and Damage Percent);
		Wait(1, Ignore Condition);
		"Root Effect on Player."
		Create Effect(Filtered Array(All Players(All Teams), Event Player.RootVariable > 0), Light Shaft, Color(Green),
			Event Player + Vector(0, -1, 0), Event Player.RootVariable, Visible To Position and Radius);
		"Dead icon."
		Create Icon(Filtered Array(All Players(All Teams), Is Dead(Event Player) == True), Event Player + Vector(0, 0, 0), Skull,
			Visible To and Position, Color(Yellow), True);
		"First ability HUD."
		Create HUD Text(Filtered Array(Event Player, Event Player.HUDTextHidden[0] == False), Event Player.PlayerHUD[0],
			Event Player.PlayerHUD[1], Event Player.PlayerHUD[2], Left, 6, Color(Blue), Color(Yellow), Color(White), Visible To and String,
			Default Visibility);
		"Second ability HUD."
		Create HUD Text(Filtered Array(Event Player, Event Player.HUDTextHidden[1] == False), Event Player.PlayerHUD[3],
			Event Player.PlayerHUD[4], Event Player.PlayerHUD[5], Left, 7, Color(Blue), Color(Yellow), Color(White), Visible To and String,
			Default Visibility);
		"Third ability HUD."
		Create HUD Text(Filtered Array(Event Player, Event Player.HUDTextHidden[2] == False), Event Player.PlayerHUD[6],
			Event Player.PlayerHUD[7], Event Player.PlayerHUD[8], Left, 8, Color(Blue), Color(Yellow), Color(White), Visible To and String,
			Default Visibility);
		"Cooldown HUD."
		Create HUD Text(Filtered Array(Event Player, Is In Spawn Room(Event Player) == False && Event Player.HUDTextHidden[3] == False),
			Custom String("{0} {1} {0}", Event Player.PlayerHUD[0], Event Player.T), Null, Null, Top, -1, Color(Sky Blue), Color(White),
			Color(White), Visible To and String, Default Visibility);
	}
}

rule("PLAYER Create Lists of Heroes by Armor Tier (0%, 25%, 50%, 75%)")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.Armor0 = Array(Hero(Ashe), Hero(Hanzo), Hero(Junkrat), Hero(Cassidy), Hero(Moira), Hero(Pharah), Hero(Sigma), Hero(
			Soldier: 76), Hero(Widowmaker), Hero(Sojourn));
		Global.Armor25 = Array(Hero(Ana), Hero(Baptiste), Hero(Brigitte), Hero(Echo), Hero(LÃºcio), Hero(Mercy), Hero(Zenyatta), Hero(
			Kiriko), Hero(Illari));
		Global.Armor50 = Array(Hero(Doomfist), Hero(Genji), Hero(Mei), Hero(Reaper), Hero(Sombra), Hero(Symmetra), Hero(TorbjÃ¶rn), Hero(
			Tracer), Hero(Ramattra), Hero(Mauga));
		Global.Armor75 = Array(Hero(Bastion), Hero(D.Va), Hero(Orisa), Hero(Reinhardt), Hero(Roadhog), Hero(Winston), Hero(Wrecking Ball),
			Hero(Zarya), Hero(Junker Queen));
	}
}

rule("PLAYER Set Armor")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		"Every time a player changes characters, this condition will run the rule again."
		Hero Of(Event Player) == Event Player.HeroOfPlayer;
	}

	actions
	{
		"Disable the ability to switch relics."
		Event Player.RelicReadyToEquip = False;
		Start Forcing Player To Be Hero(Event Player, Hero Of(Event Player));
		"Unequip Corrupted or Aegis."
		If(Event Player.RelicEquipped == 2);
			Event Player.ARMOR -= 25;
		Else If(Event Player.RelicEquipped == 3);
			If(Array Contains(Global.Armor75, Hero Of(Event Player)) == True);
				Event Player.ARMOR += 10;
			Else;
				Event Player.ARMOR += 25;
			End;
		End;
		"Set base armor depending on the character's armor tier."
		If(Array Contains(Global.Armor0, Hero Of(Event Player)));
			Event Player.ARMOR = 100;
		Else If(Array Contains(Global.Armor25, Hero Of(Event Player)));
			Event Player.ARMOR = 75;
		Else If(Array Contains(Global.Armor50, Hero Of(Event Player)));
			Event Player.ARMOR = 50;
		Else If(Array Contains(Global.Armor75, Hero Of(Event Player)));
			Event Player.ARMOR = 25;
		End;
		"Re-equip Corrupted or Aegis."
		If(Event Player.RelicEquipped == 2);
			Event Player.ARMOR += 25;
		Else If(Event Player.RelicEquipped == 3);
			If(Array Contains(Global.Armor75, Hero Of(Event Player)) == True);
				Event Player.ARMOR -= 10;
			Else;
				Event Player.ARMOR -= 25;
			End;
		End;
		"Enable the ability to switch relics."
		Event Player.RelicReadyToEquip = True;
		Stop Forcing Player To Be Hero(Event Player);
	}
}

rule("PLAYER Death Counter")
{
	event
	{
		Player Died;
		Team 1;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
	}

	actions
	{
		Global.PlayerDeathCount += 1;
	}
}

rule("SUPERBOTS Death Counter and Player Damage Increase for living players")
{
	event
	{
		Player Died;
		Team 2;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
	}

	actions
	{
		Global.SuperbotDeathCount += 1;
		All Living Players(Team 1).DAMAGE += 3;
		Event Player.SuperbotEnrageCounter += 1;
	}
}

rule("PLAYER Damage Increase on ELIMINATION")
{
	event
	{
		Player Earned Elimination;
		Team 1;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
	}

	actions
	{
		Event Player.DAMAGE += 3;
		If(Hero Of(Event Player) == Hero(Junkrat));
			Event Player.JunkElimCounter += 1;
		Else If(Hero Of(Event Player) == Hero(Pharah) && Event Player.T < 950);
			Event Player.T += 25;
		End;
	}
}

rule("PLAYER Damage Increase on LAST HIT")
{
	event
	{
		Player Dealt Final Blow;
		Team 1;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
	}

	actions
	{
		Event Player.DAMAGE += 3;
	}
}

rule("PLAYER Level Up")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Event Player.DAMAGE >= Event Player.LEVEL * 100 + 100;
		Event Player.HeroOfPlayer != 0;
	}

	actions
	{
		Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Event Player, 5);
		Event Player.LEVEL += 1;
		Event Player.HEALTH += 25;
		Event Player.MOVEMENT += 10;
		Set Max Health(Event Player, Event Player.HEALTH);
		Set Move Speed(Event Player, Event Player.MOVEMENT);
		Start Heal Over Time(Event Player, Null, 0.500, 10000);
		Small Message(Event Player, Custom String(" {0} Level {1}", Hero Icon String(Hero Of(Event Player)), Event Player.LEVEL));
		If(Event Player.RelicEquipped == 0);
			Stop Heal Over Time(Event Player.RelicVariable1);
			Start Heal Over Time(Event Player, Null, 9999, Max Health(Event Player) * 0.050);
			Event Player.RelicVariable1 = Last Heal Over Time ID;
		End;
	}
}

rule("SUPERBOTS Level Up")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.SuperbotDeathCount >= Global.SuperbotLevel * 10 + 10;
	}

	actions
	{
		Global.SuperbotLevel += 1;
		Wait(0.050, Ignore Condition);
		Set Max Health(All Players(Team 2), Absolute Value(Global.SuperbotLevel * 100));
		Start Heal Over Time(All Players(Team 2), Null, 0.500, 10000);
		Big Message(All Players(All Teams), Custom String("Superbots Level {0}", Global.SuperbotLevel));
	}
}

rule("SUPERBOTS Overtime Infinite Ultimates")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Match Time == 0;
		Ultimate Charge Percent(Event Player) < 99;
		Is Using Ultimate(Event Player) == False;
		Hero Of(Event Player) != Hero(LÃºcio);
	}

	actions
	{
		Set Ultimate Charge(Event Player, 100);
		If(Hero Of(Event Player) == Hero(Zarya) || Hero Of(Event Player) == Hero(Zenyatta));
			Wait(20, Ignore Condition);
		Else;
			Wait(10, Ignore Condition);
		End;
	}
}

rule("SUPERBOTS Respawn time - 1 second")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Set Respawn Max Time(Event Player, 1);
	}
}

rule("SUPERBOTS Names (A-O) [Added by Arkhanglesk#11200]")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Is In Spawn Room(Event Player) == False;
	}

	actions
	{
		Start Forcing Dummy Bot Name(Players On Hero(Hero(Ana), Team 2), Custom String("Ana"));
		Start Forcing Dummy Bot Name(Players On Hero(Hero(Ashe), Team 2), Custom String("Ashe"));
		Start Forcing Dummy Bot Name(Players On Hero(Hero(Baptiste), Team 2), Custom String("Baptiste"));
		Start Forcing Dummy Bot Name(Players On Hero(Hero(Bastion), Team 2), Custom String("Bastion"));
		Start Forcing Dummy Bot Name(Players On Hero(Hero(Brigitte), Team 2), Custom String("Brigitte"));
		Start Forcing Dummy Bot Name(Players On Hero(Hero(Cassidy), Team 2), Custom String("Cassidy"));
		Start Forcing Dummy Bot Name(Players On Hero(Hero(Doomfist), Team 2), Custom String("Doomfist"));
		Start Forcing Dummy Bot Name(Players On Hero(Hero(Genji), Team 2), Custom String("Genji"));
		Start Forcing Dummy Bot Name(Players On Hero(Hero(Hanzo), Team 2), Custom String("Hanzo"));
		Start Forcing Dummy Bot Name(Players On Hero(Hero(Illari), Team 2), Custom String("Illari"));
		Start Forcing Dummy Bot Name(Players On Hero(Hero(Junker Queen), Team 2), Custom String("Junker Queen"));
		Start Forcing Dummy Bot Name(Players On Hero(Hero(Junkrat), Team 2), Custom String("Junkrat"));
		Start Forcing Dummy Bot Name(Players On Hero(Hero(Kiriko), Team 2), Custom String("Kiriko"));
		Start Forcing Dummy Bot Name(Players On Hero(Hero(Mauga), Team 2), Custom String("Mauga"));
		Start Forcing Dummy Bot Name(Players On Hero(Hero(Mei), Team 2), Custom String("Mei"));
		Start Forcing Dummy Bot Name(Players On Hero(Hero(Mercy), Team 2), Custom String("Mercy"));
		Start Forcing Dummy Bot Name(Players On Hero(Hero(Moira), Team 2), Custom String("Moira"));
		Start Forcing Dummy Bot Name(Players On Hero(Hero(Orisa), Team 2), Custom String("Orisa"));
	}
}

rule("SUPERBOTS Names (R-Z) [Added by Arkhanglesk#11200]")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Is In Spawn Room(Event Player) == False;
	}

	actions
	{
		Start Forcing Dummy Bot Name(Players On Hero(Hero(Ramattra), Team 2), Custom String("Ramattra"));
		Start Forcing Dummy Bot Name(Players On Hero(Hero(Reaper), Team 2), Custom String("Reaper"));
		Start Forcing Dummy Bot Name(Players On Hero(Hero(Reinhardt), Team 2), Custom String("Reinhardt"));
		Start Forcing Dummy Bot Name(Players On Hero(Hero(Roadhog), Team 2), Custom String("Roadhog"));
		Start Forcing Dummy Bot Name(Players On Hero(Hero(Sigma), Team 2), Custom String("Sigma"));
		Start Forcing Dummy Bot Name(Players On Hero(Hero(Sojourn), Team 2), Custom String("Sojourn"));
		Start Forcing Dummy Bot Name(Players On Hero(Hero(Soldier: 76), Team 2), Custom String("Soldier: 76"));
		Start Forcing Dummy Bot Name(Players On Hero(Hero(Sombra), Team 2), Custom String("Sombra"));
		Start Forcing Dummy Bot Name(Players On Hero(Hero(Symmetra), Team 2), Custom String("Symmetra"));
		Start Forcing Dummy Bot Name(Players On Hero(Hero(Tracer), Team 2), Custom String("Tracer"));
		Start Forcing Dummy Bot Name(Players On Hero(Hero(Widowmaker), Team 2), Custom String("Widowmaker"));
		Start Forcing Dummy Bot Name(Players On Hero(Hero(Winston), Team 2), Custom String("Winston"));
		Start Forcing Dummy Bot Name(Players On Hero(Hero(Zenyatta), Team 2), Custom String("Zenyatta"));
	}
}

rule("SUPERBOT Enraged Kill Message")
{
	event
	{
		Player Dealt Final Blow;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.SuperbotEnrageCounter > 5;
	}

	actions
	{
		Small Message(Victim, Custom String("{0} KILLED YOU WHILE ENRAGED", Hero Icon String(Hero Of(Event Player))));
	}
}

disabled rule("SUPERBOTS Final Challenge ON (Control) [WIP - On hold, workshop load issues]")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		disabled Is Game In Progress == True;
		disabled Array Contains(Global.ControlMaps, Custom String("{0}", Current Map)) == True;
		disabled Control Mode Scoring Percentage(Team 1) > 20;
		disabled Control Mode Scoring Percentage(Team 2) < 20;
	}

	actions
	{
		"Sets a random number to index 0 between 0 and 8."
		disabled Global.ChallengeRoulette[0] = Random Integer(4, 8);
		disabled Wait(0.020, Ignore Condition);
		"If Index 0 is the same as Index 1, then it loops."
		disabled Loop If(Global.ChallengeRoulette[0] == Global.ChallengeRoulette[1]);
		"Once it stops being the same number, it will set 1 to whatever 0 is."
		disabled Global.ChallengeRoulette[1] = Global.ChallengeRoulette[0];
		disabled Respawn(All Players(Team 2));
		disabled Set Status(All Players(Team 2), Null, Rooted, 10);
		disabled Small Message(All Players(All Teams), Custom String("!!! ATTENTION !!!"));
		disabled Wait(1, Ignore Condition);
		disabled Big Message(All Players(All Teams), Custom String("FINAL CHALLENGE: {0}", Global.ChallengeRoulette[Global.ChallengeRoulette[0]]));
		disabled Small Message(All Players(All Teams), Custom String("!!! ATTENTION !!!"));
		disabled Wait(2, Ignore Condition);
		disabled If(Global.ChallengeRoulette[0] == 2);
		disabled Small Message(All Players(All Teams), Custom String("PLAYERS TAKE DAMAGE OVER TIME"));
		disabled Wait(1, Ignore Condition);
		disabled Small Message(All Players(All Teams), Custom String("WHEN SEPARATED FROM OTHER TEAMMATES"));
		disabled Else If(Global.ChallengeRoulette[0] == 3);
		disabled Small Message(All Players(All Teams), Custom String("PLAYERS TAKE DAMAGE OVER TIME"));
		disabled Wait(1, Ignore Condition);
		disabled Small Message(All Players(All Teams), Custom String("WHEN NEAR TEAMMATES"));
		disabled Else If(Global.ChallengeRoulette[0] == 4);
		disabled Small Message(All Players(All Teams), Custom String("SUPERBOTS CAN ONLY BE DISABLED FOR ONE SECOND"));
		disabled Wait(1, Ignore Condition);
		disabled Else If(Global.ChallengeRoulette[0] == 5);
		disabled Small Message(All Players(All Teams), Custom String("RESPAWN DISABLED FOR PLAYERS"));
		disabled Wait(1, Ignore Condition);
		disabled Small Message(All Players(All Teams), Custom String("RESURRECTION STILL WORKS"));
		disabled Else If(Global.ChallengeRoulette[0] == 6);
		disabled Small Message(All Players(All Teams), Custom String("BOTS HAVE 99% ARMOR WHILE MOVING"));
		disabled Wait(1, Ignore Condition);
		disabled Small Message(All Players(All Teams), Custom String("DISABLE THEM TO KILL THEM"));
		disabled Else If(Global.ChallengeRoulette[0] == 7);
		disabled Small Message(All Players(All Teams), Custom String("SUPERBOTS MOVE AT 500% SPEED"));
		disabled Wait(1, Ignore Condition);
		disabled Else If(Global.ChallengeRoulette[0] == 8);
		disabled Small Message(All Players(All Teams), Custom String("SUPERBOTS ARE HEAVY, FAST AND..."));
		disabled Wait(1, Ignore Condition);
		disabled Small Message(All Players(All Teams), Custom String("...HAVE 25% ARMOR, GOOD LUCK!"));
		disabled End;
		disabled Wait(5, Ignore Condition);
		disabled Set Ultimate Charge(Players On Hero(Hero(LÃºcio), Team 2), 50);
	}
}

disabled rule("SUPERBOTS Final Challenge OFF (Control) [WIP - On hold, workshop load issues]")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		disabled Array Contains(Global.ControlMaps, Custom String("{0}", Current Map)) == True;
		disabled Is Game In Progress == True;
		disabled Control Mode Scoring Percentage(Team 2) > 20;
	}

	actions
	{
		disabled If(Global.ChallengeRoulette[0] == 5);
		disabled Big Message(All Players(All Teams), Custom String("FINAL CHALLENGE RESET"));
		disabled Enable Built-In Game Mode Respawning(All Players(Team 1));
		disabled Respawn(All Dead Players(All Teams));
		disabled Else If(Global.ChallengeRoulette[0] == 6);
		disabled Stop Damage Modification(Global.ChallengeDmgMod);
		disabled Set Gravity(All Players(Team 2), 100);
		disabled Else If(Global.ChallengeRoulette[0] == 7);
		disabled Set Move Speed(All Players(Team 2), All Players(Team 2).MOVEMENT);
		disabled Else If(Global.ChallengeRoulette[0] == 8);
		disabled Stop Damage Modification(Global.ChallengeDmgMod);
		disabled Set Move Speed(All Players(Team 2), All Players(Team 2).MOVEMENT);
		disabled Set Gravity(All Players(Team 2), 100);
		disabled End;
		disabled Global.ChallengeRoulette[0] = 0;
	}
}

rule("SUPERBOTS Final Challenge ON")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		Match Time < 61;
		"If NOT Control map (disabled, workshop load)"
		disabled Array Contains(Global.ControlMaps, Custom String("{0}", Current Map)) == False;
	}

	actions
	{
		"Sets a random number to index 0 between 0 and 8."
		Global.ChallengeRoulette[0] = Random Integer(4, 8);
		Wait(0.020, Ignore Condition);
		"If Index 0 is the same as Index 1, then it loops."
		Loop If(Global.ChallengeRoulette[0] == Global.ChallengeRoulette[1]);
		"Once it stops being the same number, it will set 1 to whatever 0 is."
		Global.ChallengeRoulette[1] = Global.ChallengeRoulette[0];
		Respawn(All Players(Team 2));
		Set Status(All Players(Team 2), Null, Rooted, 10);
		Small Message(All Players(All Teams), Custom String("  !!!ATTENTION!!!"));
		Wait(1, Ignore Condition);
		Big Message(All Players(All Teams), Custom String("OVERTIME CHALLENGE: {0}",
			Global.ChallengeRoulette[Global.ChallengeRoulette[0]]));
		Small Message(All Players(All Teams), Custom String("  !!!ATTENTION!!!"));
		Wait(2, Ignore Condition);
		If(Global.ChallengeRoulette[0] == 2);
			Small Message(All Players(All Teams), Custom String(" PLAYERS TAKE DAMAGE OVER TIME"));
			Wait(1, Ignore Condition);
			Small Message(All Players(All Teams), Custom String(" WHEN SEPARATED FROM OTHER TEAMMATES"));
		Else If(Global.ChallengeRoulette[0] == 3);
			Small Message(All Players(All Teams), Custom String(" PLAYERS TAKE DAMAGE OVER TIME"));
			Wait(1, Ignore Condition);
			Small Message(All Players(All Teams), Custom String(" WHEN NEAR TEAMMATES"));
		Else If(Global.ChallengeRoulette[0] == 4);
			Small Message(All Players(All Teams), Custom String(" SUPERBOTS CAN ONLY BE DISABLED FOR ONE SECOND"));
			Wait(1, Ignore Condition);
		Else If(Global.ChallengeRoulette[0] == 5);
			Small Message(All Players(All Teams), Custom String(" RESPAWN DISABLED FOR PLAYERS"));
			Wait(1, Ignore Condition);
			Small Message(All Players(All Teams), Custom String(" RESURRECTION STILL WORKS"));
		Else If(Global.ChallengeRoulette[0] == 6);
			Small Message(All Players(All Teams), Custom String(" BOTS HAVE 99% ARMOR WHILE MOVING"));
			Wait(1, Ignore Condition);
			Small Message(All Players(All Teams), Custom String(" DISABLE THEM TO KILL THEM"));
		Else If(Global.ChallengeRoulette[0] == 7);
			Small Message(All Players(All Teams), Custom String(" SUPERBOTS MOVE AT 500% SPEED"));
			Wait(1, Ignore Condition);
		Else If(Global.ChallengeRoulette[0] == 8);
			Small Message(All Players(All Teams), Custom String(" SUPERBOTS ARE HEAVY, FAST AND..."));
			Wait(1, Ignore Condition);
			Small Message(All Players(All Teams), Custom String(" ...HAVE 25% ARMOR, GOOD LUCK!"));
		End;
		Wait(5, Ignore Condition);
		Set Ultimate Charge(Players On Hero(Hero(LÃºcio), Team 2), 50);
	}
}

rule("SUPERBOTS Final Challenge OFF")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		Match Time > 60;
		"If NOT Control map (disabled, workshop load)"
		disabled Array Contains(Global.ControlMaps, Custom String("{0}", Current Map)) == False;
	}

	actions
	{
		If(Global.ChallengeRoulette[0] == 5);
			Big Message(All Players(All Teams), Custom String("OVERTIME CHALLENGE RESET"));
			Enable Built-In Game Mode Respawning(All Players(Team 1));
			Respawn(All Dead Players(All Teams));
		Else If(Global.ChallengeRoulette[0] == 6);
			Stop Damage Modification(Global.ChallengeDmgMod);
			Set Gravity(All Players(Team 2), 100);
		Else If(Global.ChallengeRoulette[0] == 7);
			Set Move Speed(All Players(Team 2), All Players(Team 2).MOVEMENT);
		Else If(Global.ChallengeRoulette[0] == 8);
			Stop Damage Modification(Global.ChallengeDmgMod);
			Set Move Speed(All Players(Team 2), All Players(Team 2).MOVEMENT);
			Set Gravity(All Players(Team 2), 100);
		End;
		Global.ChallengeRoulette[0] = 0;
	}
}

disabled rule("SUPERBOTS Final Challenge ([0] == 2) Separation Anxiety")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		disabled Match Time < 30;
		disabled Global.ChallengeRoulette[0] == 2;
		disabled Is True For Any(All Living Players(Team 1), Distance Between(Event Player, Current Array Element) > 5) == True;
	}

	actions
	{
		disabled Damage(Event Player, Null, Max Health(Event Player) * 0.150);
		disabled Wait(1, Ignore Condition);
		disabled Loop If Condition Is True;
	}
}

disabled rule("SUPERBOTS Final Challenge ([0] == 3) Social Distancing")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		disabled Match Time < 30;
		disabled Global.ChallengeRoulette[0] == 3;
		disabled Is True For Any(All Living Players(Team 1), Distance Between(Event Player, Current Array Element) < 5) == True;
	}

	actions
	{
		disabled Damage(Event Player, Null, Max Health(Event Player) * 0.150);
		disabled Wait(1, Ignore Condition);
		disabled Loop If Condition Is True;
	}
}

rule("SUPERBOTS Final Challenge ([0] == 4) Relentless")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Match Time < 30;
		Global.ChallengeRoulette[0] == 4;
		(Has Status(Event Player, Hacked) || Has Status(Event Player, Frozen) || Has Status(Event Player, Rooted) || Has Status(
			Event Player, Knocked Down) || Has Status(Event Player, Stunned) || Has Status(Event Player, Asleep)) == True;
	}

	actions
	{
		Wait(1, Ignore Condition);
		Start Rule(ClearAllStatus, Restart Rule);
	}
}

rule("SUPERBOTS Final Challenge ([0] == 5) Sudden Death")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Match Time < 30;
		Global.ChallengeRoulette[0] == 5;
	}

	actions
	{
		Respawn(All Dead Players(Team 1));
		Disable Built-In Game Mode Respawning(All Players(Team 1));
	}
}

rule("SUPERBOTS Final Challenge ([0] == 6) Juggernaut")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Match Time < 30;
		Global.ChallengeRoulette[0] == 6;
	}

	actions
	{
		Start Damage Modification(Filtered Array(All Players(Team 2), Is Moving(Current Array Element) == True), All Players(Team 1), 1,
			Receivers Damagers and Damage Percent);
		Global.ChallengeDmgMod = Last Damage Modification ID;
		Set Gravity(All Players(Team 2), 500);
	}
}

rule("SUPERBOTS Final Challenge ([0] == 7) Swarm")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Match Time < 30;
		Global.ChallengeRoulette[0] == 7;
	}

	actions
	{
		Set Move Speed(All Players(Team 2), 500);
	}
}

rule("SUPERBOTS Final Challenge ([0] == 8) Apotheosis")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Match Time < 30;
		Global.ChallengeRoulette[0] == 8;
	}

	actions
	{
		Start Damage Modification(All Players(Team 2), All Players(Team 1), 75, Receivers Damagers and Damage Percent);
		Global.ChallengeDmgMod = Last Damage Modification ID;
		Set Gravity(All Players(Team 2), 500);
		Set Move Speed(All Players(Team 2), 300);
	}
}

rule("============== LUCIO RANDOM EVENTS ==============")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		LÃºcio;
	}

	conditions
	{
		Is Game In Progress == True;
		Ultimate Charge Percent(Players On Hero(Hero(LÃºcio), Team 2)) >= 80;
	}

	actions
	{
		"Sets a random number to index 0 between 0 and 8."
		Global.LucioRoulette[0] = Random Integer(0, 8);
		Wait(0.020, Ignore Condition);
		"If Index 0 is the same as Index 1, then it loops."
		Loop If(Global.LucioRoulette[0] == Global.LucioRoulette[1]);
		"Once it stops being the same number, it will set 1 to whatever 0 is."
		Global.LucioRoulette[1] = Global.LucioRoulette[0];
	}
}

rule("SUPERBOTS Lucio Ultimate Summon")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		LÃºcio;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Wait(0.750, Ignore Condition);
		Resurrect(All Dead Players(Team 2));
		Wait(0.250, Ignore Condition);
		Play Effect(All Players(All Teams), Good Pickup Effect, Color(Green), Position Of(Players In Slot(0, Team 2)), 1);
		Play Effect(All Players(All Teams), Good Pickup Effect, Color(Green), Position Of(Players In Slot(1, Team 2)), 1);
		Play Effect(All Players(All Teams), Good Pickup Effect, Color(Green), Position Of(Players In Slot(2, Team 2)), 1);
		Play Effect(All Players(All Teams), Good Pickup Effect, Color(Green), Position Of(Players In Slot(3, Team 2)), 1);
		Play Effect(All Players(All Teams), Good Pickup Effect, Color(Green), Position Of(Players In Slot(4, Team 2)), 1);
		Play Effect(All Players(All Teams), Good Pickup Effect, Color(Green), Position Of(Players In Slot(5, Team 2)), 1);
		Teleport(Remove From Array(All Players(Team 2), Event Player), Position Of(Event Player));
		Set Slow Motion(30);
		Play Effect(All Players(All Teams), Bad Explosion, Color(Green), Event Player, 20);
		Wait(1, Ignore Condition);
		Set Slow Motion(100);
		Wait(11, Ignore Condition);
		Global.LucioRoulette = 10;
	}
}

rule("SUPERBOTS Lucio Enabled Ultimate")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		LÃºcio;
	}

	conditions
	{
		Is On Objective(Event Player) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Global.SlowTimeCheck == False;
	}

	actions
	{
		Global.SlowTimeCheck = True;
		Set Status(Event Player, Null, Rooted, 3);
		Set Status(Event Player, Null, Phased Out, 3);
		Wait(0.500, Ignore Condition);
		Allow Button(Event Player, Button(Ultimate));
		Press Button(Event Player, Button(Ultimate));
		Wait(2.600, Ignore Condition);
		Global.SlowTimeCheck = False;
	}
}

rule("SUPERBOTS Lucio Disabled Ultimate")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		LÃºcio;
	}

	conditions
	{
		Is On Objective(Event Player) == False;
	}

	actions
	{
		Disallow Button(Event Player, Button(Ultimate));
	}
}

rule("SUPERBOTS Lucio Ultimate 0 (BLAST OFF!)")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		LÃºcio;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Using Ultimate(Event Player) == True;
		Global.LucioRoulette[0] == 0;
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String(" {0} BLAST OFF!", Hero Icon String(Hero(LÃºcio))));
		Wait(0.500, Ignore Condition);
		Apply Impulse(Players Within Radius(Event Player, 20, Team 1, Surfaces), Up, 35, To World, Cancel Contrary Motion);
		Wait(12, Ignore Condition);
	}
}

rule("SUPERBOTS Lucio Ultimate 1 (ROOTED!)")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		LÃºcio;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Using Ultimate(Event Player) == True;
		Global.LucioRoulette[0] == 1;
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String(" {0} ROOTED!", Hero Icon String(Hero(LÃºcio))));
		Wait(0.500, Ignore Condition);
		Set Status(Filtered Array(Players Within Radius(Event Player, 20, Team 1, Surfaces), Is Alive(Current Array Element) == True),
			Null, Rooted, 7);
		Filtered Array(Players Within Radius(Event Player, 20, Team 1, Surfaces), Is Alive(Current Array Element) == True)
			.RootVariable = 1.500;
		Chase Player Variable At Rate(Filtered Array(Players Within Radius(Event Player, 20, Team 1, Surfaces), Is Alive(
			Current Array Element) == True), RootVariable, 0, 0.214, Destination and Rate);
		Wait(8, Ignore Condition);
		Stop Chasing Player Variable(All Players(Team 1), RootVariable);
		Wait(4, Ignore Condition);
	}
}

rule("SUPERBOTS Lucio Ultimate 2 (CHILL OUT!)")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		LÃºcio;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Using Ultimate(Event Player) == True;
		Global.LucioRoulette[0] == 2;
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String(" {0} CHILL OUT!", Hero Icon String(Hero(LÃºcio))));
		Wait(0.500, Ignore Condition);
		Set Status(Players Within Radius(Event Player, 20, Team 1, Surfaces), Null, Frozen, 4);
		Wait(12, Ignore Condition);
	}
}

rule("SUPERBOTS Lucio Ultimate 3 (KNOCKDOWN!)")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		LÃºcio;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Using Ultimate(Event Player) == True;
		Global.LucioRoulette[0] == 3;
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String(" {0} KNOCKDOWN!", Hero Icon String(Hero(LÃºcio))));
		Wait(0.500, Ignore Condition);
		Set Status(Players Within Radius(Event Player, 20, Team 1, Surfaces), Null, Knocked Down, 3);
		Wait(12, Ignore Condition);
	}
}

rule("SUPERBOTS Lucio Ultimate 4 (GET OVER HERE!)")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		LÃºcio;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Using Ultimate(Event Player) == True;
		Global.LucioRoulette[0] == 4;
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String(" {0} GET OVER HERE!", Hero Icon String(Hero(LÃºcio))));
		Wait(0.750, Ignore Condition);
		Teleport(Players Within Radius(Event Player, 20, Team 1, Surfaces), Position Of(Event Player));
		Play Effect(All Players(All Teams), Good Pickup Effect, Color(Green), Players Within Radius(Event Player, 20, All Teams, Off), 1);
		Wait(12, Ignore Condition);
	}
}

rule("SUPERBOTS Lucio Ultimate 5 (INVISIBILITY!)")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		LÃºcio;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Using Ultimate(Event Player) == True;
		Global.LucioRoulette[0] == 5;
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String(" {0} INVISIBILITY!", Hero Icon String(Hero(LÃºcio))));
		Wait(0.750, Ignore Condition);
		Create Effect(All Players(All Teams), Cloud, Color(White), Position Of(Event Player) + Vector(0, 1, 0), 10, Visible To);
		Global.LucioSmokeEffect = Last Created Entity;
		Set Invisible(All Players(Team 2), Enemies);
		Wait(12, Ignore Condition);
		Destroy Effect(Global.LucioSmokeEffect);
		Set Invisible(All Players(Team 2), None);
	}
}

rule("SUPERBOTS Lucio Ultimate 6 (WORLD ON FIRE)")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		LÃºcio;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Using Ultimate(Event Player) == True;
		Global.LucioRoulette[0] == 6;
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String(" {0} WORLD ON FIRE", Hero Icon String(Hero(LÃºcio))));
		Wait(0.750, Ignore Condition);
		Set Status(Players Within Radius(Event Player, 20, Team 1, Surfaces), Event Player, Burning, 12);
		Start Damage Over Time(Players Within Radius(Event Player, 20, Team 2, Surfaces), Event Player, 12, Max Health(Event Player)
			* 0.150);
		Wait(12, Ignore Condition);
	}
}

rule("SUPERBOTS Lucio Ultimate 7 (STAY AWHILE AND LISTEN)")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		LÃºcio;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Using Ultimate(Event Player) == True;
		Global.LucioRoulette[0] == 7;
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String(" {0} STAY AWHILE AND LISTEN", Hero Icon String(Hero(LÃºcio))));
		Wait(0.500, Ignore Condition);
		Set Status(Players Within Radius(Event Player, 20, Team 1, Surfaces), Null, Asleep, 10);
		Wait(12, Ignore Condition);
	}
}

rule("SUPERBOTS Lucio Ultimate 8 (HACKED!!!)")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		LÃºcio;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Using Ultimate(Event Player) == True;
		Global.LucioRoulette[0] == 8;
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String(" {0} HACKED!!!", Hero Icon String(Hero(LÃºcio))));
		Wait(0.500, Ignore Condition);
		Create Effect(All Players(All Teams), Sphere, Color(Green), Event Player, Event Player.AegisRelicEffect,
			Visible To Position and Radius);
		Event Player.U = Last Created Entity;
		Chase Player Variable At Rate(Event Player, AegisRelicEffect, 30, 30, Destination and Rate);
		Wait(0.500, Ignore Condition);
		Set Status(Players Within Radius(Event Player, 30, Team 1, Surfaces), Null, Hacked, 7);
		Wait(0.500, Ignore Condition);
		Stop Chasing Player Variable(Event Player, AegisRelicEffect);
		Destroy Effect(Event Player.U);
		Wait(12, Ignore Condition);
		Event Player.AegisRelicEffect = 0;
	}
}

rule("============== SUPERBOT PASSIVE ABILITIES ==============")
{
	event
	{
		Player Died;
		Team 2;
		LÃºcio;
	}

	conditions
	{
		Attacker == Victim;
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String("{0} SUPERBOTS, BLASTING OFF AGAIN!", Hero Icon String(Hero(LÃºcio))));
		Wait(0.250, Ignore Condition);
	}
}

rule("SUPERBOTS Setup (Health, Movement, Effects and Icons) [Updated by Arkhanglesk#11200]")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is In Setup == True;
	}

	actions
	{
		Create Effect(Filtered Array(All Players(All Teams), Event Player.RootVariable > 0), Light Shaft, Color(Purple),
			Event Player + Vector(0, -1, 0), Event Player.RootVariable, Visible To Position and Radius);
		Wait(1, Ignore Condition);
		Create Icon(Filtered Array(All Players(All Teams), Event Player.MercyCharm == 1), Event Player + Vector(0, 0, 0), Heart,
			Visible To and Position, Color(Red), True);
		Wait(1, Ignore Condition);
		Create In-World Text(Filtered Array(Players On Hero(Hero(Genji), Team 1), Event Player.GenjiMarkofDeath == 1), Custom String(
			"{0}æ­»", Event Player.GenjiMarkofDeathStacks), Event Player + Vector(0, 0, 0), 4, Do Not Clip, Visible To Position and String,
			Color(Lime Green), Default Visibility);
		Wait(1, Ignore Condition);
		Create Effect(Filtered Array(All Players(All Teams), Event Player.SuperbotEnrageCounter >= 5), Bad Aura, Color(Red), Event Player,
			0.500 + Event Player.SuperbotEnrageCounter * 0.050, Visible To Position and Radius);
		If(Hero Of(Event Player) == Hero(LÃºcio));
			"Removed Lucio's \"Danger\" icon to reflect GLOBAL HUD updates"
			disabled Create Icon(Filtered Array(All Players(All Teams), Ultimate Charge Percent(Event Player) > 80), Event Player, Warning,
				Visible To and Position, Color(Lime Green), True);
			Event Player.MOVEMENT = 300;
		Else If(Hero Of(Event Player) == Hero(Zarya));
			Event Player.S = Vector(0, -500, 0);
			Wait(0.500, Ignore Condition);
			Create Effect(All Players(All Teams), Bad Aura, Color(Lime Green), Event Player.S, Event Player.V, Visible To Position and Radius);
			Create Effect(All Players(All Teams), Sphere, Color(Red), Event Player.S, Event Player.V, Visible To Position and Radius);
			Create Effect(All Players(All Teams), Good Aura, Color(Lime Green), Event Player.S, Event Player.V,
				Visible To Position and Radius);
			Event Player.V = 0;
			Event Player.MOVEMENT = 100;
		Else;
			Event Player.MOVEMENT = 100;
		End;
		Set Move Speed(Event Player, Event Player.MOVEMENT);
	}
}

rule("SUPERBOTS Zarya Radiation Activation ON DEATH")
{
	event
	{
		Player Died;
		Team 2;
		Zarya;
	}

	conditions
	{
		Is Game In Progress == True;
	}

	actions
	{
		Event Player.S = Position Of(Event Player);
		Wait(0.050, Ignore Condition);
		Chase Player Variable At Rate(Event Player, V, 10, 1, Destination and Rate);
		Wait(10, Ignore Condition);
		Stop Chasing Player Variable(Event Player, V);
		Chase Player Variable At Rate(Event Player, V, 0, 20, Destination and Rate);
		Wait(0.500, Ignore Condition);
		Play Effect(All Players(All Teams), Bad Explosion, Color(Lime Green), Event Player.S, 20);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Red), Event Player.S, 20);
		Kill(Players Within Radius(Event Player.S, 10, Team 1, Off), Event Player);
		Wait(0.100, Ignore Condition);
		Event Player.S = Vector(0, -500, 0);
		Stop Chasing Player Variable(Event Player, V);
		Event Player.V = 0;
	}
}

rule("SUPERBOTS Zarya Radiation Damage")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Hero Being Played(Hero(Zarya), Team 2) == True;
		Has Status(Event Player, Phased Out) == False;
		Distance Between(Event Player, Players On Hero(Hero(Zarya), Team 2).S) <= Players On Hero(Hero(Zarya), Team 2).V;
	}

	actions
	{
		Set Status(Event Player, Null, Burning, 1);
		Start Damage Over Time(Event Player, Null, 1, Max Health(Event Player) * 0.350);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("SUPERBOTS Lucio Healing ON")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Is True For Any(Players On Hero(Hero(LÃºcio), Team 2), Distance Between(Position Of(Event Player), Position Of(
			Current Array Element)) < 15) == True;
	}

	actions
	{
		Start Heal Over Time(Event Player, Players On Hero(Hero(LÃºcio), Team 2), 9999, Max Health(Event Player) * 0.050);
	}
}

rule("SUPERBOTS Lucio Healing OFF")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Is True For Any(Players On Hero(Hero(LÃºcio), Team 2), Distance Between(Position Of(Event Player), Position Of(
			Current Array Element)) > 15) == True;
	}

	actions
	{
		Stop All Heal Over Time(Event Player);
	}
}

rule("SUPERBOTS Reaper Ultimate 0.5 Sec Stun")
{
	event
	{
		Player Took Damage;
		Team 1;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Using Ultimate(Attacker) == True;
		Hero Of(Attacker) == Hero(Reaper);
	}

	actions
	{
		Set Status(Victim, Event Player, Stunned, 0.500);
		Wait(3, Ignore Condition);
	}
}

rule("SUPERBOTS Torbot Enabled Sentry")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		TorbjÃ¶rn;
	}

	conditions
	{
		Is On Objective(Event Player) == True;
	}

	actions
	{
		Allow Button(Event Player, Button(Ability 1));
		Press Button(Event Player, Button(Ability 1));
	}
}

rule("SUPERBOTS Torbot Disabled Sentry")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		TorbjÃ¶rn;
	}

	conditions
	{
		Is On Objective(Event Player) == False;
	}

	actions
	{
		Disallow Button(Event Player, Button(Ability 1));
	}
}

disabled rule("SUPERBOTS Torbot Ultimate Auto-Fire [Broken in OW2 (workshop rate-of-fire changes); need to fix)")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		TorbjÃ¶rn;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Press Button(Event Player, Button(Primary Fire));
		Wait(0.500, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("SUPERBOTS Spawn Invincibility ON")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is In Spawn Room(Event Player) == True;
	}

	actions
	{
		Set Status(Event Player, Null, Unkillable, 999);
		Set Invisible(Event Player, All);
	}
}

rule("SUPERBOTS Spawn Invincibility OFF")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is In Spawn Room(Event Player) == False;
	}

	actions
	{
		Clear Status(Event Player, Unkillable);
		Set Invisible(Event Player, None);
	}
}

rule("SUPERBOTS LUCIO Phased Out ON")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		LÃºcio;
	}

	conditions
	{
		Ultimate Charge Percent(Event Player) == 100;
	}

	actions
	{
		Set Status(Event Player, Null, Phased Out, 9999);
	}
}

rule("SUPERBOTS LUCIO Phased Out OFF")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		LÃºcio;
	}

	conditions
	{
		Ultimate Charge Percent(Event Player) != 100;
	}

	actions
	{
		Clear Status(Event Player, Phased Out);
	}
}

rule("SUPERBOT Enrage")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.SuperbotEnrageCounter >= 5;
	}

	actions
	{
		Start Damage Modification(All Players(Team 1), Event Player, 125 + Event Player.SuperbotEnrageCounter * 15,
			Receivers Damagers and Damage Percent);
		Event Player.DamageMOD = Last Damage Modification ID;
	}
}

rule("SUPERBOT Enrage Reset on Kill")
{
	event
	{
		Player Dealt Final Blow;
		Team 2;
		All;
	}

	actions
	{
		If(Event Player.SuperbotEnrageCounter >= 5);
			Stop Damage Modification(Event Player.DamageMOD);
		End;
		Event Player.SuperbotEnrageCounter = 0;
	}
}

rule("ANA AoE Healing shots")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Ana;
	}

	conditions
	{
		Is Firing Primary(Event Player) == True;
	}

	actions
	{
		Heal(Players Within Radius(Ray Cast Hit Position(Eye Position(Event Player), 100 * Facing Direction Of(Event Player)
			+ Eye Position(Event Player), All Players(All Teams), Event Player, False), 5, Team 1, Off), Event Player, 150);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Yellow), Ray Cast Hit Position(Eye Position(Event Player),
			100 * Facing Direction Of(Event Player) + Eye Position(Event Player), All Players(All Teams), Event Player, False), 10);
		Wait(0.500, Ignore Condition);
	}
}

rule("ANA Poison Cloud Placement")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Ana;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Wait(0.100, Ignore Condition);
		Event Player.R = 0;
		Event Player.U = Ray Cast Hit Position(Eye Position(Event Player), 100 * Facing Direction Of(Event Player) + Eye Position(
			Event Player), All Players(Team 2), Event Player, False);
		Chase Player Variable At Rate(Event Player, R, 10, 1, Destination and Rate);
		Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Purple), Event Player.U, 10);
		Play Effect(All Players(All Teams), Debuff Impact Sound, Color(Purple), Event Player, 100);
		Wait(15, Restart When True);
		Stop Chasing Player Variable(Event Player, R);
		Event Player.U = Vector(0, -500, 0);
		Event Player.R = 0;
	}
}

rule("ANA Poison Cloud Damage")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Ana;
	}

	conditions
	{
		Is Game In Progress == True;
		Is True For Any(All Living Players(Team 2), Distance Between(Position Of(Event Player.U), Position Of(Current Array Element))
			<= Event Player.R) == True;
	}

	actions
	{
		Damage(Players Within Radius(Event Player.U, Event Player.R, Team 2, Off), Event Player, Event Player.DAMAGE / 100 * 10);
		Wait(0.350, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("ANA Primary Poison")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Ana;
	}

	conditions
	{
		Event Ability == Button(Primary Fire);
	}

	actions
	{
		Start Damage Over Time(Victim, Event Player, 10, Max Health(Event Player) * 0.010);
	}
}

rule("ASHE Float Scope")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Ashe;
	}

	conditions
	{
		Is In Air(Event Player) == True;
		Vertical Speed Of(Event Player) <= 0.100;
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
	}

	actions
	{
		Set Gravity(Event Player, 0);
		Wait(2.500, Ignore Condition);
		Set Gravity(Event Player, 100);
	}
}

rule("ASHE Float Scope OFF")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Ashe;
	}

	conditions
	{
		Is In Air(Event Player) == True;
		Vertical Speed Of(Event Player) <= 0.100;
		Is Button Held(Event Player, Button(Secondary Fire)) == False;
	}

	actions
	{
		Set Gravity(Event Player, 100);
	}
}

rule("ASHE Explosive Small Rounds")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Ashe;
	}

	conditions
	{
		Is Firing Primary(Event Player) == True;
	}

	actions
	{
		If(Is Button Held(Event Player, Button(Secondary Fire)) == True);
			Damage(Players Within Radius(Ray Cast Hit Position(Eye Position(Event Player), 100 * Facing Direction Of(Event Player)
				+ Eye Position(Event Player), All Players(Team 2), Event Player, True), 10, Team 2, Surfaces), Event Player, 40);
			Play Effect(All Players(All Teams), Bad Explosion, Color(Sky Blue), Ray Cast Hit Position(Eye Position(Event Player),
				100 * Facing Direction Of(Event Player) + Eye Position(Event Player), All Players(Team 2), Event Player, True), 4);
		Else;
			Damage(Players Within Radius(Ray Cast Hit Position(Eye Position(Event Player), 100 * Facing Direction Of(Event Player)
				+ Eye Position(Event Player), All Players(Team 2), Event Player, True), 7, Team 2, Surfaces), Event Player, 20);
			Play Effect(All Players(All Teams), Bad Explosion, Color(Orange), Ray Cast Hit Position(Eye Position(Event Player),
				100 * Facing Direction Of(Event Player) + Eye Position(Event Player), All Players(Team 2), Event Player, True), 2);
		End;
		Wait(0.150, Ignore Condition);
	}
}

disabled rule("BAPTISTE Ultimate [Broken in OW2, need to fix]")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Baptiste;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Big Message(Event Player, Custom String("{0} FULL-AUTO MATRIX ENABLED", Ability Icon String(Hero(Baptiste), Button(
			Primary Fire))));
		Play Effect(All Players(All Teams), Buff Explosion Sound, Color(White), Event Player, 200);
		Communicate(Event Player, Voice Line Up);
		Event Player.FullAutoFire = True;
		Wait(10, Ignore Condition);
		Event Player.FullAutoFire = False;
		Big Message(Event Player, Custom String("{0} FULL-AUTO MATRIX DISABLED", Ability Icon String(Hero(Baptiste), Button(
			Primary Fire))));
	}
}

disabled rule("BAPTISTE Ultimate Full-Auto [Broken in OW2, need to fix]")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Baptiste;
	}

	conditions
	{
		Event Player.FullAutoFire == True;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Is Button Held(Event Player, Button(Secondary Fire)) == False;
	}

	actions
	{
		Wait(0.140, Ignore Condition);
		Set Projectile Speed(Event Player, 500);
		Loop If Condition Is True;
	}
}

rule("BAPTISTE Hover Boots")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Baptiste;
	}

	conditions
	{
		Is In Air(Event Player) == True;
		Is Button Held(Event Player, Button(Jump)) == True;
		Vertical Speed Of(Event Player) < -1;
		(Has Status(Event Player, Hacked) || Has Status(Event Player, Frozen) || Has Status(Event Player, Rooted) || Has Status(
			Event Player, Knocked Down) || Has Status(Event Player, Stunned) || Has Status(Event Player, Asleep)) == False;
	}

	actions
	{
		Set Gravity(Event Player, 0);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Blue), Position Of(Event Player), 1);
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
		Set Gravity(Event Player, 100);
	}
}

rule("BAPTISTE Grenade Shots")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Baptiste;
	}

	conditions
	{
		Is Firing Secondary(Event Player) == True;
	}

	actions
	{
		Wait(0.150, Ignore Condition);
		Damage(Players Within Radius(Ray Cast Hit Position(Eye Position(Event Player), 100 * Facing Direction Of(Event Player)
			+ Eye Position(Event Player), All Players(Team 2), Event Player, True), 5, Team 2, Surfaces), Event Player, 40);
		Heal(Event Player, Event Player, Max Health(Event Player) * 0.100);
	}
}

disabled rule("BASTION Proton Cannon ON [Broken in OW2, need to fix]")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Bastion;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Event Player.HeroOfPlayer == Hero(Bastion);
	}

	actions
	{
		Disallow Button(Event Player, Button(Primary Fire));
		Small Message(Event Player, Custom String("{0}PROTON CANNON ENGAGED", Hero Icon String(Hero(Bastion))));
	}
}

disabled rule("BASTION Proton Cannon OFF [Broken in OW2, need to fix]")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Bastion;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == False;
		Event Player.HeroOfPlayer == Hero(Bastion);
	}

	actions
	{
		Allow Button(Event Player, Button(Primary Fire));
		Small Message(Event Player, Custom String("{0}RECHARGING...", Hero Icon String(Hero(Bastion))));
	}
}

disabled rule("BASTION Proton Cannon Damage [Broken in OW2, need to fix]")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Bastion;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Event Player.HeroOfPlayer == Hero(Bastion);
		(Has Status(Event Player, Hacked) || Has Status(Event Player, Frozen) || Has Status(Event Player, Knocked Down) || Has Status(
			Event Player, Stunned) || Has Status(Event Player, Asleep)) == False;
	}

	actions
	{
		Event Player.U = Ray Cast Hit Position(Eye Position(Event Player), 100 * Facing Direction Of(Event Player) + Eye Position(
			Event Player), All Players(Team 2), Event Player, True);
		Play Effect(All Players(All Teams), Bad Explosion, Color(Sky Blue), Event Player.U, 1);
		Play Effect(All Players(All Teams), Ring Explosion Sound, Color(Sky Blue), Event Player.U, 50);
		Damage(Players Within Radius(Event Player.U, 5, Team 2, Surfaces), Event Player, 5 * Global.SuperbotLevel + 5);
		Wait(0.050, Ignore Condition);
		Loop If Condition Is True;
		Event Player.U = Event Player;
	}
}

rule("BRIGITTE Vampire Killer Flail Shot")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Brigitte;
	}

	conditions
	{
		Event Ability == Button(Ability 1);
	}

	actions
	{
		Heal(Event Player, Event Player, 100);
		Damage(Players Within Radius(Victim, 10, Team 2, Off), Event Player, Event Player.DAMAGE / 100 * 5);
		Play Effect(All Players(All Teams), Bad Explosion, Color(Orange), Victim, 1);
		Wait(0.200, Ignore Condition);
		Damage(Players Within Radius(Victim, 10, Team 2, Off), Event Player, Event Player.DAMAGE / 100 * 10);
		Play Effect(All Players(All Teams), Bad Explosion, Color(Orange), Victim, 5);
		Wait(0.200, Ignore Condition);
		Damage(Players Within Radius(Victim, 10, Team 2, Off), Event Player, Event Player.DAMAGE / 100 * 15);
		Play Effect(All Players(All Teams), Bad Explosion, Color(Orange), Victim, 10);
		Wait(0.250, Ignore Condition);
	}
}

rule("BRIGITTE Ultimate Heroic Presence")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Brigitte;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Set Status(Players Within Radius(Event Player, 10, Team 2, Off), Null, Stunned, 7);
		Big Message(Event Player, Custom String("{0} +400% DAMAGE BOOST ENABLED", Ability Icon String(Hero(Brigitte), Button(Ultimate))));
		Wait(10, Ignore Condition);
		Big Message(Event Player, Custom String("{0} +400% DAMAGE BOOST DISABLED", Ability Icon String(Hero(Brigitte), Button(Ultimate))));
	}
}

rule("D.VA Heal to Full when entering Mech")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		D.Va;
	}

	conditions
	{
		Max Health(Event Player) >= 599.900 * (Event Player.HEALTH / 100);
	}

	actions
	{
		Set Status(Event Player, Null, Phased Out, 2);
		Start Heal Over Time(Event Player, Event Player, 1, 10000);
	}
}

rule("D.VA Mech Bunny Hop Activation [Broken in OW2; fixed by Arkhanglesk#11200]")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		D.Va;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Reload)) == True;
		Is In Spawn Room(Event Player) == False;
		Max Health(Event Player) > 499;
		Event Player.T == 100;
		Is Alive(Event Player) == True;
		Is In Air(Event Player) == False;
		(Has Status(Event Player, Hacked) || Has Status(Event Player, Frozen) || Has Status(Event Player, Knocked Down) || Has Status(
			Event Player, Stunned) || Has Status(Event Player, Asleep)) == False;
	}

	actions
	{
		Small Message(Event Player, Custom String(" {0} Bunny Hop Activated!", Hero Icon String(Hero(D.Va))));
		Call Subroutine(DisableButtons);
		Start Camera(Event Player, Facing Direction Of(Event Player) * 0.200 + Ray Cast Hit Position(Eye Position(Event Player),
			Eye Position(Event Player) + World Vector Of(Vector(0, 0.500, -1), Event Player, Rotation) + Facing Direction Of(Event Player)
			* Vector(2, 2, 2) * -1.500, All Players(All Teams), Event Player, False), Eye Position(Event Player) + World Vector Of(Vector(
			0, 0.500, -1), Event Player, Rotation) + Facing Direction Of(Event Player) * 500, 80);
		Stop Chasing Player Variable(Event Player, T);
		Event Player.T = 0;
		Event Player.U = True;
		Wait(7, Ignore Condition);
		Event Player.U = False;
		Call Subroutine(DvaBunnyHopDeactivate);
	}
}

rule("D.VA Mech Bunny Hop Jump [Broken in OW2; fixed by Arkhanglesk#11200]")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		D.Va;
	}

	conditions
	{
		Event Player.U == True;
		disabled Max Health(Event Player) >= 599.900 * (Event Player.HEALTH / 100);
		(Has Status(Event Player, Hacked) || Has Status(Event Player, Frozen) || Has Status(Event Player, Knocked Down) || Has Status(
			Event Player, Stunned) || Has Status(Event Player, Asleep)) == False;
		Is On Ground(Event Player) == True;
	}

	actions
	{
		Damage(Players Within Radius(Event Player, 7, Team 2, Off), Event Player, 300);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Turquoise), Position Of(Event Player), 7);
		Play Effect(All Players(All Teams), Ring Explosion Sound, Color(Turquoise), Event Player, 200);
		Wait(0.100, Ignore Condition);
		Heal(Event Player, Null, Max Health(Event Player) * 0.050);
		Apply Impulse(Event Player, Up, 10, To World, Cancel Contrary Motion);
		Wait(0.400, Ignore Condition);
	}
}

rule("D.VA Mech Bunny Hop Dive [Broken in OW2; fixed by Arkhanglesk#11200]")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		D.Va;
	}

	conditions
	{
		Event Player.U == True;
		disabled Max Health(Event Player) >= 599.900 * (Event Player.HEALTH / 100);
		(Has Status(Event Player, Hacked) || Has Status(Event Player, Frozen) || Has Status(Event Player, Knocked Down) || Has Status(
			Event Player, Stunned) || Has Status(Event Player, Asleep)) == False;
		Is In Air(Event Player) == True;
	}

	actions
	{
		Wait(0.400, Abort When False);
		Apply Impulse(Event Player, Down, 100, To World, Cancel Contrary Motion);
	}
}

rule("D.VA Mech Bunny Hop Deactivation Subroutine [Broken in OW2; fixed by Arkhanglesk#11200]")
{
	event
	{
		Subroutine;
		DvaBunnyHopDeactivate;
	}

	actions
	{
		Start Rule(EnableButtons, Do Nothing);
		Chase Player Variable At Rate(Event Player, T, 100, 2.250, None);
		Stop Camera(Event Player);
	}
}

rule("DOOMFIST Ultimate Super")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Doomfist;
	}

	conditions
	{
		Ultimate Charge Percent(Event Player) == 100;
		Is Button Held(Event Player, Button(Ultimate)) == True;
	}

	actions
	{
		Set Ultimate Charge(Event Player, 0);
		Set Ultimate Ability Enabled(Event Player, False);
		Event Player.R = 1;
		Event Player.RandomEmote = Random Real(1, 4);
		Small Message(Event Player, Custom String(" {0}Doomfist: Powered up!", Hero Icon String(Hero(Doomfist))));
		Play Effect(All Players(All Teams), Good Pickup Effect, Color(White), Event Player, 200);
		If(Event Player.RandomEmote == 1);
			Communicate(Event Player, Voice Line Up);
		Else If(Event Player.RandomEmote == 2);
			Communicate(Event Player, Voice Line Left);
		Else If(Event Player.RandomEmote == 3);
			Communicate(Event Player, Emote Right);
		Else If(Event Player.RandomEmote == 4);
			Communicate(Event Player, Voice Line Down);
		End;
		Wait(0.500, Ignore Condition);
	}
}

rule("DOOMFIST Reset Ult on Death")
{
	event
	{
		Player Died;
		Team 1;
		Doomfist;
	}

	actions
	{
		Event Player.R = 0;
		Set Ultimate Ability Enabled(Event Player, True);
	}
}

rule("DOOMFIST Super 1 - Super Slam (previously \"Uppercut\") [Broken in OW2; fixed by Arkhanglesk#11200]")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Doomfist;
	}

	conditions
	{
		Event Player.R == 1;
		Event Ability == Button(Ability 1);
	}

	actions
	{
		Event Player.R = 0;
		Start Heal Over Time(Event Player, Null, 3, Max Health(Event Player) * 0.085);
		Small Message(Event Player, Custom String(" {0} Super Slam!", Hero Icon String(Hero(Doomfist))));
		Play Effect(All Players(All Teams), Bad Explosion, Color(Orange), Victim, 0.500);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Orange), Victim, 2);
		Play Effect(All Players(All Teams), Explosion Sound, Color(Orange), Victim, 50);
		Start Damage Over Time(Players Within Radius(Event Player, 15, Team 2, Off), Event Player, 5, Max Health(Event Player) * 0.150);
		Set Status(Players Within Radius(Event Player, 15, Team 2, Off), Null, Burning, 5);
		Set Status(Players Within Radius(Event Player, 15, Team 2, Off), Null, Knocked Down, 5);
		Apply Impulse(Players Within Radius(Event Player, 15, Team 2, Off), Direction From Angles(Horizontal Facing Angle Of(Event Player),
			-20), 50, To World, Cancel Contrary Motion);
		Wait(1, Ignore Condition);
		Set Ultimate Ability Enabled(Event Player, True);
	}
}

rule("DOOMFIST Super 2 - Super Punch")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Doomfist;
	}

	conditions
	{
		Event Player.R == 1;
		Event Ability == Button(Secondary Fire);
	}

	actions
	{
		Event Player.R = 0;
		Start Heal Over Time(Event Player, Null, 3, Max Health(Event Player) * 0.085);
		Small Message(Event Player, Custom String(" {0} Super Punch!", Hero Icon String(Hero(Doomfist))));
		Play Effect(All Players(All Teams), Ring Explosion Sound, Color(Orange), Victim, 50);
		Damage(Victim, Event Player, Event Damage * 100);
		Wait(1, Ignore Condition);
		Set Ultimate Ability Enabled(Event Player, True);
	}
}

rule("ECHO Laser [Updated by Arkhanglesk#11200]")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Echo;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == Button(Ability 2);
	}

	actions
	{
		Event Player.U = Ray Cast Hit Position(Eye Position(Event Player), 100 * Facing Direction Of(Event Player) + Eye Position(
			Event Player), All Players(Team 2), Event Player, True);
		Play Effect(All Players(All Teams), Bad Explosion, Color(Sky Blue), Event Player.U, 0.250);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Sky Blue), Event Player.U, 2);
		Damage(Players Within Radius(Event Player.U, 5, Team 2, Off), Event Player, 10 * Global.SuperbotLevel + 7);
		Wait(0.050, Ignore Condition);
		Loop If Condition Is True;
		Small Message(Event Player, Custom String(" {0} QUANTUM BEAM RECHARGING", Hero Icon String(Hero(Echo))));
	}
}

rule("ECHO Ultimate Overdrive [Updated by Arkhanglesk#11200]")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Echo;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Is Button Held(Event Player, Button(Ultimate)) == True;
		(Has Status(Event Player, Hacked) || Has Status(Event Player, Frozen) || Has Status(Event Player, Knocked Down) || Has Status(
			Event Player, Stunned) || Has Status(Event Player, Asleep)) == False;
	}

	actions
	{
		Small Message(Event Player, Custom String(" {0} SYSTEMS IN OVERDRIVE", Hero Icon String(Hero(Echo))));
		Create Effect(All Players(Team 1), Ana Nano Boosted Effect, Color(Team 1), Event Player, 1, Visible To);
		Event Player.ID_Array[0] = Last Created Entity;
		Create Effect(All Players(Team 1), Ana Nano Boosted Effect, Color(Team 1), Event Player, 100, Visible To);
		Event Player.ID_Array[1] = Last Created Entity;
		Communicate(Event Player, Voice Line Up);
		Wait(0.150, Ignore Condition);
		Set Projectile Speed(Event Player, 500);
		Set Ultimate Charge(Event Player, 0);
		Set Ability Cooldown(Event Player, Button(Secondary Fire), 0);
		Event Player.Flight = True;
		Wait(0.150, Ignore Condition);
		Set Move Speed(Event Player, Event Player.MOVEMENT + 200);
		"Enable Sticky Bomb auto fire [Added/Disabled by Arkhanglesk#11200; not very fun, needs rework]"
		disabled Event Player.FullAutoFire = True;
		Wait(10, Ignore Condition);
		"Disable Sticky Bomb auto fire [Added/Disabled by Arkhanglesk#11200; not very fun, needs rework]"
		disabled Event Player.FullAutoFire = False;
		Small Message(Event Player, Custom String(" {0} Flying Off", Hero Icon String(Hero(Echo))));
		Wait(0.100, Ignore Condition);
		Small Message(Event Player, Custom String(" {0} OVERDRIVE RECHARGING", Hero Icon String(Hero(Echo))));
		Set Ability Cooldown(Event Player, Button(Secondary Fire), 2);
		Set Projectile Speed(Event Player, 100);
		Event Player.Flight = False;
		Set Move Speed(Event Player, Event Player.MOVEMENT);
		Destroy Effect(Event Player.ID_Array[0]);
		Destroy Effect(Event Player.ID_Array[1]);
	}
}

disabled rule("ECHO Auto Fire Secondary [Broken in OW2 (workshop rate-of-fire changes); fixed by Arkhanglesk#11200. Works, but not very fun.]")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Echo;
	}

	conditions
	{
		disabled Event Player.FullAutoFire == True;
		(Is Button Held(Event Player, Button(Secondary Fire)) || Is Firing Secondary(Event Player)) == True;
		Is Alive(Event Player) == True;
		(Has Status(Event Player, Hacked) || Has Status(Event Player, Frozen) || Has Status(Event Player, Knocked Down) || Has Status(
			Event Player, Stunned) || Has Status(Event Player, Asleep)) == False;
	}

	actions
	{
		Abort If Condition Is False;
		"Works best/most fun when Sticky Bombs CD=0% and Wait(0.800), but high server cost."
		Wait(2, Ignore Condition);
		Press Button(Event Player, Button(Secondary Fire));
		Loop;
	}
}

rule("GENJI Dragon Strike")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Genji;
	}

	conditions
	{
		Victim.GenjiMarkofDeath == 1;
		Event Ability == Button(Ability 1);
	}

	actions
	{
		Heal(Event Player, Null, 50 * Victim.GenjiMarkofDeathStacks);
		Small Message(Event Player, Custom String("{0} {1} Healed", Icon String(Plus), 50 * Victim.GenjiMarkofDeathStacks));
		Victim.GenjiMarkofDeath = 2;
	}
}

rule("GENJI Mark of Death Application")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Genji;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		(Event Ability == Button(Ability 1)) == False;
	}

	actions
	{
		If(Victim.GenjiMarkofDeath == 0);
			Victim.GenjiMarkofDeath = 1;
		End;
		If(Is Using Ultimate(Event Player) == True);
			Victim.GenjiMarkofDeathStacks += 2;
		Else;
			Victim.GenjiMarkofDeathStacks += 1;
		End;
	}
}

rule("GENJI Mark of Death Explosion")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.GenjiMarkofDeath == 2;
	}

	actions
	{
		Play Effect(All Players(All Teams), Bad Explosion, Color(Lime Green), Event Player, 2);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Lime Green), Event Player, 5);
		Damage(Event Player, Players On Hero(Hero(Genji), Team 1), Max Health(Event Player) * 0.010 * Event Player.GenjiMarkofDeathStacks);
		Wait(0.250, Ignore Condition);
		Event Player.GenjiMarkofDeath = 0;
		Event Player.GenjiMarkofDeathStacks = 0;
	}
}

rule("GENJI Bot Died While Marked")
{
	event
	{
		Player Died;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.GenjiMarkofDeath == 1;
	}

	actions
	{
		Heal(Players On Hero(Hero(Genji), Team 1), Null, 50 * Event Player.GenjiMarkofDeathStacks / 2);
		Event Player.GenjiMarkofDeath = 0;
		Event Player.GenjiMarkofDeathStacks = 0;
	}
}

rule("HANZO Elemental Arrow Swap")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Hanzo;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Event Player.R = !Event Player.R;
		If(Event Player.R == False);
			Event Player.HUDTextHidden = Array(False, True, False, True);
			Small Message(Event Player, Custom String(" {0} Fire Arrows Equipped", Icon String(Fire)));
		Else If(Event Player.R == True);
			Event Player.HUDTextHidden = Array(True, False, False, True);
			Small Message(Event Player, Custom String(" {0} Frost Arrows Equipped", Ability Icon String(Hero(Mei), Button(Ultimate))));
		End;
		Play Effect(Event Player, Buff Explosion Sound, Color(White), Event Player, 50);
		Wait(1, Ignore Condition);
	}
}

rule("HANZO Elemental Dragon Arrows")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Hanzo;
	}

	conditions
	{
		(Event Ability == Button(Primary Fire) || Event Ability == Button(Ability 1) || Event Ability == Button(Ability 2)
			|| Event Ability == Button(Ultimate)) == True;
	}

	actions
	{
		If(Event Ability == Button(Ability 1));
			If(Event Player.R == False);
				Play Effect(All Players(All Teams), Ring Explosion, Color(Orange), Victim, 20);
				Play Effect(All Players(All Teams), Explosion Sound, Color(White), Victim, 200);
				Set Status(Players Within Radius(Victim, 10, Team 2, Off), Event Player, Burning, 3);
				Start Damage Over Time(Players Within Radius(Victim, 10, Team 2, Off), Event Player, 3, Max Health(Victim) * 0.200);
			Else If(Event Player.R == True);
				Play Effect(All Players(All Teams), Ring Explosion, Color(Sky Blue), Victim, 20);
				Play Effect(All Players(All Teams), Explosion Sound, Color(White), Position Of(Victim), 200);
				Set Status(Players Within Radius(Victim, 10, Team 2, Off), Event Player, Frozen, 4);
			End;
		Else;
			If(Event Player.R == False);
				Set Status(Victim, Event Player, Burning, 3);
				Start Damage Over Time(Victim, Event Player, 3, Max Health(Victim) * 0.050);
			Else If(Event Player.R == True);
				Set Status(Victim, Event Player, Frozen, 1.500);
			End;
		End;
		Wait(0.100, Ignore Condition);
	}
}

rule("ILLARI Solar Flare [Added by Arkhanglesk#11200]")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Illari;
	}

	conditions
	{
		Event Ability == Button(Ability 1);
	}

	actions
	{
		Set Status(Victim, Null, Burning, 3);
		disabled Start Damage Over Time(Victim, Event Player, 3, Max Health(Victim) * 0.100);
		Start Damage Over Time(Victim, Event Player, 3, 5);
		Start Heal Over Time(Event Player, Null, 4, Max Health(Event Player) * 0.100);
	}
}

rule("ILLARI Heat Blast [Added by Arkhanglesk#11200]")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Illari;
	}

	conditions
	{
		Event Was Critical Hit == True;
	}

	actions
	{
		Set Status(Victim, Event Player, Burning, 2);
		Start Damage Over Time(Victim, Event Player, 2, 5);
		Wait(1, Ignore Condition);
	}
}

rule("ILLARI Ultimate BFG 9000 [Added by Arkhanglesk#11200]")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Illari;
	}

	conditions
	{
		disabled Event Ability == Button(Ultimate);
		Is Alive(Event Player) == True;
		Is Using Ultimate(Event Player) == True;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		(Has Status(Event Player, Hacked) || Has Status(Event Player, Frozen) || Has Status(Event Player, Rooted) || Has Status(
			Event Player, Knocked Down) || Has Status(Event Player, Stunned) || Has Status(Event Player, Asleep)) == False;
	}

	actions
	{
		Damage(Victim, Event Player, 65);
		Set Status(Victim, Null, Burning, 5);
		Start Damage Over Time(Victim, Event Player, 5, 1);
		Wait(5, Ignore Condition);
		Stop All Damage Over Time(Victim);
		Set Ultimate Ability Enabled(Event Player, True);
	}
}

disabled rule("ILLARI Ultimate Scorched Earth [Added by Arkhanglesk#11200; work in progress]")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Illari;
	}

	conditions
	{
		disabled Event Ability == Button(Ultimate);
		Is Alive(Event Player) == True;
		Is Using Ultimate(Event Player) == True;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		(Has Status(Event Player, Hacked) || Has Status(Event Player, Frozen) || Has Status(Event Player, Rooted) || Has Status(
			Event Player, Knocked Down) || Has Status(Event Player, Stunned) || Has Status(Event Player, Asleep)) == False;
	}

	actions
	{
		Event Player.U = Ray Cast Hit Position(Eye Position(Event Player), 50 * Facing Direction Of(Event Player) + Eye Position(
			Event Player), All Players(Team 2), Event Player, False);
		disabled Wait(0.050, Ignore Condition);
		disabled Play Effect(All Players(All Teams), Good Pickup Effect, Color(Red), Event Player.U, 10);
		disabled Play Effect(All Players(All Teams), Buff Explosion Sound, Color(Red), Event Player, 100);
		disabled Wait(3, Ignore Condition);
	}
}

rule("JUNKER QUEEN Shout Swap [Added by Arkhanglesk#11200]")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Junker Queen;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Reload)) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Event Player.R = !Event Player.R;
		If(Event Player.R == False);
			Event Player.HUDTextHidden = Array(False, True, False, True);
			Small Message(Event Player, Custom String(" {0} Shout: Knockdown", Ability Icon String(Hero(LÃºcio), Button(Secondary Fire))));
		Else If(Event Player.R == True);
			Event Player.HUDTextHidden = Array(True, False, False, True);
			Small Message(Event Player, Custom String(" {0} Shout: Stun", Ability Icon String(Hero(Junker Queen), Button(Ability 1))));
		End;
		Play Effect(Event Player, Buff Explosion Sound, Color(White), Event Player, 50);
		Wait(1, Ignore Condition);
	}
}

rule("JUNKER QUEEN Shout Effects [Added by Arkhanglesk#11200]")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Ability Cooldown(Players On Hero(Hero(Junker Queen), Team 1), Button(Ability 1)) == 0;
		(Is Button Held(Players On Hero(Hero(Junker Queen), Team 1), Button(Ability 1)) == True) == True;
		Distance Between(Event Player, Position Of(Players On Hero(Hero(Junker Queen), Team 1))) <= 8;
	}

	actions
	{
		Disallow Button(Players On Hero(Hero(Junker Queen), Team 1), Button(Ability 1));
		If(Players On Hero(Hero(Junker Queen), Team 1).R == False);
			Apply Impulse(Players Within Radius(Players On Hero(Hero(Junker Queen), Team 2), 8, Team 2, Off), Direction From Angles(
				Horizontal Angle From Direction(Direction Towards(Event Player, Players Within Radius(Event Player, 8, Team 2, Off))), -15),
				15, To Player, Cancel Contrary Motion);
			Set Status(Players Within Radius(Event Player, 8, Team 2, Off), Event Player, Knocked Down, 2);
		Else If(Players On Hero(Hero(Junker Queen), Team 1).R == True);
			Set Status(Players Within Radius(Players On Hero(Hero(Junker Queen), Team 1), 8, Team 2, Off), Event Player, Stunned, 3);
		End;
		Wait(10, Ignore Condition);
		Allow Button(Players On Hero(Hero(Junker Queen), Team 1), Button(Ability 1));
	}
}

rule("JUNKER QUEEN Ultimate Charge [Added by Arkhanglesk#11200]")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		(Is Using Ultimate(Players On Hero(Hero(Junker Queen), Team 1)) == True) == True;
		Distance Between(Event Player, Position Of(Players On Hero(Hero(Junker Queen), Team 1))) <= 3;
	}

	actions
	{
		Damage(Players Within Radius(Event Player, 3, Team 2, Off), Players On Hero(Hero(Junker Queen), Team 1), 120);
	}
}

rule("JUNKRAT Invincible Tire ON")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Junkrat;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Set Move Speed(Event Player, 125);
	}
}

rule("JUNKRAT Invincible Tire OFF")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Junkrat;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == False;
	}

	actions
	{
		Set Move Speed(Event Player, Event Player.MOVEMENT);
	}
}

rule("JUNKRAT Total Mayhem")
{
	event
	{
		Player Died;
		Team 1;
		Junkrat;
	}

	actions
	{
		Teleport(Players Within Radius(Event Player, 5, Team 2, Off), Position Of(Event Player));
		Set Status(Players Within Radius(Event Player, 10, Team 2, Surfaces), Event Player, Rooted, 3);
		Wait(5, Ignore Condition);
	}
}

rule("JUNKRAT Chaos Roulette Activation")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Junkrat;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Is In Spawn Room(Event Player) == False;
		Is Using Ultimate(Event Player) == False;
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Button Held(Event Player, Button(Crouch)) == False;
		Event Player.T >= 1000;
		Event Player.R[0] == 0;
		(Has Status(Event Player, Hacked) || Has Status(Event Player, Frozen) || Has Status(Event Player, Knocked Down) || Has Status(
			Event Player, Stunned) || Has Status(Event Player, Asleep)) == False;
	}

	actions
	{
		If(Current Game Mode == Game Mode(Hybrid) && Objective Index == 0);
			Event Player.R[1] = Random Integer(2, 6);
		Else;
			Event Player.R[1] = Random Integer(1, 6);
		End;
		Wait(0.020, Ignore Condition);
		Loop If(Event Player.R[1] == Event Player.R[2]);
		Start Forcing Player To Be Hero(Event Player, Hero(Junkrat));
		Event Player.R[2] = Event Player.R[1];
		Event Player.R[0] = Event Player.R[1];
		Event Player.T -= 1000;
		Play Effect(Event Player, Buff Explosion Sound, Color(White), Event Player, 200);
		Small Message(Event Player, Custom String("-$1,000"));
		If(Is Hero Being Played(Hero(Roadhog), Team 1) == True);
			Players On Hero(Hero(Roadhog), Team 1).S = 1;
		End;
		Wait(10, Ignore Condition);
		If(Is Hero Being Played(Hero(Roadhog), Team 1) == True);
			Players On Hero(Hero(Roadhog), Team 1).S = 2;
		End;
		Event Player.R[0] = 0;
		Stop Forcing Player To Be Hero(Event Player);
		Small Message(Event Player, Custom String("{0}Chaos Roulette Ready", Icon String(Happy)));
	}
}

rule("JUNKRAT Chaos Roulette - Death 1 [TO DO: Bugged in OW2, only kills bots]")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Junkrat;
	}

	conditions
	{
		Event Player.R[0] == 1;
		Event Player.HeroOfPlayer == Hero(Junkrat);
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String("{0}MINE, MINE, MINE, THIS IS MY POINT!", Hero Icon String(Hero(Junkrat))));
		Small Message(All Players(All Teams), Custom String(" {0} KILLING ALL PLAYERS ON THE OBJECTIVE IN 5", Icon String(No)));
		Wait(1, Ignore Condition);
		Small Message(All Players(All Teams), Custom String(" {0} KILLING ALL PLAYERS ON THE OBJECTIVE IN 4", Icon String(No)));
		Wait(1, Ignore Condition);
		Small Message(All Players(All Teams), Custom String(" {0} KILLING ALL PLAYERS ON THE OBJECTIVE IN 3", Icon String(No)));
		Wait(1, Ignore Condition);
		Small Message(All Players(All Teams), Custom String(" {0} KILLING ALL PLAYERS ON THE OBJECTIVE IN 2", Icon String(No)));
		Wait(1, Ignore Condition);
		Small Message(All Players(All Teams), Custom String(" {0} KILLING ALL PLAYERS ON THE OBJECTIVE IN 1", Icon String(No)));
		Wait(1, Ignore Condition);
		If(Current Game Mode == Game Mode(Escort) || Payload Progress Percentage > 0);
			Play Effect(All Players(All Teams), Ring Explosion, Color(Orange), Payload Position, 50);
			Play Effect(All Players(All Teams), Bad Explosion, Color(Orange), Payload Position, 30);
			Play Effect(All Players(All Teams), Explosion Sound, Color(Orange), Payload Position, 200);
			Kill(Players Within Radius(Payload Position, 10, All Teams, Off), Event Player);
		Else;
			Play Effect(All Players(All Teams), Ring Explosion, Color(Orange), Objective Position(Objective Index), 50);
			Play Effect(All Players(All Teams), Bad Explosion, Color(Orange), Objective Position(Objective Index), 30);
			Play Effect(All Players(All Teams), Explosion Sound, Color(Orange), Objective Position(Objective Index), 200);
			Kill(Players Within Radius(Objective Position(Objective Index), 10, All Teams, Off), Event Player);
		End;
		Event Player.R[0] = 10;
	}
}

rule("JUNKRAT Chaos Roulette - Burning 2")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Junkrat;
	}

	conditions
	{
		Event Player.R[0] == 2;
		Event Player.HeroOfPlayer == Hero(Junkrat);
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String("{0}BURN BOTS! BURN!", Hero Icon String(Hero(Junkrat))));
		Set Status(All Living Players(Team 2), Event Player, Burning, 10);
		Start Damage Over Time(All Living Players(Team 2), Event Player, 10, 500);
	}
}

rule("JUNKRAT Chaos Roulette - Knockdown 3")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Junkrat;
	}

	conditions
	{
		Event Player.R[0] == 3;
		Event Player.HeroOfPlayer == Hero(Junkrat);
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String("{0}HOW'S THE FLOOR TASTE DOWN THERE?", Hero Icon String(Hero(Junkrat))));
		Set Status(All Living Players(Team 2), Event Player, Knocked Down, 7);
	}
}

rule("JUNKRAT Chaos Roulette - Sky High 4")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Junkrat;
	}

	conditions
	{
		Event Player.R[0] == 4;
		Event Player.HeroOfPlayer == Hero(Junkrat);
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String("{0}SKY HIGH!", Hero Icon String(Hero(Junkrat))));
		Set Gravity(All Living Players(Team 2), 0);
		Apply Impulse(All Living Players(Team 2), Vector(0, 50, 0), 50, To World, Cancel Contrary Motion);
		Wait(4, Ignore Condition);
		Set Gravity(All Players(Team 2), 100);
	}
}

rule("JUNKRAT Chaos Roulette - Protection 5")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Junkrat;
	}

	conditions
	{
		Event Player.R[0] == 5;
		Event Player.HeroOfPlayer == Hero(Junkrat);
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String("{0}ââââââââBA", Hero Icon String(Hero(Junkrat))));
		Small Message(All Players(Team 1), Custom String("{0}Junkrat is Protecting You for 10 seconds!", Hero Icon String(Hero(Junkrat))));
		Play Effect(All Players(All Teams), Good Pickup Effect, Color(Yellow), All Dead Players(Team 1), 1);
		Set Status(All Players(Team 1), Null, Phased Out, 10);
		Wait(10, Ignore Condition);
		Small Message(All Players(Team 1), Custom String("{0}Junkrat's Protection Ended", Hero Icon String(Hero(Junkrat))));
	}
}

rule("JUNKRAT Chaos Roulette - Kill Pile 6")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Junkrat;
	}

	conditions
	{
		Event Player.R[0] == 6;
		Event Player.HeroOfPlayer == Hero(Junkrat);
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String("{0}HA!~HA!~HA!~HA!--WAIT OH SH--", Hero Icon String(Hero(Junkrat))));
		If(Current Game Mode == Game Mode(Escort) || Payload Progress Percentage > 0);
			Teleport(Event Player, Payload Position + Vector(0, 1, 0));
			Teleport(All Living Players(Team 2), Payload Position + Vector(0, 1, 0));
		Else;
			Teleport(Event Player, Objective Position(Objective Index));
			Teleport(All Living Players(Team 2), Objective Position(Objective Index));
		End;
		Set Status(All Living Players(Team 2), Event Player, Rooted, 3);
		Wait(1, Ignore Condition);
		Start Damage Over Time(Event Player, Event Player, 1, 10000);
		Play Effect(All Players(All Teams), Bad Explosion, Color(Orange), Event Player, 3);
		Damage(Players Within Radius(Event Player, 5, Team 2, Off), Event Player, 100);
		Wait(0.250, Ignore Condition);
		Play Effect(All Players(All Teams), Bad Explosion, Color(Orange), Event Player, 3);
		Damage(Players Within Radius(Event Player, 5, Team 2, Off), Event Player, 100);
		Wait(0.250, Ignore Condition);
		Play Effect(All Players(All Teams), Bad Explosion, Color(Orange), Event Player, 3);
		Damage(Players Within Radius(Event Player, 5, Team 2, Off), Event Player, 100);
	}
}

rule("JUNKRAT Elimination Money Script [Broken in OW2; updated by Arkhanglesk#11200]")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Junkrat;
	}

	conditions
	{
		Event Player.JunkElimCounter > 0;
	}

	actions
	{
		Event Player.U += Round To Integer(Random Real(50, 100), To Nearest);
		Event Player.JunkElimCounter -= 1;
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
		Small Message(Event Player, Custom String("{0} +${1}", Icon String(Happy), Event Player.U));
		Event Player.T += Event Player.U;
		Wait(0.050, Ignore Condition);
		Event Player.U = 0;
		Loop If Condition Is True;
	}
}

rule("KIRIKO Primary Switch [Added by Arkhanglesk#11200]")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Kiriko;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Reload)) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Event Player.R = !Event Player.R;
		If(Event Player.R == False);
			Event Player.HUDTextHidden = Array(False, True, False, True);
			Small Message(Event Player, Custom String(" {0} Attack: Direct Damage", Ability Icon String(Hero(Kiriko), Button(Primary Fire))));
		Else If(Event Player.R == True);
			Event Player.HUDTextHidden = Array(True, False, False, True);
			Small Message(Event Player, Custom String(" {0} Attack: Bleed", Ability Icon String(Hero(Junker Queen), Button(Ability 2))));
		End;
		Play Effect(Event Player, Buff Explosion Sound, Color(White), Event Player, 50);
		Wait(1, Ignore Condition);
	}
}

rule("KIRIKO Primary Attack [Added by Arkhanglesk#11200]")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Kiriko;
	}

	conditions
	{
		Is Firing Primary(Event Player) == True;
		Players Within Radius(Event Player, 40, Team 2, Surfaces And All Barriers) == True;
	}

	actions
	{
		If(Event Player.R == False);
			Abort If Condition Is False;
			Wait(Random Real(0.100, 0.250), Ignore Condition);
			Damage(Player Closest To Reticle(Event Player, Team 2), Event Player, 10);
			Loop;
		Else If(Event Player.R == True);
			Damage(Player Closest To Reticle(Event Player, Team 2), Event Player, 1);
			Start Damage Over Time(Player Closest To Reticle(Event Player, Team 2), Event Player, 2, 35);
		End;
	}
}

disabled rule("KIRIKO Secondary [Added by Arkhanglesk#11200, work in progress]")
{
	event
	{
		Ongoing - Global;
	}
}

rule("KIRIKO Ultimate [Added by Arkhanglesk#11200]")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Kiriko;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Is Using Ultimate(Event Player) == True;
		(Has Status(Event Player, Hacked) || Has Status(Event Player, Frozen) || Has Status(Event Player, Knocked Down) || Has Status(
			Event Player, Stunned) || Has Status(Event Player, Asleep)) == False;
	}

	actions
	{
		Wait(0.100, Ignore Condition);
		Event Player.DamageMOD = Filtered Array(Players in View Angle(Event Player, Team 2, 65), Is In Line of Sight(Event Player,
			Current Array Element, Barriers Do Not Block LOS) == True && Distance Between(Event Player, Current Array Element) < 30);
		If(Distance Between(Event Player, Event Player.DamageMOD) < 30);
			"Like Sigma's melee"
			Apply Impulse(Event Player.DamageMOD, Direction From Angles(Horizontal Facing Angle Of(Event Player), -20), 0.400 * Event Player.T,
				To Player, Cancel Contrary Motion);
			"Like Sym's mine"
			disabled Apply Impulse(Players Within Radius(Event Player.U, 7, Team 2, Off), Direction From Angles(Horizontal Angle From Direction(
				Direction Towards(Event Player.U, Players Within Radius(Event Player.U, 7, Team 2, Off))), -15), 15, To World,
				Cancel Contrary Motion);
			"Like Mauga's charge"
			disabled Apply Impulse(Players Within Radius(Event Player, 2, Team 2, Off), Direction From Angles(Horizontal Angle From Direction(
				Direction Towards(Event Player, Players Within Radius(Event Player, 2, Team 2, Off))), -15), 15, To World,
				Cancel Contrary Motion);
			Damage(Event Player.DamageMOD, Event Player, Max Health(Event Player) / 6);
			Set Status(Event Player.DamageMOD, Event Player, Knocked Down, 2.500);
		End;
	}
}

rule("LUCIO Tinnitus Heal")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		LÃºcio;
	}

	conditions
	{
		Is Firing Secondary(Event Player) == True;
	}

	actions
	{
		Play Effect(All Players(All Teams), Ring Explosion, Color(Green), Position Of(Event Player), 10);
		Heal(Players Within Radius(Event Player, 10, Team 1, Off), Event Player, Speed Of(Event Player) * 10);
		Small Message(Event Player, Custom String(" {0} {1} Healed", Ability Icon String(Hero(LÃºcio), Button(Secondary Fire)),
			Event Player.RelicEquipped == 0 ? Round To Integer(Speed Of(Event Player) * 10 * 2, To Nearest) : Round To Integer(Speed Of(
			Event Player) * 10, To Nearest)));
		Wait(0.250, Ignore Condition);
	}
}

rule("LUCIO Tinnitus Boop")
{
	event
	{
		Player Dealt Knockback;
		Team 1;
		LÃºcio;
	}

	conditions
	{
		Event Ability == Button(Secondary Fire);
	}

	actions
	{
		Apply Impulse(Victim, Event Direction, Speed Of(Event Player) * 2, To World, Cancel Contrary Motion);
	}
}

rule("LUCIO Ultimate Epic Bass Drop")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		LÃºcio;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Is Using Ultimate(Event Player) == True;
		Max Health(Event Player) > Event Player.LEVEL * 25 / 100 * 200 + 200;
	}

	actions
	{
		Event Player.DAMAGE += Number Of Dead Players(Team 1) * 10;
		Small Message(Event Player, Custom String("{0} RESURRECTED {1} ALLIES: +{2}% DMG", Ability Icon String(Hero(LÃºcio), Button(
			Ultimate)), Number Of Dead Players(Team 1), Number Of Dead Players(Team 1) * 10));
		Small Message(All Dead Players(Team 1), Custom String("{0} RESURRECTED YOU!", Hero Icon String(Hero(LÃºcio))));
		Wait(0.020, Ignore Condition);
		Teleport(All Dead Players(Team 1), Position Of(Event Player));
		Resurrect(All Dead Players(Team 1));
		Play Effect(All Players(All Teams), Good Pickup Effect, Color(Green), All Dead Players(Team 1), 1);
		Play Effect(All Players(All Teams), Buff Explosion Sound, Color(Green), Event Player, 200);
	}
}

rule("MAUGA Charge [Added by Arkhanglesk#11200]")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Ability Cooldown(Players On Hero(Hero(Mauga), Team 1), Button(Ability 1)) == 0;
		(Is Using Ability 1(Players On Hero(Hero(Mauga), Team 1)) == True) == True;
		Distance Between(Event Player, Position Of(Players On Hero(Hero(Mauga), Team 1))) <= 3;
	}

	actions
	{
		Apply Impulse(Players Within Radius(Event Player, 2, Team 2, Off), Direction From Angles(Horizontal Angle From Direction(
			Direction Towards(Event Player, Players Within Radius(Event Player, 2, Team 2, Off))), -15), 15, To World,
			Cancel Contrary Motion);
		Damage(Players Within Radius(Event Player, 2, Team 2, Off), Players On Hero(Hero(Mauga), Team 1), 50);
		Set Status(Players Within Radius(Event Player, 2, Team 2, Off), Event Player, Knocked Down, 2);
	}
}

rule("MCCREE Phasing Roll")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Cassidy;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		"Changed Roll CD to 3 secs. When Roll CD=0%, spamming this has caused workshop overload/server crashes."
		Set Status(Event Player, Null, Phased Out, 1);
		Heal(Event Player, Null, Max Health(Event Player) * 0.050);
		Wait(0.250, Ignore Condition);
	}
}

rule("MCCREE Hat Trick Launch")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Cassidy;
	}

	conditions
	{
		Event Ability == Button(Ability 2);
	}

	actions
	{
		Apply Impulse(Victim, Up, 10, To World, Cancel Contrary Motion);
	}
}

rule("MCCREE Hat Trick Damage")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Cassidy;
	}

	conditions
	{
		Is In Air(Victim) == True;
	}

	actions
	{
		Apply Impulse(Victim, Up, 7, To World, Cancel Contrary Motion);
		Play Effect(All Players(All Teams), Good Explosion, Color(Blue), Victim, 1);
		Play Effect(Event Player, Buff Impact Sound, Color(Blue), Event Player, 1);
		Small Message(Event Player, Custom String(" {0}{1} Hat Trick Damage", Hero Icon String(Hero Of(Victim)), Round To Integer(
			Event Damage, To Nearest)));
		Wait(0.050, Ignore Condition);
	}
}

rule("MCCREE Ultimate Hat Trick Launch")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Cassidy;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Wait(Random Real(2, 5), Ignore Condition);
		Small Message(Event Player, Custom String(" DRAW!"));
		Apply Impulse(Filtered Array(All Players(Team 2), Is In Line of Sight(Eye Position(Event Player), Current Array Element,
			Barriers Do Not Block LOS) == True), Up, 15, To World, Cancel Contrary Motion);
		Wait(3, Ignore Condition);
	}
}

rule("MEI Brain Freeze")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Mei;
	}

	conditions
	{
		Event Was Critical Hit == True;
	}

	actions
	{
		Set Status(Victim, Event Player, Frozen, 4);
		Damage(Victim, Event Player, Max Health(Event Player) * 0.250);
		Wait(0.700, Ignore Condition);
	}
}

rule("MEI Frostburn")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Has Status(Event Player, Frozen) == True;
		Is Hero Being Played(Hero(Mei), Team 1) == True;
	}

	actions
	{
		Start Damage Over Time(Event Player, Players On Hero(Hero(Mei), Team 1), 5, Max Health(Event Player) * 0.050);
		Wait(1, Ignore Condition);
	}
}

rule("MEI Cryo-Freeze Explosion ON")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Mei;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Event Player.R = 1;
		Wait(0.250, Ignore Condition);
	}
}

rule("MEI Cryo-Freeze Explosion OFF")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Mei;
	}

	conditions
	{
		Event Player.R == 1;
		Is Using Ability 1(Event Player) == False;
	}

	actions
	{
		Damage(Players Within Radius(Event Player, 5, Team 2, Off), Event Player, 50);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Sky Blue), Position Of(Event Player), 10);
		Set Status(Players Within Radius(Event Player, 5, Team 2, Off), Event Player, Frozen, 4);
		Wait(0.250, Ignore Condition);
		Event Player.R = 0;
	}
}

rule("MERCY Healing ON")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Is True For Any(Players On Hero(Hero(Mercy), Team 1), Is Alive(Current Array Element) == True && Distance Between(Position Of(
			Event Player), Position Of(Current Array Element)) < 15) == True;
	}

	actions
	{
		If(Team Of(Event Player) == Team 1);
			Start Heal Over Time(Event Player, Players On Hero(Hero(Mercy), Team 1), 9999, Max Health(Event Player) * 0.070);
			Event Player.MercyHoT = Last Heal Over Time ID;
		Else If(Team Of(Event Player) == Team 2 && Is Using Ultimate(Players On Hero(Hero(Mercy), Team 1)) == True);
			Start Damage Over Time(Event Player, Players On Hero(Hero(Mercy), Team 1), 60, 100);
			Event Player.MercyDoT = Last Damage Over Time ID;
		End;
	}
}

rule("MERCY Healing OFF")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is True For Any(Players On Hero(Hero(Mercy), Team 1), Is Dead(Current Array Element) == True || Distance Between(Position Of(
			Event Player), Position Of(Current Array Element)) > 15) == True;
	}

	actions
	{
		If(Team Of(Event Player) == Team 1);
			Stop Heal Over Time(Event Player.MercyHoT);
		Else If(Team Of(Event Player) == Team 2);
			Stop Damage Over Time(Event Player.MercyDoT);
		End;
	}
}

rule("MERCY Charm Punch [Idea by Saya]")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Mercy;
	}

	conditions
	{
		Is Alive(Victim) == True;
		Event Ability == Button(Melee);
	}

	actions
	{
		Victim.MercyCharm = 1;
		Play Effect(All Players(All Teams), Buff Explosion Sound, Color(White), Event Player, 100);
		Communicate(Event Player, Voice Line Up);
		Wait(5.100, Ignore Condition);
	}
}

rule("MERCY Charm Debuff")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.MercyCharm == 1;
	}

	actions
	{
		Set Status(Event Player, Players On Hero(Hero(Mercy), Team 1), Stunned, 5);
		Wait(5, Abort When False);
		Event Player.MercyCharm = 0;
	}
}

rule("MERCY Charmed Target Died")
{
	event
	{
		Player Died;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.MercyCharm == 1;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		Event Player.MercyCharm = 0;
		Players On Hero(Hero(Mercy), Team 1).DAMAGE += 10;
		Small Message(Players On Hero(Hero(Mercy), Team 1), Custom String("{0} +10% Damage", Icon String(Heart)));
	}
}

rule("MERCY Resurrect Damage Bonus")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Mercy;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Wait(1.740, Abort When False);
		Event Player.DAMAGE += 10;
		Small Message(Event Player, Custom String("{0} +10% Damage", Hero Icon String(Hero(Mercy))));
	}
}

rule("MOIRA Lethargic Drain")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Moira;
	}

	conditions
	{
		Event Ability == Button(Secondary Fire);
	}

	actions
	{
		Set Status(Victim, Event Player, Rooted, 1);
		Damage(Victim, Event Player, Event Player.DAMAGE / 100 * 5);
		Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Purple), Victim, 2);
		Wait(0.250, Ignore Condition);
	}
}

rule("MOIRA Ultimate Coalescence Bomb Activation [Broken in OW2; fixed and updated T chase rate by Arkhanglesk#11200]")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Moira;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Skip If(Is In Spawn Room(Event Player), 1);
		Small Message(Event Player, Custom String("{0} I must remain within line of sight of the source.", Hero Icon String(Hero(Moira))));
		Set Status(Event Player, Null, Phased Out, 10);
		Event Player.T = 0;
		Event Player.U = Ray Cast Hit Position(Eye Position(Event Player), 30 * Facing Direction Of(Event Player) + Eye Position(
			Event Player), All Players(Team 2), Event Player, False) - 3 * Facing Direction Of(Event Player);
		Wait(0.100, Ignore Condition);
		Start Facing(Event Player, Vector Towards(Event Player, Event Player.U + Vector(0, -1.400, 0)), 1000, To World,
			Direction and Turn Rate);
		"Reworked to save server resources. See Moira HUD for more details."
		Chase Player Variable At Rate(Event Player, T, 100, 10, Destination and Rate);
		Event Player.R = 1;
		Event Player.Flight = True;
	}
}

rule("MOIRA Ultimate Coalescence Bomb Deactivation [Updated by Arkhanglesk#11200]")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Moira;
	}

	conditions
	{
		Event Player.R == 2;
		Event Player.HeroOfPlayer == Hero Of(Event Player);
	}

	actions
	{
		Event Player.Flight = False;
		Stop Chasing Player Variable(Event Player, T);
		If(Is Alive(Event Player) == True);
			Set Status(Event Player, Null, Hacked, 0.200);
			Communicate(Event Player, Voice Line Up);
			If(Event Player.T <= 15);
				Set Ultimate Charge(Event Player, 100);
			Else;
				Call Subroutine(MoiraExplosion);
				Wait(0.250, Ignore Condition);
				Call Subroutine(MoiraExplosion);
				Wait(0.250, Ignore Condition);
				Call Subroutine(MoiraExplosion);
			End;
		End;
		Wait(0.550, Ignore Condition);
		Event Player.U = Vector(0, -500, 0);
		Event Player.R = 0;
		Event Player.T = 0;
		Stop Facing(Event Player);
		Stop Camera(Event Player);
		Allow Button(Event Player, Button(Ultimate));
		Set Status(Event Player, Null, Phased Out, 0.500);
	}
}

rule("MOIRA Ultimate Coalescence Bomb Healing and Damage LOOP")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Moira;
	}

	conditions
	{
		Event Player.R == 1;
		Event Player.T >= 1;
	}

	actions
	{
		While(Event Player.R == 1);
			Heal(Players Within Radius(Event Player.U, Event Player.T / 4, Team 1, Off), Event Player, 150);
			Damage(Players Within Radius(Event Player.U, Event Player.T / 4, Team 2, Off), Event Player, 10);
			Play Effect(All Players(All Teams), Ring Explosion Sound, Color(White), Event Player, 200);
			Play Effect(All Players(All Teams), Ring Explosion, Color(Purple), Event Player.U, 20);
			Play Effect(All Players(All Teams), Ring Explosion, Color(Yellow), Event Player.U, 19);
			Wait(1, Ignore Condition);
		End;
	}
}

rule("MOIRA Ultimate Coalescence Bomb Explosion at 100 [Updated by Arkhanglesk#11200]")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Moira;
	}

	conditions
	{
		Event Player.R == 1;
		Event Player.T == 100;
	}

	actions
	{
		Event Player.R = 2;
		Small Message(Event Player, Custom String("{0} My will made real.", Hero Icon String(Hero(Moira))));
		Wait(1, Ignore Condition);
		Set Status(Event Player, Null, Phased Out, 0.500);
	}
}

rule("MOIRA Ultimate Coalescence Bomb OFF on Death [Updated by Arkhanglesk#11200]")
{
	event
	{
		Player Died;
		Team 1;
		Moira;
	}

	conditions
	{
		Event Player.R == 1;
		Event Player.T <= 99;
	}

	actions
	{
		Event Player.R = 2;
		Small Message(Event Player, Custom String("{0} Lost... focus...", Hero Icon String(Hero(Moira))));
		Set Status(Event Player, Null, Phased Out, 0.500);
	}
}

rule("MOIRA Ultimate Coalescence Bomb OFF on Line of Sight [Updated by Arkhanglesk#11200]")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Moira;
	}

	conditions
	{
		Event Player.R == 1;
		Is In Line of Sight(Event Player, Event Player.U, Barriers Do Not Block LOS) == False;
	}

	actions
	{
		Event Player.R = 2;
		Small Message(Event Player, Custom String("{0} I lost sight of the source...", Hero Icon String(Hero(Moira))));
		Set Status(Event Player, Null, Phased Out, 0.500);
	}
}

rule("MOIRA Ultimate Coalescence Bomb OFF on Distance [Updated by Arkhanglesk#11200]")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Moira;
	}

	conditions
	{
		Distance Between(Event Player, Event Player.U) > 40;
		Event Player.R == 1;
	}

	actions
	{
		Event Player.R = 2;
		Small Message(Event Player, Custom String("{0} I got too far from the source...", Hero Icon String(Hero(Moira))));
		Set Status(Event Player, Null, Phased Out, 0.500);
	}
}

rule("MOIRA Ultimate Coalescence Bomb OFF on Interruption [Updated by Arkhanglesk#11200]")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Moira;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == False;
		Event Player.R == 1;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		Abort If Condition Is False;
		Event Player.R = 2;
		Small Message(Event Player, Custom String("{0} Lost concentration...", Hero Icon String(Hero(Moira))));
		Set Status(Event Player, Null, Phased Out, 0.500);
	}
}

disabled rule("MOIRA Ultimate Coalescence Bomb OFF on Button Press [Disabled by Arkhanglesk#11200; people kept reporting this as a bug]")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Moira;
	}

	conditions
	{
		Event Player.R == 1;
		Event Player.T > 20;
		Is Button Held(Event Player, Button(Ultimate)) == True;
	}

	actions
	{
		Event Player.R = 2;
	}
}

rule("MOIRA Ultimate Coalescence Bomb OFF in Spawn Room [Updated by Arkhanglesk#11200]")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Moira;
	}

	conditions
	{
		Event Player.R == 1;
		Is In Spawn Room(Event Player) == True;
	}

	actions
	{
		Small Message(Event Player, Custom String("{0} I can't use Coalescence Bomb here.", Hero Icon String(Hero(Moira))));
		Set Status(Event Player, Null, Hacked, 1);
		Set Status(Event Player, Null, Phased Out, 0.500);
		Event Player.R = 2;
	}
}

rule("ORISA Fortify heal [Broken with OW2 rework; fixed by Arkhanglesk#11200]")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Orisa;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Start Heal Over Time(Event Player, Event Player, 5, Max Health(Event Player) * 0.050);
	}
}

rule("ORISA Rocket Punch")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Orisa;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Event Ability == Button(Melee);
	}

	actions
	{
		Set Status(Victim, Null, Knocked Down, 1);
		Apply Impulse(Victim, Facing Direction Of(Event Player), Event Player.T + 50, To World, Cancel Contrary Motion);
		Play Effect(All Players(All Teams), Bad Explosion, Color(Green), Victim, 1);
		Play Effect(All Players(All Teams), Explosion Sound, Color(White), Event Player, 200);
		If(Event Player.T == 100);
			Wait(0.100, Ignore Condition);
			Play Effect(All Players(All Teams), Bad Explosion, Color(Green), Victim, 3);
			Play Effect(All Players(All Teams), Explosion Sound, Color(White), Event Player, 200);
			Wait(0.100, Ignore Condition);
			Play Effect(All Players(All Teams), Bad Explosion, Color(Green), Victim, 7);
			Play Effect(All Players(All Teams), Explosion Sound, Color(White), Event Player, 200);
			Wait(0.100, Ignore Condition);
			Play Effect(All Players(All Teams), Bad Explosion, Color(Green), Victim, 20);
			Play Effect(All Players(All Teams), Explosion Sound, Color(White), Event Player, 200);
			Wait(0.100, Ignore Condition);
			Damage(Victim, Event Player, Event Damage * 10);
			Event Player.T = 0;
		End;
	}
}

rule("ORISA Rocket Punch Ready Message")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Orisa;
	}

	conditions
	{
		Event Player.T == 100;
		Event Player.HeroOfPlayer == Hero(Orisa);
	}

	actions
	{
		Play Effect(Event Player, Explosion Sound, Color(White), Event Player, 100);
		Small Message(Event Player, Custom String("{0} Rocket Punch Full Power!", Icon String(Stop)));
		Wait(0.250, Ignore Condition);
	}
}

rule("PHARAH Fusion Reactor Bunker Buster")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Pharah;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Is Using Ability 2(Event Player) == True;
		(Has Status(Event Player, Hacked) || Has Status(Event Player, Frozen) || Has Status(Event Player, Knocked Down) || Has Status(
			Event Player, Stunned) || Has Status(Event Player, Asleep)) == False;
	}

	actions
	{
		Wait(0.350, Ignore Condition);
		Small Message(Event Player, Custom String(" {0} BUNKER BUSTER: -100% POWER", Icon String(Radioactive)));
		If(Event Player.T >= 100);
			Event Player.T -= 100;
		Else;
			Event Player.T = 0;
		End;
		Event Player.U = Ray Cast Hit Position(Eye Position(Event Player), 100 * Facing Direction Of(Event Player) + Eye Position(
			Event Player), Null, All Players(All Teams), False);
		Wait(1.750, Ignore Condition);
		Play Effect(All Players(All Teams), Bad Explosion, Color(Sky Blue), Event Player.U, 10);
		Play Effect(All Players(All Teams), Ring Explosion Sound, Color(White), Event Player.U, 200);
		Damage(Players Within Radius(Event Player.U, 10, Team 2, Off), Event Player, 100);
		Wait(0.250, Ignore Condition);
		Play Effect(All Players(All Teams), Bad Explosion, Color(Sky Blue), Event Player.U, 10);
		Play Effect(All Players(All Teams), Ring Explosion Sound, Color(White), Event Player.U, 200);
		Damage(Players Within Radius(Event Player.U, 10, Team 2, Off), Event Player, 100);
		Wait(0.250, Ignore Condition);
		Play Effect(All Players(All Teams), Bad Explosion, Color(Sky Blue), Event Player.U, 10);
		Play Effect(All Players(All Teams), Ring Explosion Sound, Color(White), Event Player.U, 200);
		Damage(Players Within Radius(Event Player.U, 10, Team 2, Off), Event Player, 100);
	}
}

rule("PHARAH Booster Dash ON")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Pharah;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
		Is Using Ultimate(Event Player) == False;
	}

	actions
	{
		Start Camera(Event Player, Facing Direction Of(Event Player) * 0.200 + Ray Cast Hit Position(Eye Position(Event Player),
			Eye Position(Event Player) + World Vector Of(Vector(0, 0.500, -1), Event Player, Rotation) + Facing Direction Of(Event Player)
			* Vector(2, 2, 2) * -1.500, Null, Event Player, False), Eye Position(Event Player) + World Vector Of(Vector(0, 0.500, -1),
			Event Player, Rotation) + Facing Direction Of(Event Player) * 500, 80);
		Set Gravity(Event Player, 255);
		Set Move Speed(Event Player, 100 + Event Player.MOVEMENT);
		Start Forcing Throttle(Event Player, 1, 1, 0, 0, 0, 0.750);
		Disallow Button(Event Player, Button(Primary Fire));
		Disallow Button(Event Player, Button(Ability 2));
		Wait(0.250, Ignore Condition);
	}
}

rule("PHARAH Booster Dash OFF")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Pharah;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Secondary Fire)) == False;
	}

	actions
	{
		Stop Camera(Event Player);
		Set Gravity(Event Player, 100);
		Set Move Speed(Event Player, Event Player.MOVEMENT);
		Stop Forcing Throttle(Event Player);
		Allow Button(Event Player, Button(Primary Fire));
		Allow Button(Event Player, Button(Ability 2));
		Wait(0.250, Ignore Condition);
	}
}

rule("REAPER Phasing heal")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reaper;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Heal(Event Player, Null, Max Health(Event Player) * 0.050);
		Wait(0.500, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("REAPER Ultimate Phased Out")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reaper;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Set Status(Event Player, Null, Phased Out, 4);
	}
}

rule("REAPER Frozen Shadow Step")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reaper;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Wait(2, Ignore Condition);
		Set Status(Players Within Radius(Event Player, 10, Team 2, Off), Null, Frozen, 4);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Purple), Event Player, 20);
		Small Message(Event Player, Custom String("{0} Frozen Shadow Step", Ability Icon String(Hero(Mei), Button(Ultimate))));
	}
}

rule("REAPER Creeping Death Mode Toggle")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reaper;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Is In Spawn Room(Event Player) == False;
		Is Button Held(Event Player, Button(Interact)) == True;
		(Has Status(Event Player, Hacked) || Has Status(Event Player, Frozen) || Has Status(Event Player, Knocked Down) || Has Status(
			Event Player, Stunned) || Has Status(Event Player, Asleep)) == False;
	}

	actions
	{
		Play Effect(Event Player, Bad Pickup Effect, Color(Purple), Event Player, 1);
		If(Event Player.R == 0);
			Play Effect(Event Player, Debuff Impact Sound, Color(White), Event Player, 200);
			Start Camera(Event Player, Facing Direction Of(Event Player) * 0.200 + Ray Cast Hit Position(Eye Position(Event Player),
				Eye Position(Event Player) + World Vector Of(Vector(0, 0.500, -1), Event Player, Rotation) + Facing Direction Of(Event Player)
				* Vector(2, 2, 2) * -1.500, Null, Event Player, False), Eye Position(Event Player) + World Vector Of(Vector(0, 0.500, -1),
				Event Player, Rotation) + Facing Direction Of(Event Player) * 500, 80);
			Start Damage Over Time(Event Player, Null, 9999, Max Health(Event Player) * 0.150);
			Small Message(Event Player, Custom String("{0} CREEPING DEATH ENABLED", Ability Icon String(Hero(Reaper), Button(Ultimate))));
			Event Player.R = 1;
		Else;
			Call Subroutine(ReaperCreepingDeathOff);
		End;
	}
}

rule("REAPER Creeping Death Mode OFF on death")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reaper;
	}

	conditions
	{
		Event Player.R == 1;
		(Is Dead(Event Player) == True || Is In Spawn Room(Event Player) == True || Has Status(Event Player, Hacked) == True) == True;
	}

	actions
	{
		Call Subroutine(ReaperCreepingDeathOff);
	}
}

rule("REAPER Shadow Dash")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reaper;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Melee)) == True;
		(Has Status(Event Player, Hacked) || Has Status(Event Player, Frozen) || Has Status(Event Player, Rooted) || Has Status(
			Event Player, Knocked Down) || Has Status(Event Player, Stunned) || Has Status(Event Player, Asleep)) == False;
	}

	actions
	{
		Play Effect(All Players(All Teams), Good Pickup Effect, Color(Purple), Position Of(Event Player), 1);
		Apply Impulse(Event Player, Direction From Angles(Horizontal Facing Angle Of(Event Player), 0), 100, To World,
			Cancel Contrary Motion);
		Wait(0.100, Ignore Condition);
		Apply Impulse(Event Player, Direction From Angles(Horizontal Facing Angle Of(Event Player), 0), 100, To World,
			Cancel Contrary Motion);
		Wait(0.350, Ignore Condition);
	}
}

rule("REINHARDT Shield Heal")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reinhardt;
	}

	conditions
	{
		Is Firing Secondary(Event Player) == True;
	}

	actions
	{
		Heal(Event Player, Event Player, Max Health(Event Player) * 0.050);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("REINHARDT Heal Message")
{
	event
	{
		Player Received Healing;
		Team 1;
		Reinhardt;
	}

	conditions
	{
		Healer == Event Player;
	}

	actions
	{
		Small Message(Event Player, Custom String("{0} {1} Healed", Ability Icon String(Hero(Reinhardt), Button(Secondary Fire)),
			Round To Integer(Event Healing, To Nearest)));
	}
}

rule("REINHARDT Scorching Wave")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Reinhardt;
	}

	conditions
	{
		Event Ability == Button(Ability 2);
	}

	actions
	{
		Set Status(Victim, Null, Burning, 3);
		Start Damage Over Time(Victim, Event Player, 3, Max Health(Victim) * 0.050);
	}
}

rule("REINHARDT Sonic charge on")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reinhardt;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Set Status(Event Player, Null, Phased Out, 1.500);
		Set Move Speed(Event Player, Event Player.MOVEMENT + 200);
		Wait(0.250, Ignore Condition);
	}
}

rule("REINHARDT Sonic charge off")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reinhardt;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == False;
	}

	actions
	{
		Set Move Speed(Event Player, Event Player.MOVEMENT);
		Wait(1, Ignore Condition);
	}
}

rule("ROADHOG Asthmatic Trample [Broken after Nov-4-2023 Hog update; fixed by Arkhanglesk#11200]")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Roadhog;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Ability Cooldown(Event Player, Button(Secondary Fire)) == 0;
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
		(Has Status(Event Player, Hacked) || Has Status(Event Player, Frozen) || Has Status(Event Player, Knocked Down) || Has Status(
			Event Player, Stunned) || Has Status(Event Player, Asleep)) == False;
	}

	actions
	{
		Set Move Speed(Event Player, Event Player.MOVEMENT + 100);
		"Broken after 11/4/2023 Hog update"
		disabled Start Forcing Throttle(Event Player, 1, 1, 0, 0, 0, 0.500);
		Wait(1, Ignore Condition);
		"Broken after 11/4/2023 Hog update"
		disabled Stop Forcing Throttle(Event Player);
		Set Move Speed(Event Player, Event Player.MOVEMENT);
	}
}

rule("ROADHOG Asthmatic Knockdown")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Ability Cooldown(Players On Hero(Hero(Roadhog), Team 1), Button(Secondary Fire)) == 0;
		(Is Button Held(Players On Hero(Hero(Roadhog), Team 1), Button(Secondary Fire)) == True) == True;
		Distance Between(Event Player, Position Of(Players On Hero(Hero(Roadhog), Team 1))) <= 3;
		disabled Is True For Any(Is Button Held(Event Player, Button(Secondary Fire)), Distance Between(Position Of(Event Player), Position Of(
			Current Array Element)) <= 3) == True;
	}

	actions
	{
		Set Status(Event Player, Null, Knocked Down, 1.500);
		Wait(1.500, Ignore Condition);
	}
}

rule("ROADHOG Hook Combo Activation")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Roadhog;
	}

	conditions
	{
		Event Ability == Button(Ability 1);
	}

	actions
	{
		Event Player.R = True;
		Wait(3, Ignore Condition);
		Event Player.R = False;
	}
}

rule("ROADHOG Hook Shoot Combo")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Roadhog;
	}

	conditions
	{
		Event Player.R == True;
		Event Ability == Button(Primary Fire);
	}

	actions
	{
		Apply Impulse(Victim, Up, 5, To World, Cancel Contrary Motion);
		Apply Impulse(Victim, Direction From Angles(Horizontal Facing Angle Of(Event Player), -20), 25, To World, Cancel Contrary Motion);
		Set Status(Victim, Event Player, Stunned, 2);
		Damage(Victim, Event Player, Event Damage / 2);
		Wait(0.250, Ignore Condition);
		Event Player.R = False;
	}
}

rule("ROADHOG Hook Punch Combo")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Roadhog;
	}

	conditions
	{
		Event Player.R == True;
		Event Ability == Button(Melee);
	}

	actions
	{
		Damage(Victim, Event Player, Event Damage / 2);
		If(Is Hero Being Played(Hero(Junkrat), Team 1) == True);
			Small Message(Event Player, Custom String("{0} +$100 MUGGED FOR JUNKRAT", Hero Icon String(Hero(Roadhog))));
			Players On Hero(Hero(Junkrat), Team 1).T += 100;
		End;
		Wait(0.250, Ignore Condition);
		Set Status(Victim, Event Player, Knocked Down, 2);
		Event Player.R = False;
	}
}

rule("ROADHOG Last Hit Bonus for Junkrat")
{
	event
	{
		Player Dealt Final Blow;
		Team 1;
		Roadhog;
	}

	conditions
	{
		Is Hero Being Played(Hero(Junkrat), Team 1) == True;
	}

	actions
	{
		Event Player.T = Round To Integer(Random Real(50, 200), To Nearest);
		Wait(0.050, Ignore Condition);
		Small Message(Players On Hero(Hero(Junkrat), Team 1), Custom String("{0} +${1} BOUNTY KILL", Hero Icon String(Hero(Roadhog)),
			Event Player.T));
		Small Message(Event Player, Custom String("{0} +${1} EARNED FOR JUNKRAT", Hero Icon String(Hero(Roadhog)), Event Player.T));
		Players On Hero(Hero(Junkrat), Team 1).T += Event Player.T;
	}
}

rule("ROADHOG Enrage ON")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Roadhog;
	}

	conditions
	{
		Event Player.S == 1;
	}

	actions
	{
		Small Message(Event Player, Custom String(" {0} THAT'S MY MONEY! (X2 DMG) {1}", Hero Icon String(Hero(Roadhog)), Hero Icon String(
			Hero(Junkrat))));
	}
}

rule("ROADHOG Enrage OFF")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Roadhog;
	}

	conditions
	{
		Event Player.S == 2;
	}

	actions
	{
		Event Player.S = 0;
	}
}

rule("ROADHOG Ultimate Stun")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Roadhog;
	}

	conditions
	{
		Event Ability == Button(Ultimate);
	}

	actions
	{
		Set Status(Victim, Event Player, Stunned, 1);
		Wait(0.900, Ignore Condition);
	}
}

rule("SIGMA Kinetic Attraction [Created by SCOURGE#11437]")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Sigma;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Event Player.DamageMOD = Filtered Array(Players in View Angle(Event Player, Team 2, 103), Is In Line of Sight(Event Player,
			Current Array Element, Barriers Do Not Block LOS) == True && Distance Between(Event Player, Current Array Element) <= 30);
		Apply Impulse(Event Player.DamageMOD, Up, 2, To World, Cancel Contrary Motion);
		Apply Impulse(Event Player.DamageMOD, Direction Towards(Event Player.DamageMOD, Event Player), Distance Between(
			Event Player.DamageMOD, Event Player) * 1.200, To World, Cancel Contrary Motion);
		Damage(Event Player.DamageMOD, Event Player, Max Health(Event Player) / 100 / (Distance Between(Event Player,
			Event Player.DamageMOD) * 0.060));
		Set Status(Event Player.DamageMOD, Event Player, Stunned, 2);
		Wait(0.200, Ignore Condition);
		Loop If Condition Is True;
		Set Status(Event Player.DamageMOD, Event Player, Knocked Down, 5);
	}
}

rule("SIGMA Kinetic Repulsion Punch")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Sigma;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Is Button Held(Event Player, Button(Melee)) == True;
		(Has Status(Event Player, Hacked) || Has Status(Event Player, Frozen) || Has Status(Event Player, Knocked Down) || Has Status(
			Event Player, Stunned) || Has Status(Event Player, Asleep)) == False;
	}

	actions
	{
		Wait(0.100, Ignore Condition);
		Play Effect(All Players(All Teams), Good Explosion, Color(Sky Blue), Ray Cast Hit Position(Eye Position(Event Player),
			5 * Facing Direction Of(Event Player) + Eye Position(Event Player), All Players(Team 2), Event Player, False), 1);
		Play Effect(All Players(All Teams), Explosion Sound, Color(White), Event Player, 200);
		Event Player.DamageMOD = Filtered Array(Players in View Angle(Event Player, Team 2, 65), Is In Line of Sight(Event Player,
			Current Array Element, Barriers Do Not Block LOS) == True && Distance Between(Event Player, Current Array Element) < 7);
		If(Distance Between(Event Player, Event Player.DamageMOD) < 7);
			Apply Impulse(Event Player.DamageMOD, Direction From Angles(Horizontal Facing Angle Of(Event Player), -20), 0.400 * Event Player.T,
				To World, Cancel Contrary Motion);
			Damage(Event Player.DamageMOD, Event Player, Max Health(Event Player) / 6);
			Set Status(Event Player.DamageMOD, Event Player, Knocked Down, 2.500);
			Event Player.T = 0;
		End;
		Wait(0.800, Ignore Condition);
	}
}

rule("SIGMA Stone Knockdown")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Sigma;
	}

	conditions
	{
		Event Ability == Button(Ability 2);
	}

	actions
	{
		Set Status(Victim, Event Player, Knocked Down, 3);
	}
}

rule("SOJOURN Rocket Slide [Added by Arkhanglesk#11200]")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Ability Cooldown(Players On Hero(Hero(Sojourn), Team 1), Button(Ability 1)) == 0;
		(Is Using Ability 1(Players On Hero(Hero(Sojourn), Team 1)) == True) == True;
		Distance Between(Event Player, Position Of(Players On Hero(Hero(Sojourn), Team 1))) <= 2;
	}

	actions
	{
		Apply Impulse(Players Within Radius(Event Player, 2, Team 2, Off), Direction From Angles(Horizontal Angle From Direction(
			Direction Towards(Event Player, Players Within Radius(Event Player, 2, Team 2, Off))), -15), 15, To World,
			Cancel Contrary Motion);
		Set Status(Players Within Radius(Event Player, 2, Team 2, Off), Event Player, Knocked Down, 2);
		Wait(2, Ignore Condition);
	}
}

rule("SOJOURN Super Rail Gun [Added by Arkhanglesk#11200]")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Sojourn;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Is Firing Secondary(Event Player) == True;
	}

	actions
	{
		If(Is In View Angle(Event Player, Player Closest To Reticle(Event Player, Team 2) + Vector(0, -0.500, 0), 3) == True);
			Play Effect(All Players(All Teams), Good Explosion, Color(Blue), Player Closest To Reticle(Event Player, Team 2), 15);
			Play Effect(All Players(All Teams), Ring Explosion, Color(Blue), Player Closest To Reticle(Event Player, Team 2), 15);
			Play Effect(All Players(All Teams), Ring Explosion Sound, Color(Blue), Event Player, 200);
			Kill(Player Closest To Reticle(Event Player, Team 2), Event Player);
			Kill(Ray Cast Hit Player(Eye Position(Event Player), 100 * Facing Direction Of(Event Player) + Eye Position(Event Player),
				All Players(Team 2), Event Player, False), Event Player);
		End;
	}
}

rule("SOLDIER: 76 Ultimate Airstrike Activation")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Soldier: 76;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Event Player.R == 0;
	}

	actions
	{
		Set Invisible(Event Player, All);
		Set Status(Event Player, Null, Rooted, 1.200);
		Set Status(Event Player, Null, Phased Out, 20);
		Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Position Of(Event Player), 2);
		Event Player.DamageMOD = Position Of(Event Player);
		Set Gravity(Event Player, 0);
		Wait(0.250, Ignore Condition);
		Abort If(Is Dead(Event Player));
		Set Move Speed(Event Player, 100);
		Call Subroutine(DisableButtons);
		Start Accelerating(Event Player, Direction From Angles(Horizontal Facing Angle Of(Event Player), 0), 100, 7, To World, None);
		Teleport(Event Player, Position Of(Event Player) + Vector(0, 175, 0));
		Start Camera(Event Player, Event Player + World Vector Of(Vector(0, 0, 0), Event Player, Rotation)
			+ Up * 1.500 + Facing Direction Of(Event Player) * -2, Event Player + Facing Direction Of(Event Player) * 1000, 0);
		Set Facing(Event Player, Down, To World);
		Event Player.R = 1;
		Wait(13, Ignore Condition);
		Event Player.R = 0;
		Teleport(Event Player, Event Player.DamageMOD);
		Set Invisible(Event Player, None);
		Set Gravity(Event Player, 100);
		Call Subroutine(EnableButtons);
		Stop Camera(Event Player);
		Stop Accelerating(Event Player);
		Set Move Speed(Event Player, Event Player.MOVEMENT);
	}
}

rule("SOLDIER: 76 Ultimate Airstrike Damage")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Soldier: 76;
	}

	conditions
	{
		Event Player.R == 1;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
	}

	actions
	{
		Play Effect(All Players(All Teams), Ring Explosion, Color(Sky Blue), Ray Cast Hit Position(Eye Position(Event Player),
			300 * Facing Direction Of(Event Player) + Eye Position(Event Player), All Players(Team 2), Event Player, True), 20);
		Play Effect(All Players(All Teams), Bad Explosion, Color(Blue), Ray Cast Hit Position(Eye Position(Event Player),
			300 * Facing Direction Of(Event Player) + Eye Position(Event Player), All Players(Team 2), Event Player, True), 20);
		Play Effect(All Players(All Teams), Explosion Sound, Color(Blue), Event Player, 200);
		Damage(Players Within Radius(Ray Cast Hit Position(Eye Position(Event Player), 300 * Facing Direction Of(Event Player)
			+ Eye Position(Event Player), All Players(Team 2), Event Player, True), 30, Team 2, Off), Event Player,
			Event Player.DAMAGE / 100 * 7);
		Damage(Players in View Angle(Event Player, Team 2, 5), Event Player, Event Player.DAMAGE / 100 * 7);
		Wait(0.500, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("SOMBRA Ultimate Rooting Hack")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Sombra;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Set Status(Players Within Radius(Event Player, 15, Team 2, Surfaces), Event Player, Rooted, 10);
		Players Within Radius(Event Player, 15, Team 2, Surfaces).RootVariable = 1.500;
		Chase Player Variable At Rate(Players Within Radius(Event Player, 15, Team 2, Off), RootVariable, 0, 0.150, Destination and Rate);
		Set Invisible(Event Player, Enemies);
		Small Message(Event Player, Custom String("{0} You are Invisible", Icon String(Eye)));
		Wait(11, Ignore Condition);
		Stop Chasing Player Variable(All Players(Team 2), RootVariable);
		Set Invisible(Event Player, None);
		Small Message(Event Player, Custom String("{0} You are Visible", Icon String(Eye)));
	}
}

rule("SOMBRA Stun Hack")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Has Status(Event Player, Hacked) == True;
		Is Firing Secondary(Players On Hero(Hero(Sombra), Team 1)) == True;
	}

	actions
	{
		Set Status(Event Player, Null, Stunned, 3);
	}
}

rule("SOMBRA Assassinate x2 Damage from behind or while hacked")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Sombra;
	}

	conditions
	{
		(Is In View Angle(Victim, Position Of(Event Player), 110) == False || Has Status(Victim, Hacked)) == True;
		Event Ability == Button(Primary Fire);
	}

	actions
	{
		Damage(Victim, Event Player, Event Damage / (Event Player.DAMAGE / 100));
		Play Effect(Event Player, Bad Explosion, Color(Purple), Victim, 0.750);
		Wait(0.050, Ignore Condition);
	}
}

rule("SOMBRA Phasing invisibility ON")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Sombra;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Set Status(Event Player, Null, Phased Out, 60);
		Start Heal Over Time(Event Player, Null, 60, Max Health(Event Player) * 0.100);
		Event Player.R = Last Heal Over Time ID;
	}
}

rule("SOMBRA Phasing invisibility OFF")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Sombra;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == False;
	}

	actions
	{
		Clear Status(Event Player, Phased Out);
		Stop Heal Over Time(Event Player.R);
	}
}

rule("SYMMETRA Impulse Mine Placement")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Symmetra;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Is Button Held(Event Player, Button(Ability 2)) == True;
		(Has Status(Event Player, Hacked) || Has Status(Event Player, Frozen) || Has Status(Event Player, Rooted) || Has Status(
			Event Player, Knocked Down) || Has Status(Event Player, Stunned) || Has Status(Event Player, Asleep)) == False;
	}

	actions
	{
		Event Player.T = 0;
		Event Player.U = Ray Cast Hit Position(Eye Position(Event Player), 10 * Facing Direction Of(Event Player) + Eye Position(
			Event Player), All Players(Team 2), Event Player, False);
		Wait(0.050, Ignore Condition);
		Play Effect(All Players(All Teams), Good Pickup Effect, Color(Aqua), Event Player.U, 10);
		Play Effect(All Players(All Teams), Buff Explosion Sound, Color(Blue), Event Player, 100);
		Wait(3, Ignore Condition);
	}
}

rule("SYMMETRA Impulse Mine Activation")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Symmetra;
	}

	conditions
	{
		Event Player.T == 100;
		Is True For Any(All Living Players(Team 2), Distance Between(Position Of(Event Player.U), Position Of(Current Array Element)
			+ Vector(0, 0.500, 0)) < 4) == True;
	}

	actions
	{
		Play Effect(All Players(All Teams), Bad Explosion, Color(Blue), Event Player.U, 10);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Sky Blue), Event Player.U, 14);
		Play Effect(All Players(All Teams), Ring Explosion Sound, Color(White), Event Player.U, 200);
		Apply Impulse(Players Within Radius(Event Player.U, 7, Team 2, Off), Direction From Angles(Horizontal Angle From Direction(
			Direction Towards(Event Player.U, Players Within Radius(Event Player.U, 7, Team 2, Off))), -15), 15, To World,
			Cancel Contrary Motion);
		Damage(Players Within Radius(Event Player.U, 7, Team 2, Off), Event Player, 50);
		Set Status(Players Within Radius(Event Player.U, 7, Team 2, Off), Event Player, Knocked Down, 2);
		Event Player.T = 0;
		Wait(0.250, Ignore Condition);
	}
}

rule("SYMMETRA Secondary Rapid Fire")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Symmetra;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
	}

	actions
	{
		Set Projectile Speed(Event Player, 15);
		Allow Button(Event Player, Button(Secondary Fire));
		Start Holding Button(Event Player, Button(Secondary Fire));
		Wait(1, Ignore Condition);
		Disallow Button(Event Player, Button(Secondary Fire));
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Button(Secondary Fire));
		Set Projectile Speed(Event Player, 100);
	}
}

rule("TORBJORN Dwarven Leap")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		TorbjÃ¶rn;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Is Button Held(Event Player, Button(Crouch)) == True;
		Is Button Held(Event Player, Button(Jump)) == True;
		(Has Status(Event Player, Hacked) || Has Status(Event Player, Frozen) || Has Status(Event Player, Rooted) || Has Status(
			Event Player, Knocked Down) || Has Status(Event Player, Stunned) || Has Status(Event Player, Asleep)) == False;
	}

	actions
	{
		Play Effect(All Players(All Teams), Explosion Sound, Color(White), Event Player, 200);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Orange), Position Of(Event Player), 3);
		Play Effect(All Players(All Teams), Bad Explosion, Color(Orange), Position Of(Event Player), 3);
		Apply Impulse(Event Player, Up, 13, To World, Cancel Contrary Motion);
		Apply Impulse(Event Player, Direction From Angles(Horizontal Facing Angle Of(Event Player), 0), 25, To World,
			Cancel Contrary Motion);
		Wait(0.100, Ignore Condition);
		If(Is Using Ability 2(Event Player) == True);
			Start Camera(Event Player, Facing Direction Of(Event Player) * 0.200 + Ray Cast Hit Position(Eye Position(Event Player),
				Eye Position(Event Player) + World Vector Of(Vector(0, 0.500, -1), Event Player, Rotation) + Facing Direction Of(Event Player)
				* Vector(2, 2, 2) * -1.500, Null, Event Player, False), Eye Position(Event Player) + World Vector Of(Vector(0, 0.500, -1),
				Event Player, Rotation) + Facing Direction Of(Event Player) * 500, 80);
			Set Status(Event Player, Null, Phased Out, 2);
			Event Player.R = 1;
		End;
		Wait(1.900, Ignore Condition);
	}
}

rule("TORBJORN Dwarven Rage Leap Landing")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		TorbjÃ¶rn;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Is On Ground(Event Player) == True;
		Event Player.R == 1;
	}

	actions
	{
		Set Status(Players Within Radius(Event Player, 7, Team 2, Surfaces), Event Player, Knocked Down, 2);
		Set Status(Players Within Radius(Event Player, 7, Team 2, Surfaces), Event Player, Burning, 2);
		Damage(Players Within Radius(Event Player, 7, Team 2, Surfaces), Event Player, 50);
		Start Damage Over Time(Players Within Radius(Event Player, 7, Team 2, Off), Event Player, 5.500, 40);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Yellow), Position Of(Event Player), 7);
		Stop Camera(Event Player);
		Event Player.R = 0;
	}
}

rule("TORBJORN Dwarven Rage")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		TorbjÃ¶rn;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Start Heal Over Time(Event Player, Null, 10, Max Health(Event Player) * 0.025);
		Small Message(Event Player, Custom String("{0} DOUBLE DAMAGE!", Ability Icon String(Hero(TorbjÃ¶rn), Button(Ability 2))));
		Wait(1, Ignore Condition);
	}
}

rule("TORBJORN Molten Punch")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		TorbjÃ¶rn;
	}

	conditions
	{
		Event Ability == Button(Melee);
	}

	actions
	{
		Set Status(Victim, Null, Burning, 5.500);
		Start Damage Over Time(Victim, Event Player, 5, 20);
		If(Is Using Ability 2(Event Player) == True);
			Set Status(Victim, Event Player, Knocked Down, 3);
		End;
	}
}

rule("TRACER Blink Stasis")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Tracer;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Wait(0.100, Ignore Condition);
		Set Status(Players Within Radius(Event Player, 3, Team 2, Off), Null, Frozen, 3);
	}
}

rule("TRACER Total Recall")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Tracer;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Heal(Event Player, Null, Max Health(Event Player));
	}
}

rule("TRACER Ultimate Damage")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Tracer;
	}

	conditions
	{
		Event Player.R == 1;
	}

	actions
	{
		Kill(Victim, Event Player);
		Wait(0.050, Ignore Condition);
	}
}

rule("TRACER Ultimate (Destabilizing Time) Activation")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Tracer;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Global.SlowTimeCheck == False;
		(Has Status(Event Player, Hacked) || Has Status(Event Player, Frozen) || Has Status(Event Player, Rooted) || Has Status(
			Event Player, Knocked Down) || Has Status(Event Player, Stunned) || Has Status(Event Player, Asleep)) == False;
	}

	actions
	{
		Global.SlowTimeCheck = True;
		Big Message(All Players(All Teams), Custom String(" {0}ULTIMATE: CHRONOKINESIS", Hero Icon String(Hero(Tracer))));
		Event Player.R = True;
		Set Ability 1 Enabled(All Players(Team 2), False);
		Set Ability 2 Enabled(Event Player, False);
		Disallow Button(Event Player, Button(Jump));
		Set Status(Event Player, Null, Phased Out, 1);
		Set Slow Motion(10);
		Wait(0.100, Ignore Condition);
		Set Move Speed(Event Player, Absolute Value(900));
		Wait(0.700, Ignore Condition);
		Abort If(Is Dead(Event Player) == True);
		Set Slow Motion(100);
		Set Move Speed(Event Player, Event Player.MOVEMENT);
		Wait(0.100, Ignore Condition);
		Set Ability 2 Enabled(Event Player, True);
		Allow Button(Event Player, Button(Jump));
		Set Ability 1 Enabled(All Players(Team 2), True);
		Event Player.R = False;
		Wait(0.250, Ignore Condition);
		Set Ultimate Charge(Event Player, 0);
		Wait(0.250, Ignore Condition);
		Global.SlowTimeCheck = False;
	}
}

rule("TRACER Ultimate (Destabilizing Time) Off On Death")
{
	event
	{
		Player Died;
		Team 1;
		Tracer;
	}

	conditions
	{
		Event Player.R == True;
	}

	actions
	{
		Set Slow Motion(100);
		Set Move Speed(Event Player, Event Player.MOVEMENT);
		Wait(0.100, Ignore Condition);
		Set Ability 2 Enabled(Event Player, True);
		Allow Button(Event Player, Button(Jump));
		Set Ability 1 Enabled(All Players(Team 2), True);
		Event Player.R = False;
		Wait(0.250, Ignore Condition);
		Set Ultimate Charge(Event Player, 0);
		Wait(0.250, Ignore Condition);
		Global.SlowTimeCheck = False;
	}
}

rule("WIDOWMAKER Charge counter [Created by jaytheyggdrasil]")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Widowmaker;
	}

	conditions
	{
		Is Firing Secondary(Event Player) == True;
	}

	actions
	{
		Event Player.T = -3.600;
	}
}

rule("WIDOWMAKER Charge counter release [Created by jaytheyggdrasil]")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Widowmaker;
	}

	conditions
	{
		Is Firing Secondary(Event Player) == True;
		Is Firing Primary(Event Player) == True;
	}

	actions
	{
		Wait(0.016, Ignore Condition);
		Event Player.T = -6;
	}
}

rule("WIDOWMAKER Explosive Shots")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Widowmaker;
	}

	conditions
	{
		Event Player.T >= 1;
		Is Firing Secondary(Event Player) == True;
		Is Firing Primary(Event Player) == True;
		Event Player.R == 0;
	}

	actions
	{
		Event Player.U = Ray Cast Hit Position(Eye Position(Event Player), 100 * Facing Direction Of(Event Player) + Eye Position(
			Event Player), All Players(Team 2), Event Player, True);
		Play Effect(All Players(All Teams), Bad Explosion, Color(Purple), Event Player.U, Event Player.T / 2);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Purple), Event Player.U, Event Player.T);
		Play Effect(All Players(All Teams), Explosion Sound, Color(Purple), Event Player.U, 200);
		Damage(Players Within Radius(Event Player.U, Event Player.T / 2, Team 2, Surfaces), Event Player, 6 * Event Player.T);
		Wait(0.250, Ignore Condition);
	}
}

rule("WIDOWMAKER Frozen Mine")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Widowmaker;
	}

	conditions
	{
		Event Ability == Button(Ability 2);
	}

	actions
	{
		Start Damage Over Time(Victim, Event Player, 5, Max Health(Event Player) * 0.050);
		Set Status(Victim, Event Player, Frozen, 5);
	}
}

rule("WIDOWMAKER Ultimate Rail Gun [Broken in OW2; fixed by Arkhanglesk#11200]")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Widowmaker;
	}

	conditions
	{
		Event Player.R > 0;
		Is Firing Secondary(Event Player) == True;
		Is Firing Primary(Event Player) == True;
	}

	actions
	{
		If(Is In View Angle(Event Player, Player Closest To Reticle(Event Player, Team 2) + Vector(0, -0.500, 0), 3)
			== True && Event Player.R > 0);
			Play Effect(All Players(All Teams), Good Explosion, Color(Blue), Player Closest To Reticle(Event Player, Team 2), 15);
			Play Effect(All Players(All Teams), Ring Explosion, Color(Blue), Player Closest To Reticle(Event Player, Team 2), 15);
			Play Effect(All Players(All Teams), Ring Explosion Sound, Color(Blue), Event Player, 200);
			Kill(Player Closest To Reticle(Event Player, Team 2), Event Player);
			Kill(Ray Cast Hit Player(Eye Position(Event Player), 100 * Facing Direction Of(Event Player) + Eye Position(Event Player),
				All Players(Team 2), Event Player, False), Event Player);
			Event Player.R -= 1;
			Wait(0.050, Ignore Condition);
			Small Message(Event Player, Custom String("{0}RAILGUN AMMO: {1}/4", Icon String(Skull), Event Player.R));
		End;
		Wait(0.050, Ignore Condition);
	}
}

rule("WIDOWMAKER Ultimate Activation")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Widowmaker;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Small Message(Event Player, Custom String("{0}RAILGUN AMMO LOADED 4/4", Icon String(Skull)));
		Event Player.R = 4;
	}
}

rule("WIDOWMAKER Ultimate Deactivation on death")
{
	event
	{
		Player Died;
		Team 1;
		Widowmaker;
	}

	conditions
	{
		Event Player.R > 0;
	}

	actions
	{
		Event Player.R = 0;
	}
}

rule("WINSTON Ultimate Harambe's Revenge")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Winston;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Wait(0.100, Ignore Condition);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Orange), Event Player, 10);
		Damage(Players Within Radius(Event Player, 10, Team 2, Surfaces), Event Player, 100);
		Set Status(Players Within Radius(Event Player, 10, Team 2, Surfaces), Event Player, Knocked Down, 3);
	}
}

rule("WINSTON Venting Rage")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Winston;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
		Event Player.T >= 35;
	}

	actions
	{
		Event Player.T -= 35;
		Skip If(Event Player.T >= 35, 1);
		Set Ability 1 Enabled(Event Player, False);
		Small Message(Event Player, Custom String("{0} -35 RAGE", Icon String(Fire)));
		Wait(0.250, Ignore Condition);
		Event Player.R = 1;
	}
}

rule("WINSTON Rage Counter")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Winston;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Event Player.T < 100;
	}

	actions
	{
		Event Player.T += 5;
		Small Message(Event Player, Custom String("Rage: {0}", Event Player.T));
		Wait(0.500, Ignore Condition);
	}
}

rule("WINSTON Rage Slam Activation")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Winston;
	}

	conditions
	{
		Event Player.T >= 35;
	}

	actions
	{
		Set Ability 1 Enabled(Event Player, True);
	}
}

rule("WINSTON Rage Slam Ground Contact")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Winston;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Is On Ground(Event Player) == True;
		Event Player.R == 1;
	}

	actions
	{
		Set Status(Players Within Radius(Event Player, 7, Team 2, Surfaces), Event Player, Knocked Down, 2);
		Damage(Players Within Radius(Event Player, 7, Team 2, Surfaces), Event Player, 100);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Blue), Event Player, 14);
		Event Player.R = 0;
	}
}

rule("WINSTON Healing Barrier")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Winston;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Start Heal Over Time(Event Player, Null, 5, Max Health(Event Player) * 0.050);
		Wait(0.250, Ignore Condition);
	}
}

rule("WRECKING BALL Self-repairs")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Wrecking Ball;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Start Heal Over Time(Event Player, Null, 7, Max Health(Event Player) * 0.050);
	}
}

rule("WRECKING BALL Ultimate Orbital Drop")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Wrecking Ball;
	}

	conditions
	{
		Ultimate Charge Percent(Event Player) == 100;
		Is On Ground(Event Player) == True;
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Is Alive(Event Player) == True;
		(Has Status(Event Player, Hacked) || Has Status(Event Player, Frozen) || Has Status(Event Player, Rooted) || Has Status(
			Event Player, Knocked Down) || Has Status(Event Player, Stunned) || Has Status(Event Player, Asleep)) == False;
	}

	actions
	{
		Set Primary Fire Enabled(Event Player, False);
		Call Subroutine(ClearAllStatus);
		Set Status(Event Player, Null, Phased Out, 5);
		Event Player.R = Position Of(Event Player);
		Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Position Of(Event Player), 2);
		Wait(0.050, Ignore Condition);
		Start Damage Modification(All Players(Team 2), Event Player, 600, None);
		Event Player.DamageMOD = Last Damage Modification ID;
		Teleport(Event Player, Position Of(Event Player) + Vector(0, 150, 0));
		Start Facing(Event Player, Down, 1000, To World, Direction and Turn Rate);
		Wait(0.250, Ignore Condition);
		Press Button(Event Player, Button(Crouch));
		Wait(2, Ignore Condition);
		Teleport(Event Player, Event Player.R + Vector(0, 2, 0));
		Wait(0.100, Ignore Condition);
		Play Effect(All Players(All Teams), Bad Explosion, Color(Orange), Event Player, 20);
		Play Effect(All Players(All Teams), Explosion Sound, Color(White), Event Player, 200);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Orange), Event Player, 20);
		Damage(Players Within Radius(Event Player, 5, Team 2, Off), Event Player, 200);
		Stop Facing(Event Player);
		Stop Holding Button(Event Player, Button(Ultimate));
		Wait(0.250, Ignore Condition);
		Allow Button(Event Player, Button(Ultimate));
		Press Button(Event Player, Button(Ultimate));
		Wait(0.250, Ignore Condition);
		Disallow Button(Event Player, Button(Ultimate));
		Set Primary Fire Enabled(Event Player, True);
		Stop Damage Modification(Event Player.DamageMOD);
		Wait(3, Ignore Condition);
	}
}

rule("ZARYA Barrier Tackle")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Zarya;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Start Heal Over Time(Event Player, Null, 5, Max Health(Event Player) * 0.050);
		Apply Impulse(Event Player, Direction From Angles(Horizontal Facing Angle Of(Event Player), 0), 100, To World,
			Cancel Contrary Motion);
		Wait(0.050, Ignore Condition);
		Apply Impulse(Event Player, Direction From Angles(Horizontal Facing Angle Of(Event Player), 0), 100, To World,
			Cancel Contrary Motion);
		Wait(0.050, Ignore Condition);
		Apply Impulse(Event Player, Direction From Angles(Horizontal Facing Angle Of(Event Player), 0), 100, To World,
			Cancel Contrary Motion);
		Wait(0.100, Ignore Condition);
		Apply Impulse(Event Player, Direction From Angles(Horizontal Facing Angle Of(Event Player), 0), -0.010, To World,
			Cancel Contrary Motion);
		Wait(0.050, Ignore Condition);
		Set Status(Players Within Radius(Event Player, 5, Team 2, Off), Event Player, Knocked Down, 2);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Purple), Event Player, 5);
		Skip If(Count Of(Players Within Radius(Event Player, 5, Team 2, Off)) == 0, 2);
		Damage(Players Within Radius(Event Player, 5, Team 2, Off), Event Player, Count Of(Players Within Radius(Event Player, 5, Team 2,
			Off)) * 75);
		Small Message(Event Player, Custom String("{0} {1} Damage", Ability Icon String(Hero(Zarya), Button(Ability 1)), Round To Integer(
			Count Of(Players Within Radius(Event Player, 5, Team 2, Off)) * 75 * (Event Player.DAMAGE / 100), To Nearest)));
	}
}

rule("ZARYA Secondary Launch")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Zarya;
	}

	conditions
	{
		Event Ability == Button(Secondary Fire);
	}

	actions
	{
		Apply Impulse(Victim, Up, 7, To World, Cancel Contrary Motion);
	}
}

rule("ZENYATTA Charge Counter ON")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Zenyatta;
	}

	conditions
	{
		Is Firing Secondary(Event Player) == True;
		Is Button Held(Event Player, Button(Melee)) == False;
	}

	actions
	{
		Event Player.R = 0;
		Chase Player Variable At Rate(Event Player, R, 2.500, 1, Destination and Rate);
		Wait(2.500, Abort When False);
		Set Secondary Fire Enabled(Event Player, False);
	}
}

rule("ZENYATTA Charge Counter OFF")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Zenyatta;
	}

	conditions
	{
		Is Firing Secondary(Event Player) == False;
		Event Player.R > 0;
	}

	actions
	{
		Set Secondary Fire Enabled(Event Player, True);
		Stop Chasing Player Variable(Event Player, R);
		Abort If(Is Button Held(Event Player, Button(Melee)));
		Wait(0.140, Ignore Condition);
		Play Effect(All Players(All Teams), Bad Explosion, Color(Sky Blue), Ray Cast Hit Position(Eye Position(Event Player),
			100 * Facing Direction Of(Event Player) + Eye Position(Event Player), All Players(Team 2), Event Player, True), 2);
		Play Effect(All Players(All Teams), Explosion Sound, Color(Blue), Event Player, 150);
		Damage(Players Within Radius(Ray Cast Hit Position(Eye Position(Event Player), 100 * Facing Direction Of(Event Player)
			+ Eye Position(Event Player), All Players(Team 2), Event Player, True), 5, Team 2, Surfaces), Event Player,
			Event Player.DAMAGE / 100 * 6);
		Wait(0.130, Ignore Condition);
		Abort If(Event Player.R <= 1);
		Play Effect(All Players(All Teams), Bad Explosion, Color(Sky Blue), Ray Cast Hit Position(Eye Position(Event Player),
			100 * Facing Direction Of(Event Player) + Eye Position(Event Player), All Players(Team 2), Event Player, True), 2);
		Play Effect(All Players(All Teams), Explosion Sound, Color(Blue), Event Player, 150);
		Damage(Players Within Radius(Ray Cast Hit Position(Eye Position(Event Player), 100 * Facing Direction Of(Event Player)
			+ Eye Position(Event Player), All Players(Team 2), Event Player, True), 8, Team 2, Surfaces), Event Player,
			Event Player.DAMAGE / 100 * 8);
		Wait(0.130, Ignore Condition);
		Abort If(Event Player.R <= 1.500);
		Play Effect(All Players(All Teams), Bad Explosion, Color(Sky Blue), Ray Cast Hit Position(Eye Position(Event Player),
			100 * Facing Direction Of(Event Player) + Eye Position(Event Player), All Players(Team 2), Event Player, True), 2);
		Play Effect(All Players(All Teams), Explosion Sound, Color(Blue), Event Player, 150);
		Damage(Players Within Radius(Ray Cast Hit Position(Eye Position(Event Player), 100 * Facing Direction Of(Event Player)
			+ Eye Position(Event Player), All Players(Team 2), Event Player, True), 10, Team 2, Surfaces), Event Player,
			Event Player.DAMAGE / 100 * 10);
		Wait(0.130, Ignore Condition);
		Abort If(Event Player.R <= 2);
		Play Effect(All Players(All Teams), Bad Explosion, Color(Sky Blue), Ray Cast Hit Position(Eye Position(Event Player),
			100 * Facing Direction Of(Event Player) + Eye Position(Event Player), All Players(Team 2), Event Player, True), 2);
		Play Effect(All Players(All Teams), Explosion Sound, Color(Blue), Event Player, 150);
		Damage(Players Within Radius(Ray Cast Hit Position(Eye Position(Event Player), 100 * Facing Direction Of(Event Player)
			+ Eye Position(Event Player), All Players(Team 2), Event Player, True), 12, Team 2, Surfaces), Event Player,
			Event Player.DAMAGE / 100 * 12);
		Wait(0.130, Ignore Condition);
		Abort If(Event Player.R <= 2.490);
		Play Effect(All Players(All Teams), Bad Explosion, Color(Sky Blue), Ray Cast Hit Position(Eye Position(Event Player),
			100 * Facing Direction Of(Event Player) + Eye Position(Event Player), All Players(Team 2), Event Player, True), 2);
		Play Effect(All Players(All Teams), Explosion Sound, Color(Blue), Event Player, 150);
		Damage(Players Within Radius(Ray Cast Hit Position(Eye Position(Event Player), 100 * Facing Direction Of(Event Player)
			+ Eye Position(Event Player), All Players(Team 2), Event Player, True), 15, Team 2, Surfaces), Event Player,
			Event Player.DAMAGE / 100 * 14);
		Wait(0.130, Ignore Condition);
	}
}

rule("ZENYATTA Ultimate Ying-Yang")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Zenyatta;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Damage(Players Within Radius(Event Player, 15, Team 2, Off), Event Player, Event Player.DAMAGE / 100 * 20);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Purple), Event Player, 15);
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("ZENYATTA Orbs of Tranquility")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Zenyatta;
	}

	conditions
	{
		Is Firing Primary(Event Player) == True;
	}

	actions
	{
		Heal(Players Within Radius(Ray Cast Hit Position(Eye Position(Event Player), 100 * Facing Direction Of(Event Player)
			+ Eye Position(Event Player), All Players(All Teams), Event Player, False), 5, Team 1, Off), Event Player, 100);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Yellow), Ray Cast Hit Position(Eye Position(Event Player),
			100 * Facing Direction Of(Event Player) + Eye Position(Event Player), All Players(All Teams), Event Player, True), 10);
		Wait(0.250, Ignore Condition);
	}
}

rule("============== RESET HUD SCRIPT ==============")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Event Player.HeroOfPlayer != 0;
		Hero Of(Event Player) != Event Player.HeroOfPlayer;
	}

	actions
	{
		Event Player.HUDTextHidden = Array(True, True, True, True);
		Destroy Effect(Event Player.P);
		Destroy Effect(Event Player.Q);
		Destroy Icon(Event Player.I);
		Destroy In-World Text(Event Player.I);
		Wait(0.050, Ignore Condition);
		Stop Facing(Event Player);
		Stop Damage Modification(Event Player.DamageMOD[0]);
		Stop Damage Modification(Event Player.DamageMOD[1]);
		Stop Heal Over Time(Event Player.MercyHoT);
		Stop Chasing Player Variable(Event Player, T);
		Stop Chasing Player Variable(Event Player, R);
		Wait(0.050, Ignore Condition);
		Event Player.I = 0;
		Event Player.DamageMOD = 0;
		Event Player.R = 0;
		Event Player.S = 0;
		Event Player.T = 0;
		Event Player.U = 0;
		Wait(0.050, Ignore Condition);
		Call Subroutine(EnableButtons);
		Allow Button(Event Player, Button(Ultimate));
		Set Ultimate Ability Enabled(Event Player, True);
		Set Invisible(Event Player, None);
		Set Gravity(Event Player, 100);
		Set Projectile Speed(Event Player, 100);
		Event Player.EnableFlying = False;
		Event Player.UltimateThirdPerson = False;
		Event Player.FullAutoFire = False;
	}
}

rule("Ana HUD [Updated Arkhanglesk#11200]")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Ana;
	}

	actions
	{
		Wait(0.500, Ignore Condition);
		"Poison Gas location stored below the map."
		Event Player.U = Vector(0, -500, 0);
		"Poison Gas effect."
		Create Effect(All Players(All Teams), Cloud, Color(Purple), Event Player.U, Event Player.R, Visible To Position and Radius);
		Event Player.P = Last Created Entity;
		"Poison Gas ring effect."
		Create Effect(All Players(All Teams), Ring, Color(Purple), Event Player.U, Event Player.R, Visible To Position and Radius);
		Event Player.Q = Last Created Entity;
		Set Projectile Speed(Event Player, 500);
		Event Player.HUDTextHidden = Array(False, False, True, True);
		"Set Hero HUD text."
		Event Player.PlayerHUD = Array(Ability Icon String(Hero(Soldier: 76), Button(Ability 2)), Custom String(
			"PRIMARY SHOTS HEAL IN AN AREA"), Custom String("BIOTIC DARTS"), Icon String(Poison), Custom String(
			"PRESS [ABILITY 1] TO USE"), Custom String("BIOTIC POISON GAS"));
		Event Player.HeroOfPlayer = Hero Of(Event Player);
	}
}

rule("Ashe HUD")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Ashe;
	}

	actions
	{
		Wait(0.500, Ignore Condition);
		Event Player.HUDTextHidden = Array(False, False, True, True);
		"Set Hero HUD text."
		Event Player.PlayerHUD = Array(Ability Icon String(Hero(Tracer), Button(Ability 2)), Custom String("SCOPE IN THE AIR TO FLOAT"),
			Custom String("REFLEX SENSE"), Ability Icon String(Hero(Cassidy), Button(Ability 2)), Custom String("X2 DAMAGE WHILE SCOPED"),
			Custom String("EXPLOSIVE ROUNDS"));
		Event Player.HeroOfPlayer = Hero Of(Event Player);
	}
}

rule("Baptiste HUD")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Baptiste;
	}

	actions
	{
		Wait(0.500, Ignore Condition);
		Start Damage Modification(Filtered Array(All Players(Team 2), Is Using Ultimate(Event Player) == True), Event Player, 200,
			Receivers Damagers and Damage Percent);
		Event Player.DamageMOD[0] = Last Damage Modification ID;
		Set Projectile Speed(Event Player, 500);
		Event Player.HUDTextHidden = Array(False, False, True, True);
		"Set Hero HUD text."
		Event Player.PlayerHUD = Array(Ability Icon String(Hero(Baptiste), Button(Secondary Fire)), Custom String(
			"GRENADES ALSO DEAL DAMAGE"), Custom String("NANO GRENADES"), Ability Icon String(Hero(Baptiste), Button(Crouch)),
			Custom String("HOLD [JUMP] TO FLOAT"), Custom String("HOVER BOOTS"), Ability Icon String(Hero(Baptiste), Button(Ultimate)),
			Custom String("RIFLE BECOMES FULL AUTO"), Custom String("ULTIMATE: FULL-AUTO"));
		Event Player.HeroOfPlayer = Hero Of(Event Player);
	}
}

rule("Bastion HUD [Updated Arkhanglesk#11200]")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Bastion;
	}

	actions
	{
		Wait(0.500, Ignore Condition);
		Event Player.U = Event Player;
		Create Beam Effect(All Players(All Teams), Bad Beam, Event Player, Event Player.U, Color(Sky Blue),
			Visible To Position and Radius);
		Event Player.P = Last Created Entity;
		disabled Event Player.HUDTextHidden = Array(False, True, True, True);
		Event Player.HUDTextHidden = Array(True, True, True, True);
		"Set Hero HUD text."
		disabled Event Player.PlayerHUD = Array(Ability Icon String(Hero(Bastion), Button(Ultimate)), Custom String(
			"FIRES LASER THAT DEALS AREA DMG"), Custom String("ULTIMATE: PROTON CANNON"));
		Event Player.HeroOfPlayer = Hero Of(Event Player);
	}
}

rule("Brigitte HUD")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Brigitte;
	}

	actions
	{
		Wait(0.500, Ignore Condition);
		Start Damage Modification(Filtered Array(All Players(Team 2), Is Using Ultimate(Event Player) == True), Event Player, 400,
			Receivers Damagers and Damage Percent);
		Event Player.DamageMOD[0] = Last Damage Modification ID;
		Event Player.UltimateThirdPerson = True;
		Event Player.HUDTextHidden = Array(False, False, True, True);
		"Set Hero HUD text."
		Event Player.PlayerHUD = Array(Ability Icon String(Hero(Brigitte), Button(Ability 1)), Custom String("FLAIL SHOT EXPLODES BOTS"),
			Custom String("VAMPIRE KILLER"), Ability Icon String(Hero(Brigitte), Button(Ultimate)), Custom String(
			"STUN BOTS AND GAIN X4 DMG"), Custom String("ULTIMATE: HEROIC PRESENCE"));
		Event Player.HeroOfPlayer = Hero Of(Event Player);
	}
}

rule("D.Va HUD [Updated Arkhanglesk#11200]")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		D.Va;
	}

	conditions
	{
		Event Player.HeroOfPlayer != Hero(D.Va);
	}

	actions
	{
		Wait(0.500, Ignore Condition);
		Event Player.U = False;
		Chase Player Variable At Rate(Event Player, T, 100, 1, None);
		"Original"
		Event Player.HUDTextHidden = Array(False, True, True, False);
		"Set Hero HUD text."
		Event Player.PlayerHUD = Array(Ability Icon String(Hero(D.Va), Button(Ultimate)), Custom String(
			"PRESS [RELOAD] WHEN {0} METER IS FULL", Ability Icon String(Hero(D.Va), Button(Ultimate))), Custom String("BUNNY HOP"));
		Event Player.HeroOfPlayer = Hero Of(Event Player);
	}
}

rule("Doomfist HUD [Updated Arkhanglesk#11200]")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Doomfist;
	}

	actions
	{
		Wait(0.500, Ignore Condition);
		Disallow Button(Event Player, Button(Ultimate));
		Event Player.HUDTextHidden = Array(False, True, True, True);
		"Set Hero HUD text."
		Event Player.PlayerHUD = Array(Ability Icon String(Hero(Doomfist), Button(Ultimate)), Custom String("EMPOWERS YOUR NEXT ABILITY"),
			Custom String("ULTIMATE: SUPER MOVES"));
		Event Player.HeroOfPlayer = Hero Of(Event Player);
	}
}

rule("Echo HUD [Updated by Arkhanglesk#11200]")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Echo;
	}

	actions
	{
		Wait(0.500, Ignore Condition);
		Disallow Button(Event Player, Button(Ultimate));
		Event Player.HUDTextHidden = Array(False, False, True, True);
		"Set Hero HUD text."
		Event Player.PlayerHUD = Array(Ability Icon String(Hero(Echo), Button(Secondary Fire)), Custom String(
			"ALL ABILITIES (+DMG)(+SPD)"), Custom String("ULTIMATE: OVERDRIVE"), Ability Icon String(Hero(Echo), Button(Ability 2)),
			Custom String("[ABILITY 2] POWERFUL LASER MELTS BOTS"), Custom String("QUANTUM BEAM"));
		Event Player.HeroOfPlayer = Hero Of(Event Player);
	}
}

rule("Genji HUD")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Genji;
	}

	actions
	{
		Wait(0.500, Ignore Condition);
		Event Player.HUDTextHidden = Array(False, False, False, True);
		"Set Hero HUD text."
		Event Player.PlayerHUD = Array(Custom String("æ­»"), Custom String("DEAL DAMAGE TO MARK BOTS"), Custom String("MARK OF DEATH"),
			Ability Icon String(Hero(Genji), Button(Ability 1)), Custom String("[ABILITY 1] DETONATES MARKS"), Custom String(
			"BAKUGÅ SA SERU"), Ability Icon String(Hero(Genji), Button(Ultimate)), Custom String("DOUBLE MARKS ARE APPLIED"),
			Custom String("ULTIMATE: DRAGON'S CURSE"));
		Event Player.HeroOfPlayer = Hero Of(Event Player);
	}
}

rule("Hanzo HUD")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Hanzo;
	}

	actions
	{
		Wait(0.500, Ignore Condition);
		Event Player.R = False;
		Event Player.HUDTextHidden = Array(False, True, False, True);
		"Set Hero HUD text."
		Event Player.PlayerHUD = Array(Icon String(Fire), Custom String("[SECONDARY] SWAP TO FROST ARROWS"), Custom String("FIRE ARROWS"),
			Ability Icon String(Hero(Mei), Button(Ultimate)), Custom String("[SECONDARY] SWAP TO FIRE ARROWS"), Custom String(
			"FROST ARROWS"), Ability Icon String(Hero(Hanzo), Button(Ability 1)), Custom String("[ABILITY 1] EXPLODES TARGET"),
			Custom String("DRAGON'S BREATH"));
		Event Player.HeroOfPlayer = Hero Of(Event Player);
	}
}

rule("Illari HUD [Added by Arkhanglesk#11200]")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Illari;
	}

	actions
	{
		Wait(0.500, Ignore Condition);
		"Hide Scorched Earth effect beneath the ground."
		disabled Event Player.U = Vector(0, -500, 0);
		"Scorched Earth effect 1 of 2"
		disabled Create Effect(All Players(All Teams), Ring, Color(Red), Event Player.U, 2, Visible To Position and Radius);
		disabled Event Player.Q = Last Created Entity;
		"Scorched Earth effect 2 of 2"
		disabled Create Effect(All Players(All Teams), Sphere, Color(Aqua), Event Player.U, Event Player.T / 50, Visible To Position and Radius);
		disabled Event Player.P = Last Created Entity;
		Event Player.HUDTextHidden = Array(False, False, False, True);
		"Set Hero HUD text."
		Event Player.PlayerHUD = Array(Ability Icon String(Hero(Cassidy), Button(Ultimate)), Custom String("HEADSHOTS SET BOTS ABLAZE"),
			Custom String("HEAT BLAST"), Ability Icon String(Hero(Lifeweaver), Button(Jump)), Custom String(
			"[ABILITY 1] BURNING KNOCKBACK & HEAL"), Custom String("SOLAR FLARE"), Ability Icon String(Hero(Illari), Button(Ultimate)),
			Custom String("MASSIVE INCENDIARY DAMAGE"), Custom String("ULTIMATE: BFG 9000"));
		Event Player.HeroOfPlayer = Hero Of(Event Player);
	}
}

rule("Junker Queen HUD [Added by Arkhanglesk#11200]")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Junker Queen;
	}

	actions
	{
		Wait(0.500, Ignore Condition);
		Event Player.R = False;
		Event Player.HUDTextHidden = Array(False, True, False, True);
		"Set Hero HUD text."
		Event Player.PlayerHUD = Array(Ability Icon String(Hero(LÃºcio), Button(Secondary Fire)), Custom String("[RELOAD] TO SWAP SHOUT"),
			Custom String("SONIC TREMORS"), Ability Icon String(Hero(Junker Queen), Button(Ability 1)), Custom String(
			"[RELOAD] TO SWAP SHOUT"), Custom String("BANSHEE SCREAM"), Ability Icon String(Hero(Hanzo), Button(Ability 1)), Custom String(
			"EVISCERATE ALL BOTS IN YOUR PATH"), Custom String("ULTIMATE: BUSHWHACK"));
		Event Player.HeroOfPlayer = Hero Of(Event Player);
	}
}

rule("Junkrat HUD")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Junkrat;
	}

	actions
	{
		Wait(0.500, Ignore Condition);
		Start Damage Modification(Filtered Array(Event Player, Is Using Ultimate(Event Player) == True), All Players(Team 2), 0,
			Receivers Damagers and Damage Percent);
		Event Player.DamageMOD[0] = Last Damage Modification ID;
		Start Damage Modification(Filtered Array(All Players(Team 2), Is Dead(Event Player) == True), Event Player,
			100 + Global.PlayerDeathCount * 30, Receivers Damagers and Damage Percent);
		Event Player.DamageMOD[1] = Last Damage Modification ID;
		Event Player.T = 0;
		If(Current Game Mode == Game Mode(Assault));
			Create Effect(Filtered Array(All Players(All Teams), Event Player.R[0] == 1), Light Shaft, Color(Red), Objective Position(
				Objective Index), 10, Visible To Position and Radius);
			Event Player.P = Last Created Entity;
			Create In-World Text(Filtered Array(All Players(All Teams), Event Player.R[0] == 1), Custom String("{0}RUN AWAY!{1}", Icon String(
				Warning), Icon String(Warning)), Objective Position(Objective Index), 2, Do Not Clip, Visible To Position and String, Color(
				Orange), Default Visibility);
			Event Player.I = Last Text ID;
		Else;
			Create Effect(Filtered Array(All Players(All Teams), Event Player.R[0] == 1), Light Shaft, Color(Red), Payload Position, 10,
				Visible To Position and Radius);
			Event Player.P = Last Created Entity;
			Create In-World Text(Filtered Array(All Players(All Teams), Event Player.R[0] == 1), Custom String("{0}RUN AWAY!{1}", Icon String(
				Warning), Icon String(Warning)), Payload Position, 2, Do Not Clip, Visible To Position and String, Color(Orange),
				Default Visibility);
			Event Player.I = Last Text ID;
		End;
		Event Player.HUDTextHidden = Array(False, False, False, False);
		"Set Hero HUD text."
		Event Player.PlayerHUD = Array(Icon String(Happy), Custom String("PRESS [INTERACT] TO TROLL FOR $1000"), Custom String(
			"CHAOS ROULETTE"), Icon String(Skull), Custom String("YOUR DEATHS EMPOWER TOTAL MAYHEM"), Custom String("MAXIMUM MAYHEM"),
			Ability Icon String(Hero(Junkrat), Button(Ultimate)), Custom String("PHASED-OUT AND 150% SPEED"), Custom String(
			"SUPER RIP-TIRE"));
		Event Player.HeroOfPlayer = Hero Of(Event Player);
	}
}

rule("Kiriko HUD [Added by Arkhanglesk#11200]")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Kiriko;
	}

	actions
	{
		Wait(0.500, Ignore Condition);
		Event Player.R = False;
		Event Player.HUDTextHidden = Array(False, True, False, True);
		"Set Hero HUD text."
		Event Player.PlayerHUD = Array(Ability Icon String(Hero(Kiriko), Button(Primary Fire)), Custom String(
			"[RELOAD] TO SWITCH [PRIMARY] DAMAGE"), Custom String("OFUDA"), Ability Icon String(Hero(Junker Queen), Button(Ability 2)),
			Custom String("[RELOAD] TO SWITCH [PRIMARY] DAMAGE"), Custom String("KAMI NO KATTO"), Ability Icon String(Hero(Hanzo), Button(
			Ability 1)), Custom String("DAMAGE AND KNOCKBACK BOTS"), Custom String("ULTIMATE: YÅKAI BLAST"));
		Event Player.HeroOfPlayer = Hero Of(Event Player);
	}
}

rule("Lifeweaver HUD [Added by Arkhanglesk#11200]")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Lifeweaver;
	}

	actions
	{
		Wait(0.500, Ignore Condition);
		Event Player.HUDTextHidden = Array(True, True, True, True);
		Event Player.HeroOfPlayer = Hero Of(Event Player);
	}
}

rule("Lucio HUD")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		LÃºcio;
	}

	actions
	{
		Wait(0.500, Ignore Condition);
		Set Projectile Speed(Event Player, 175);
		"Lucio's damage reduction based on movement speed."
		Start Damage Modification(Event Player, All Players(Team 2), 100 - Speed Of(Event Player), Receivers Damagers and Damage Percent);
		Event Player.DamageMOD[0] = Last Damage Modification ID;
		"Lucio's Amp It Up damage modifier."
		Start Damage Modification(Filtered Array(All Players(Team 2), Is Using Ability 2(Event Player) == True), Event Player, 200,
			Receivers Damagers and Damage Percent);
		Event Player.DamageMOD[1] = Last Damage Modification ID;
		Event Player.HUDTextHidden = Array(False, False, False, True);
		"Set Hero HUD text."
		Event Player.PlayerHUD = Array(Ability Icon String(Hero(LÃºcio), Button(Ability 2)), Custom String("X2 DMG DURING AMP IT UP"),
			Custom String("GOTTA GO FAST"), Ability Icon String(Hero(LÃºcio), Button(Secondary Fire)), Custom String(
			"[PRIMARY/SECONDARY] HEAL/DAMAGE"), Custom String("TINNITUS"), Ability Icon String(Hero(LÃºcio), Button(Ultimate)),
			Custom String("RESURRECT ALL TEAMMATES"), Custom String("ULTIMATE: PARTY ALL NIGHT"));
		Event Player.HeroOfPlayer = Hero Of(Event Player);
	}
}

rule("Mauga HUD [Added by Arkhanglesk#11200]")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Mauga;
	}

	actions
	{
		Wait(0.500, Ignore Condition);
		disabled Event Player.HUDTextHidden = Array(True, True, True, True);
		Event Player.HUDTextHidden = Array(False, True, True, True);
		Event Player.HeroOfPlayer = Hero Of(Event Player);
		"Set Hero HUD text."
		Event Player.PlayerHUD = Array(Ability Icon String(Hero(Mauga), Button(Ability 1)), Custom String("[ABILITY 1] UNSTOPPABLE CHARGE",
			Ability Icon String(Hero(Mauga), Button(Ability 1))), Custom String("BUMRUSH"));
	}
}

rule("McCree HUD")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Cassidy;
	}

	actions
	{
		Wait(0.500, Ignore Condition);
		Start Damage Modification(Filtered Array(All Players(Team 2), Is In Air(Current Array Element) == True), Event Player, 300,
			Receivers Damagers and Damage Percent);
		Event Player.DamageMOD[0] = Last Damage Modification ID;
		Event Player.UltimateThirdPerson = True;
		Event Player.HUDTextHidden = Array(False, False, False, True);
		"Set Hero HUD text."
		Event Player.PlayerHUD = Array(Ability Icon String(Hero(Cassidy), Button(Ability 1)), Custom String("HEALS AND AVOIDS DAMAGE"),
			Custom String("PHASING ROLL"), Icon String(Arrow: Up), Custom String("MASSIVE DAMAGE VS AIRBORNE TARGETS"), Custom String(
			"HAT TRICK"), Ability Icon String(Hero(Cassidy), Button(Ultimate)), Custom String("ACTIVATE THEN WAIT FOR THE MESSAGE"),
			Custom String("ULTIMATE: SHOWDOWN"));
		Event Player.HeroOfPlayer = Hero Of(Event Player);
	}
}

rule("Mei HUD")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Mei;
	}

	actions
	{
		Wait(0.500, Ignore Condition);
		Event Player.HUDTextHidden = Array(False, False, False, True);
		"Set Hero HUD text."
		Event Player.PlayerHUD = Array(Ability Icon String(Hero(Cassidy), Button(Ultimate)), Custom String("HEADSHOTS INSTANTLY FREEZE"),
			Custom String("BRAINFREEZE"), Ability Icon String(Hero(Mei), Button(Ability 1)), Custom String(
			"[ABILITY 1] FREEZE ON EXPIRATION"), Custom String("CRYO-FREEZE BLAST"), Ability Icon String(Hero(Mei), Button(Ultimate)),
			Custom String("FROZEN BOTS TAKE DMG OVER TIME"), Custom String("FROSTBURN"));
		Event Player.HeroOfPlayer = Hero Of(Event Player);
	}
}

rule("Mercy HUD")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Mercy;
	}

	actions
	{
		Wait(0.500, Ignore Condition);
		Start Damage Modification(Filtered Array(All Players(Team 2), Is Using Ultimate(Event Player) == True), Event Player, 200,
			Receivers Damagers and Damage Percent);
		Event Player.DamageMOD[0] = Last Damage Modification ID;
		Create Effect(All Players(All Teams), Ring, Color(Yellow), Event Player, 15, Visible To Position and Radius);
		Event Player.Q = Last Created Entity;
		Create Icon(All Players(All Teams), Event Player, Plus, Visible To and Position, Color(Yellow), False);
		Event Player.I = Last Created Entity;
		Set Projectile Speed(Event Player, 500);
		Event Player.HUDTextHidden = Array(False, False, False, True);
		"Set Hero HUD text."
		Event Player.PlayerHUD = Array(Icon String(Heart), Custom String("[MELEE] +10% DMG/KILL"), Custom String("CHARM PUNCH"),
			Ability Icon String(Hero(Mercy), Button(Ability 2)), Custom String("RESURRECTIONS GRANT +10% DMG"), Custom String(
			"REDEMPTION"), Ability Icon String(Hero(Baptiste), Button(Ability 1)), Custom String("15M PASSIVE HEALING AURA"),
			Custom String("ANGELIC PRESENCE"));
		Event Player.HeroOfPlayer = Hero Of(Event Player);
	}
}

rule("Moira HUD [Updated by Arkhanglesk#11200]")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Moira;
	}

	actions
	{
		Wait(0.500, Ignore Condition);
		Event Player.U = Vector(0, -500, 0);
		Create Effect(All Players(All Teams), Bad Aura, Color(Purple), Event Player.U, 3, Visible To Position and Radius);
		Event Player.Q = Last Created Entity;
		Create Effect(All Players(All Teams), Sphere, Color(Purple), Event Player.U, Event Player.T / 4, Visible To Position and Radius);
		Event Player.P = Last Created Entity;
		"Disabled to save server resources. Replaced by disabling inf ult duration & using in-game ult timer"
		disabled Create In-World Text(Filtered Array(All Players(All Teams), Is Using Ultimate(Event Player) == True), Custom String("",
			Round To Integer(Event Player.T, Down)), Event Player.U + Vector(0, 1, 0), 2, Do Not Clip, Visible To Position and String,
			Color(White), Default Visibility);
		Event Player.I = Last Text ID;
		Event Player.T = 0;
		Event Player.UltimateThirdPerson = True;
		Set Projectile Speed(Event Player, 10);
		Event Player.HUDTextHidden = Array(False, False, True, True);
		"Set Hero HUD text."
		Event Player.PlayerHUD = Array(Ability Icon String(Hero(Moira), Button(Secondary Fire)), Custom String("ROOTS ENEMIES WITH DRAIN"),
			Custom String("LETHARGIC DRAIN"), Ability Icon String(Hero(Zarya), Button(Ultimate)), Custom String(
			"CHANNEL ENERGY TO CREATE A BOMB"), Custom String("ULTIMATE: COALESCENCE BOMB"));
		Event Player.HeroOfPlayer = Hero Of(Event Player);
	}
}

rule("Orisa HUD [Updated for OW2 rework by Arkhanglesk#11200]")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Orisa;
	}

	actions
	{
		Wait(0.500, Ignore Condition);
		Event Player.T = 0;
		Chase Player Variable At Rate(Event Player, T, 100, 3, None);
		Event Player.HUDTextHidden = Array(False, False, True, False);
		"Set Hero HUD text."
		Event Player.PlayerHUD = Array(Ability Icon String(Hero(Doomfist), Button(Secondary Fire)), Custom String("[MELEE] TO KNOCKBACK"),
			Custom String("ROCKET PUNCH"), Ability Icon String(Hero(Soldier: 76), Button(Ability 2)), Custom String(
			"[ABILITY 1] HEAL 25% HP"), Custom String("FORTIFYING REPAIRS"));
		Event Player.HeroOfPlayer = Hero Of(Event Player);
	}
}

rule("Pharah HUD")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Pharah;
	}

	actions
	{
		Wait(0.500, Ignore Condition);
		Event Player.T = 0;
		Chase Player Variable At Rate(Event Player, T, 999, 2, None);
		Chase Player Variable At Rate(Event Player, S, 0, 1, None);
		Start Damage Modification(All Players(Team 2), Event Player, 100 + Event Player.T / 4, Receivers Damagers and Damage Percent);
		Event Player.DamageMOD[0] = Last Damage Modification ID;
		Start Damage Modification(Filtered Array(Event Player, Is Button Held(Event Player, Button(Secondary Fire)) == True), All Players(
			Team 2), 25, Receivers Damagers and Damage Percent);
		Event Player.DamageMOD[1] = Last Damage Modification ID;
		Event Player.HUDTextHidden = Array(False, False, False, False);
		"Set Hero HUD text."
		Event Player.PlayerHUD = Array(Icon String(Radioactive), Custom String("INCREASES DAMAGE THE HIGHER IT IS"), Custom String(
			"FUSION REACTOR [100-999]"), Ability Icon String(Hero(Doomfist), Button(Ability 2)), Custom String(
			"[Ability 2] CREATES A DELAYED BLAST"), Custom String("BUNKER BUSTER: -100% POWER"), Ability Icon String(Hero(Reinhardt),
			Button(Ability 1)), Custom String("[SECONDARY] HOLD TO BOOST"), Custom String("BOOSTER DASH"));
		Event Player.HeroOfPlayer = Hero Of(Event Player);
	}
}

rule("Ramattra HUD")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Ramattra;
	}

	actions
	{
		Wait(0.500, Ignore Condition);
		Event Player.HUDTextHidden = Array(True, True, True, False);
		"Set Hero HUD text."
		disabled Event Player.PlayerHUD = Array(Ability Icon String(Hero(Zenyatta), Button(Secondary Fire)), Custom String(
			"[SECONDARY] DMG IN AN AREA"), Custom String("ORBS OF ANNIHILATION"), Ability Icon String(Hero(Zenyatta), Button(
			Primary Fire)), Custom String("[PRIMARY] HEAL IN AN AREA"), Custom String("ORBS OF TRANQUILITY"), Ability Icon String(Hero(
			Zenyatta), Button(Ultimate)), Custom String("DEAL AREA DAMAGE WITH ULTIMATE"), Custom String("ULTIMATE: YING-YANG"));
		Event Player.HeroOfPlayer = Hero Of(Event Player);
	}
}

rule("Reaper HUD")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reaper;
	}

	actions
	{
		Wait(0.500, Ignore Condition);
		Start Damage Modification(Filtered Array(All Players(Team 2), Event Player.R == 1), Event Player, 300,
			Receivers Damagers and Damage Percent);
		Event Player.DamageMOD[0] = Last Damage Modification ID;
		Create Effect(Filtered Array(All Players(All Teams), Event Player.R == 1), Cloud, Color(Purple), Event Player, 1,
			Visible To Position and Radius);
		Event Player.P = Last Created Entity;
		Event Player.HUDTextHidden = Array(False, False, False, True);
		"Set Hero HUD text."
		Event Player.PlayerHUD = Array(Ability Icon String(Hero(Reaper), Button(Ability 1)), Custom String("[ABILITY 1] HEALS 10% HP/SEC"),
			Custom String("WRAITH SUCCOR"), Ability Icon String(Hero(Reaper), Button(Ability 2)), Custom String(
			"[ABILITY 2] FREEZES ENEMIES"), Custom String("FROZEN SHADOWSTEP"), Ability Icon String(Hero(Reaper), Button(Ultimate)),
			Custom String("[INTERACT] X3 DAMAGE -15% HP/SEC"), Custom String("CREEPING DEATH"));
		Event Player.HeroOfPlayer = Hero Of(Event Player);
	}
}

rule("Reinhardt HUD")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reinhardt;
	}

	actions
	{
		Wait(0.500, Ignore Condition);
		Start Damage Modification(Filtered Array(All Players(Team 2), Is Using Ability 1(Event Player) == True), Event Player, Speed Of(
			Event Player) * 10, Receivers Damagers and Damage Percent);
		Event Player.DamageMOD[0] = Last Damage Modification ID;
		Event Player.HUDTextHidden = Array(False, False, False, True);
		"Set Hero HUD text."
		Event Player.PlayerHUD = Array(Ability Icon String(Hero(Reinhardt), Button(Secondary Fire)), Custom String(
			"HEAL 5% HP/SEC WHILE DEPLOYED"), Custom String("HEALING SHIELD"), Ability Icon String(Hero(Reinhardt), Button(Ability 1)),
			Custom String("[ABILITY 1] (X6 DMG) & (X3 SPEED)"), Custom String("SONIC CHARGE"), Ability Icon String(Hero(Reinhardt), Button(
			Ability 2)), Custom String("[ABILITY 2] LIGHTS BOTS ON FIRE"), Custom String("FLAMING STRIKE"));
		Event Player.HeroOfPlayer = Hero Of(Event Player);
	}
}

rule("Roadhog HUD")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Roadhog;
	}

	actions
	{
		Wait(0.500, Ignore Condition);
		Start Damage Modification(Filtered Array(All Players(Team 2), Event Player.S == 1), Event Player, 200,
			Receivers Damagers and Damage Percent);
		Event Player.DamageMOD[0] = Last Damage Modification ID;
		Event Player.R = False;
		Create Effect(Filtered Array(All Players(All Teams), Event Player.S == 1), Good Aura, Color(Orange), Event Player, 1.500,
			Visible To Position and Radius);
		Event Player.P = Last Created Entity;
		Event Player.HUDTextHidden = Array(False, False, False, True);
		"Set Hero HUD text."
		Event Player.PlayerHUD = Array(Ability Icon String(Hero(Roadhog), Button(Ability 1)), Custom String(
			"[ABILITY 1] SHOOT/MELEE AFTER HOOK"), Custom String("HOOK COMBO"), Ability Icon String(Hero(Roadhog), Button(Ability 2)),
			Custom String("[SECONDARY] HOLD TO TRAMPLE BOTS"), Custom String("ASTHMATIC TRAMPLE"), Ability Icon String(Hero(Roadhog),
			Button(Ultimate)), Custom String("STUNS DAMAGED BOTS"), Custom String("ULTIMATE: WARTHOG"));
		Event Player.HeroOfPlayer = Hero Of(Event Player);
	}
}

rule("Sigma HUD")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Sigma;
	}

	actions
	{
		Wait(0.500, Ignore Condition);
		Event Player.T = 100;
		Chase Player Variable At Rate(Event Player, T, 100, 10, Destination and Rate);
		Event Player.HUDTextHidden = Array(False, False, True, False);
		"Set Hero HUD text."
		Event Player.PlayerHUD = Array(Ability Icon String(Hero(Doomfist), Button(Secondary Fire)), Custom String("[MELEE] TO PUSH"),
			Custom String("KINETIC REPULSION"), Ability Icon String(Hero(Sigma), Button(Ability 1)), Custom String("[ABILITY 1] TO PULL"),
			Custom String("KINETIC ATTRACTION"));
		Event Player.HeroOfPlayer = Hero Of(Event Player);
	}
}

rule("Sojourn HUD [Added by Arkhanglesk#11200]")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Sojourn;
	}

	actions
	{
		Wait(0.500, Ignore Condition);
		Event Player.HUDTextHidden = Array(False, False, True, True);
		Event Player.HeroOfPlayer = Hero Of(Event Player);
		"Set Hero HUD text."
		Event Player.PlayerHUD = Array(Ability Icon String(Hero(Sojourn), Button(Ability 1)), Custom String(
			"[ABILITY 1] SLIDE TO SWEEP BOTS"), Custom String("ROCKET BOOST SLIDE"), Ability Icon String(Hero(Sojourn), Button(
			Secondary Fire)), Custom String("HIGH-IMPACT ROUNDS PENETRATE WALLS"), Custom String("ULTIMATE: SUPER RAILGUN"));
	}
}

rule("Soldier: 76 HUD")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Soldier: 76;
	}

	actions
	{
		Wait(0.500, Ignore Condition);
		Event Player.HUDTextHidden = Array(False, True, True, True);
		"Set Hero HUD text."
		Event Player.PlayerHUD = Array(Ability Icon String(Hero(Echo), Button(Ability 2)), Custom String(
			"FIRE PULSE CANNONS FROM AN AIRCRAFT"), Custom String("ULTIMATE: C-130X AIRSTRIKE"));
		Event Player.HeroOfPlayer = Hero Of(Event Player);
	}
}

rule("Sombra HUD")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Sombra;
	}

	actions
	{
		Wait(0.500, Ignore Condition);
		Event Player.HUDTextHidden = Array(False, False, False, True);
		"Set Hero HUD text."
		Event Player.PlayerHUD = Array(Ability Icon String(Hero(Sombra), Button(Secondary Fire)), Custom String(
			"X2 DMG TO HACKED OR FLANKED BOTS"), Custom String("1337 HACKER"), Ability Icon String(Hero(Echo), Button(Ultimate)),
			Custom String("AVOID DMG AND HEAL 10% HP/SEC"), Custom String("PHASED STEALTH"), Ability Icon String(Hero(Sombra), Button(
			Ultimate)), Custom String("ROOT ALL BOTS AND GAIN INVISIBILITY"), Custom String("ULTIMATE: SUPER EMP"));
		Event Player.HeroOfPlayer = Hero Of(Event Player);
	}
}

rule("Symmetra HUD")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Symmetra;
	}

	actions
	{
		Wait(0.500, Ignore Condition);
		"Hide mine location at start of the game, beneath the ground."
		Event Player.U = Vector(0, -500, 0);
		"Impulse mine cooldown."
		Event Player.T = 100;
		Chase Player Variable At Rate(Event Player, T, 100, 20, None);
		"Impulse mine orb effect."
		Create Effect(All Players(All Teams), Orb, Color(Blue), Event Player.U, 2, Visible To Position and Radius);
		Event Player.Q = Last Created Entity;
		"Impulse mine sphere effect."
		Create Effect(All Players(All Teams), Sphere, Color(Aqua), Event Player.U, Event Player.T / 50, Visible To Position and Radius);
		Event Player.P = Last Created Entity;
		Disallow Button(Event Player, Button(Ability 2));
		Disallow Button(Event Player, Button(Secondary Fire));
		Event Player.HUDTextHidden = Array(False, False, True, True);
		"Set Hero HUD text."
		Event Player.PlayerHUD = Array(Ability Icon String(Hero(Wrecking Ball), Button(Ability 2)), Custom String(
			"PRESS [ABILITY 2] TO PLACE"), Custom String("PROXIMITY IMPULSE MINE"), Ability Icon String(Hero(Orisa), Button(
			Secondary Fire)), Custom String("[SECONDARY] HOLD TO AUTO-FIRE"), Custom String("AUTO-CHARGE"));
		Event Player.HeroOfPlayer = Hero Of(Event Player);
	}
}

rule("Torbjorn HUD [Updated by Arkhanglesk#11200]")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		TorbjÃ¶rn;
	}

	actions
	{
		Wait(0.500, Ignore Condition);
		Event Player.HUDTextHidden = Array(False, False, False, True);
		"Overload damage mod."
		Start Damage Modification(Filtered Array(All Players(Team 2), Is Using Ability 2(Event Player) == True), Event Player, 200,
			Receivers Damagers and Damage Percent);
		Event Player.DamageMOD[0] = Last Damage Modification ID;
		"Set Hero HUD text."
		Event Player.PlayerHUD = Array(Ability Icon String(Hero(TorbjÃ¶rn), Button(Melee)), Custom String("[MELEE] TO SET ON FIRE"),
			Custom String("MOLTEN PUNCH"), Ability Icon String(Hero(Winston), Button(Ability 1)), Custom String("[CROUCH]+[JUMP] TO LEAP"),
			Custom String("DWARVEN LEAP"), Ability Icon String(Hero(TorbjÃ¶rn), Button(Ability 2)), Custom String(
			"[ABILITY 2] ENHANCES ABILITIES"), Custom String("DWARVEN RAGE"));
		Event Player.HeroOfPlayer = Hero Of(Event Player);
	}
}

rule("Tracer HUD")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Tracer;
	}

	actions
	{
		Wait(0.500, Ignore Condition);
		Disallow Button(Event Player, Button(Ultimate));
		Event Player.T = False;
		Event Player.R = 0;
		Event Player.HUDTextHidden = Array(False, False, False, True);
		"Set Hero HUD text."
		Event Player.PlayerHUD = Array(Ability Icon String(Hero(Tracer), Button(Ability 1)), Custom String(
			"BLINK INTO A BOT TO FREEZE THEM"), Custom String("BLINK STASIS"), Ability Icon String(Hero(Tracer), Button(Ability 2)),
			Custom String("RECALL ALWAYS HEALS MAX HP"), Custom String("TOTAL RECALL"), Ability Icon String(Hero(Tracer), Button(
			Ultimate)), Custom String("SLOW TIME AND INSTANTLY KILL"), Custom String("ULTIMATE: CHRONOKINESIS"));
		Event Player.HeroOfPlayer = Hero Of(Event Player);
	}
}

rule("Widowmaker HUD")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Widowmaker;
	}

	actions
	{
		Wait(0.500, Ignore Condition);
		Chase Player Variable At Rate(Event Player, T, 12, 14, Destination and Rate);
		Event Player.HUDTextHidden = Array(False, False, False, True);
		"Set Hero HUD text."
		Event Player.PlayerHUD = Array(Ability Icon String(Hero(Cassidy), Button(Ability 2)), Custom String(
			"CHARGED SHOTS DEAL EXPLOSIVE DMG"), Custom String("ANTI-MATERIEL RIFLE"), Ability Icon String(Hero(Widowmaker), Button(
			Ability 2)), Custom String("[ABILITY 2] FREEZES BOTS"), Custom String("FROST MINE"), Ability Icon String(Hero(Baptiste),
			Button(Ultimate)), Custom String("LOADS 4 WALL-PENETRATING ROUNDS"), Custom String("ULTIMATE: RAILGUN"));
		Event Player.HeroOfPlayer = Hero Of(Event Player);
	}
}

rule("Winston HUD")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Winston;
	}

	actions
	{
		Wait(0.500, Ignore Condition);
		Event Player.T = 0;
		Set Ability 1 Enabled(Event Player, False);
		Event Player.HUDTextHidden = Array(False, False, False, False);
		"Set Hero HUD text."
		Event Player.PlayerHUD = Array(Ability Icon String(Hero(Winston), Button(Ultimate)), Custom String("DEAL DAMAGE TO INCREASE RAGE"),
			Custom String("RAGE"), Ability Icon String(Hero(Doomfist), Button(Ability 2)), Custom String("[ABILITY 1] SLAM TO KNOCKDOWN"),
			Custom String("VENTING RAGE"), Ability Icon String(Hero(Winston), Button(Ability 2)), Custom String(
			"[ABILITY 2] HEALS 25% HP"), Custom String("HEALING BARRIER"));
		Event Player.HeroOfPlayer = Hero Of(Event Player);
	}
}

rule("Wrecking Ball HUD")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Wrecking Ball;
	}

	actions
	{
		Wait(0.500, Ignore Condition);
		Disallow Button(Event Player, Button(Ultimate));
		Event Player.HUDTextHidden = Array(False, False, True, True);
		"Set Hero HUD text."
		Event Player.PlayerHUD = Array(Ability Icon String(Hero(Bastion), Button(Secondary Fire)), Custom String(
			"[ABILITY 2] HEAL 35% HP"), Custom String("AUTO-REPAIRS"), Ability Icon String(Hero(Moira), Button(Ultimate)), Custom String(
			"MASSIVE DAMAGE FROM THE SKY"), Custom String("ULTIMATE: ORBITAL DROP"));
		Event Player.HeroOfPlayer = Hero Of(Event Player);
	}
}

rule("Zarya HUD")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Zarya;
	}

	actions
	{
		Wait(0.500, Ignore Condition);
		Event Player.HUDTextHidden = Array(False, False, True, True);
		"Set Hero HUD text."
		Event Player.PlayerHUD = Array(Ability Icon String(Hero(Zarya), Button(Ability 1)), Custom String(
			"[ABILITY 1] KNOCKDOWN AND HEAL"), Custom String("BARRIER TACKLE"), Ability Icon String(Hero(Zarya), Button(Ability 2)),
			Custom String("EXTRA DMG PER BOT TACKLED"), Custom String("MAGNETIC CRUSH"));
		Event Player.HeroOfPlayer = Hero Of(Event Player);
	}
}

rule("Zenyatta HUD")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Zenyatta;
	}

	actions
	{
		Wait(0.500, Ignore Condition);
		Set Projectile Speed(Event Player, 500);
		Event Player.HUDTextHidden = Array(False, False, False, True);
		"Set Hero HUD text."
		Event Player.PlayerHUD = Array(Ability Icon String(Hero(Zenyatta), Button(Primary Fire)), Custom String("[PRIMARY] AOE HEAL"),
			Custom String("ORBS OF TRANQUILITY"), Ability Icon String(Hero(Zenyatta), Button(Secondary Fire)), Custom String(
			"[SECONDARY] AOE DAMAGE"), Custom String("ORBS OF ANNIHILATION"), Ability Icon String(Hero(Zenyatta), Button(Ultimate)),
			Custom String("MASSIVE AOE DMG & HEAL"), Custom String("ULTIMATE: YING-YANG"));
		Event Player.HeroOfPlayer = Hero Of(Event Player);
	}
}

rule("============== RELIC HUD and Effects ==============")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	actions
	{
		Create HUD Text(Filtered Array(Event Player, Event Player.RelicSelected == 0), Custom String("{0}", Icon String(Plus)),
			Is Button Held(Event Player, Button(Crouch)) == True ? Global.RelicDescriptions[0] : Custom String(
			"(+HEALING)(+DAMAGE)(+REGEN)"), Custom String("PURIFIED RELIC"), Left, 10, Color(Lime Green), Color(Yellow), Color(Lime Green),
			Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(Event Player, Event Player.RelicSelected == 1), Custom String("{0}", Icon String(Spiral)),
			Is Button Held(Event Player, Button(Crouch)) == True ? Global.RelicDescriptions[1] : Custom String("(+SPD)(+DMG)(-RESPAWN)"),
			Custom String("VORTEX RELIC: {0}% DMG", Speed Of(Event Player) * 5 + 100), Left, 10, Color(Sky Blue), Color(Yellow), Color(
			Sky Blue), Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(Event Player, Event Player.RelicSelected == 2), Custom String("{0}", Icon String(Skull)),
			Is Button Held(Event Player, Button(Crouch)) == True ? Global.RelicDescriptions[2] : Custom String("(+DMG)(-ARMOR)(+ULTGEN)"),
			Custom String("CORRUPTED RELIC"), Left, 10, Color(Orange), Color(Yellow), Color(Orange), Visible To and String,
			Default Visibility);
		Create HUD Text(Filtered Array(Event Player, Event Player.RelicSelected == 3), Custom String("{0}", Icon String(Moon)),
			Is Button Held(Event Player, Button(Crouch)) == True ? Global.RelicDescriptions[3] : Custom String("(+ARMOR)(+DMG)(+SHIELD)"),
			Custom String("AEGIS RELIC: {0}%", Event Player.RelicVariable1), Left, 10, Color(Turquoise), Color(Yellow), Color(Turquoise),
			Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(Event Player, Event Player.RelicSelected == 4), Custom String("{0}", Icon String(Bolt)),
			Is Button Held(Event Player, Button(Crouch)) == True ? Global.RelicDescriptions[4] : Custom String(
			"(+DMG)(+SPD)(+HP/KILL)(-CD)"), Custom String("HERO RELIC"), Left, 10, Color(Purple), Color(Yellow), Color(Purple),
			Visible To and String, Default Visibility);
		Create Effect(Filtered Array(All Players(All Teams), Event Player.RelicEquipped == 3 && Event Player.AegisRelicEffect == True),
			Sphere, Color(Sky Blue), Event Player, 1.500, Visible To Position and Radius);
	}
}

rule("RELIC Button")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Is In Spawn Room(Event Player) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Button Held(Event Player, Button(Crouch)) == False;
		Hero Of(Event Player) == Event Player.HeroOfPlayer;
		Event Player.RelicReadyToEquip == True;
	}

	actions
	{
		Event Player.RelicSelected += 1;
		Event Player.RelicSelected = Event Player.RelicSelected % 5;
		If(Event Player.RelicEquipped != -1);
			Call Subroutine(ResetRelicStatus);
		End;
		If(Event Player.RelicSelected == 0);
			Small Message(Event Player, Custom String(" {0} EXIT SPAWN TO EQUIP PURIFIED", Icon String(Plus)));
		Else If(Event Player.RelicSelected == 1);
			Small Message(Event Player, Custom String(" {0} EXIT SPAWN TO EQUIP VORTEX", Icon String(Spiral)));
		Else If(Event Player.RelicSelected == 2);
			Small Message(Event Player, Custom String(" {0} EXIT SPAWN TO EQUIP CORRUPTED", Icon String(Skull)));
		Else If(Event Player.RelicSelected == 3);
			Small Message(Event Player, Custom String(" {0} EXIT SPAWN TO EQUIP AEGIS", Icon String(Moon)));
		Else If(Event Player.RelicSelected == 4);
			Small Message(Event Player, Custom String(" {0} EXIT SPAWN TO EQUIP HERO", Icon String(Bolt)));
		End;
		Wait(0.250, Ignore Condition);
	}
}

rule("PURIFIED Relic")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is In Spawn Room(Event Player) == False;
		Event Player.RelicSelected == 0;
		Event Player.RelicEquipped != 0;
	}

	actions
	{
		Wait(0.250, Abort When False);
		Start Heal Over Time(Event Player, Null, 9999, Max Health(Event Player) * 0.050);
		Event Player.RelicVariable1 = Last Heal Over Time ID;
		Set Healing Dealt(Event Player, 200);
		Set Healing Received(Event Player, 200);
		Start Damage Modification(Normalized Health(Event Player) == 1 ? All Players(Team 2) : Null, Event Player, 150,
			Receivers Damagers and Damage Percent);
		Event Player.RelicVariable2 = Last Damage Modification ID;
		Small Message(Event Player, Custom String(" {0} PURIFIED EQUIPPED", Icon String(Plus)));
		Event Player.RelicEquipped = 0;
	}
}

rule("VORTEX Relic")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is In Spawn Room(Event Player) == False;
		Event Player.RelicSelected == 1;
		Event Player.RelicEquipped != 1;
	}

	actions
	{
		Wait(0.250, Abort When False);
		Event Player.MOVEMENT += 100;
		Set Move Speed(Event Player, Event Player.MOVEMENT);
		Set Respawn Max Time(Event Player, 6);
		Start Damage Modification(All Players(Team 2), Event Player, Speed Of(Event Player) * 5 + 100,
			Receivers Damagers and Damage Percent);
		Event Player.RelicVariable2 = Last Damage Modification ID;
		Small Message(Event Player, Custom String(" {0} VORTEX EQUIPPED", Icon String(Spiral)));
		Event Player.RelicEquipped = 1;
	}
}

rule("CORRUPTED Relic")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is In Spawn Room(Event Player) == False;
		Event Player.RelicSelected == 2;
		Event Player.RelicEquipped != 2;
	}

	actions
	{
		Wait(0.250, Abort When False);
		Event Player.ARMOR += 25;
		Start Damage Modification(All Players(Team 2), Event Player, 200, Receivers Damagers and Damage Percent);
		Event Player.RelicVariable2 = Last Damage Modification ID;
		Small Message(Event Player, Custom String(" {0} CORRUPTED EQUIPPED", Icon String(Skull)));
		Event Player.RelicEquipped = 2;
	}
}

rule("CORRUPTED Ultimate Generation")
{
	event
	{
		Player Dealt Final Blow;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.RelicEquipped == 2;
		Is Using Ultimate(Event Player) == False;
	}

	actions
	{
		Set Ultimate Charge(Event Player, Ultimate Charge Percent(Event Player) + 5);
	}
}

rule("AEGIS Relic")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is In Spawn Room(Event Player) == False;
		Event Player.RelicSelected == 3;
		Event Player.RelicEquipped != 3;
	}

	actions
	{
		Wait(0.250, Abort When False);
		If(Array Contains(Global.Armor75, Hero Of(Event Player)) == True);
			Event Player.ARMOR -= 10;
		Else;
			Event Player.ARMOR -= 25;
		End;
		Event Player.RelicVariable1 = 100;
		Event Player.AegisRelicEffect = False;
		Event Player.RelicEquipped = 3;
		Start Damage Modification(All Players(Team 2), Event Player, Count Of(Filtered Array(Players Within Radius(Event Player, 10,
			Team 2, Off), Is Alive(Current Array Element))) * 25 + 100, Receivers Damagers and Damage Percent);
		Event Player.RelicVariable2 = Last Damage Modification ID;
		Small Message(Event Player, Custom String(" {0} AEGIS EQUIPPED", Icon String(Moon)));
	}
}

rule("AEGIS Shield Activation")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Event Player.RelicEquipped == 3;
		Event Player.RelicVariable1 == 100;
		Normalized Health(Event Player) <= 0.050;
	}

	actions
	{
		Event Player.AegisRelicEffect = True;
		Set Status(Event Player, Null, Invincible, 5);
		Call Subroutine(ClearAllStatus);
		Start Heal Over Time(Event Player, Null, 4, Max Health(Event Player) * 0.250);
		Event Player.RelicVariable1 = 0;
		If(Hero Of(Event Player) == Hero(Reaper) && Event Player.R == 1);
			Call Subroutine(ReaperCreepingDeathOff);
		End;
		Wait(5, Ignore Condition);
		Event Player.AegisRelicEffect = False;
		Chase Player Variable At Rate(Event Player, RelicVariable1, 100, 2.500, Destination and Rate);
		Clear Status(Event Player, Unkillable);
	}
}

rule("AEGIS Unkillable")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Event Player.RelicEquipped == 3;
		Event Player.RelicVariable1 == 100;
	}

	actions
	{
		Set Status(Event Player, Null, Unkillable, 9999);
		Stop Chasing Player Variable(Event Player, RelicVariable1);
		Small Message(Event Player, Custom String("{0} AEGIS CHARGED!", Icon String(Moon)));
	}
}

rule("HERO Relic")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is In Spawn Room(Event Player) == False;
		Event Player.RelicSelected == 4;
		Event Player.RelicEquipped != 4;
	}

	actions
	{
		Wait(0.250, Abort When False);
		Event Player.MOVEMENT += 25;
		Set Move Speed(Event Player, Event Player.MOVEMENT);
		Start Damage Modification(Normalized Health(Event Player) == 1 ? All Players(Team 2) : Null, Event Player, 125,
			Receivers Damagers and Damage Percent);
		Event Player.RelicVariable2 = Last Damage Modification ID;
		Small Message(Event Player, Custom String(" {0} HERO EQUIPPED", Icon String(Bolt)));
		Event Player.RelicEquipped = 4;
	}
}

rule("HERO Heal on Kill")
{
	event
	{
		Player Earned Elimination;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.RelicEquipped == 4;
	}

	actions
	{
		Start Heal Over Time(Event Player, Null, 5, Max Health(Event Player) * 0.050);
	}
}

rule("HERO Cooldown Reduction")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.RelicEquipped == 4;
	}

	actions
	{
		Set Ability Cooldown(Event Player, Button(Secondary Fire), Ability Cooldown(Event Player, Button(Secondary Fire)) - 1);
		Set Ability Cooldown(Event Player, Button(Ability 1), Ability Cooldown(Event Player, Button(Ability 1)) - 1);
		Set Ability Cooldown(Event Player, Button(Ability 2), Ability Cooldown(Event Player, Button(Ability 2)) - 1);
		Wait(0.500, Ignore Condition);
	}
}

rule("Subroutine - (ClearAllStatus)")
{
	event
	{
		Subroutine;
		ClearAllStatus;
	}

	actions
	{
		Clear Status(Event Player, Rooted);
		Clear Status(Event Player, Stunned);
		Clear Status(Event Player, Knocked Down);
		Clear Status(Event Player, Frozen);
		Clear Status(Event Player, Asleep);
	}
}

rule("Subroutine - (EnableButtons) [Broken in OW2; fixed by Arkhanglesk#11200]")
{
	event
	{
		Subroutine;
		EnableButtons;
	}

	actions
	{
		Allow Button(Event Player, Button(Primary Fire));
		Set Primary Fire Enabled(Event Player, True);
		Allow Button(Event Player, Button(Secondary Fire));
		Set Secondary Fire Enabled(Event Player, True);
		Allow Button(Event Player, Button(Ability 1));
		Set Ability 1 Enabled(Event Player, True);
		Allow Button(Event Player, Button(Ability 2));
		Set Ability 2 Enabled(Event Player, True);
		Allow Button(Event Player, Button(Melee));
		Allow Button(Event Player, Button(Jump));
		Allow Button(Event Player, Button(Crouch));
		Allow Button(Event Player, Button(Ultimate));
	}
}

rule("Subroutine - (DisableButtons) [Broken in OW2; updated by Arkhanglesk#11200]")
{
	event
	{
		Subroutine;
		DisableButtons;
	}

	actions
	{
		Disallow Button(Event Player, Button(Primary Fire));
		Set Primary Fire Enabled(Event Player, False);
		Disallow Button(Event Player, Button(Secondary Fire));
		Set Secondary Fire Enabled(Event Player, False);
		Disallow Button(Event Player, Button(Ability 1));
		Set Ability 1 Enabled(Event Player, False);
		Disallow Button(Event Player, Button(Ability 2));
		Set Ability 2 Enabled(Event Player, False);
		Disallow Button(Event Player, Button(Melee));
		Disallow Button(Event Player, Button(Jump));
		Disallow Button(Event Player, Button(Crouch));
		Disallow Button(Event Player, Button(Ultimate));
	}
}

rule("Subroutine - (ResetRelicStatus)")
{
	event
	{
		Subroutine;
		ResetRelicStatus;
	}

	actions
	{
		"Purified"
		If(Event Player.RelicEquipped == 0);
			Set Healing Dealt(Event Player, 100);
			Set Healing Received(Event Player, 100);
			Stop Heal Over Time(Event Player.RelicVariable1);
		"Vortex"
		Else If(Event Player.RelicEquipped == 1);
			Event Player.MOVEMENT -= 100;
			Set Move Speed(Event Player, Event Player.MOVEMENT);
			Set Respawn Max Time(Event Player, 10);
		"Corrupted"
		Else If(Event Player.RelicEquipped == 2);
			Event Player.ARMOR -= 25;
		"Aegis"
		Else If(Event Player.RelicEquipped == 3);
			If(Array Contains(Global.Armor75, Hero Of(Event Player)) == True);
				Event Player.ARMOR += 10;
			Else;
				Event Player.ARMOR += 25;
			End;
			Clear Status(Event Player, Unkillable);
			Event Player.AegisRelicEffect = False;
		"Hero"
		Else If(Event Player.RelicEquipped == 4);
			Event Player.MOVEMENT -= 25;
			Set Move Speed(Event Player, Event Player.MOVEMENT);
		End;
		Event Player.RelicVariable1 = 0;
		Stop Damage Modification(Event Player.RelicVariable2);
		"Unequip a Relic."
		Event Player.RelicEquipped = -1;
	}
}

rule("Subroutine - (MoiraExplosion)")
{
	event
	{
		Subroutine;
		MoiraExplosion;
	}

	actions
	{
		Damage(Players Within Radius(Event Player.U, Event Player.T / 4, Team 2, Off), Event Player,
			Event Player.T * 8 * Global.SuperbotLevel);
		Play Effect(All Players(All Teams), Bad Explosion, Color(Purple), Event Player.U, 20);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Purple), Event Player.U, 30);
		Play Effect(All Players(All Teams), Ring Explosion Sound, Color(Purple), Event Player, 200);
	}
}

rule("Subroutine - (ReaperCreepingDeathOff)")
{
	event
	{
		Subroutine;
		ReaperCreepingDeathOff;
	}

	actions
	{
		Stop All Damage Over Time(Event Player);
		Stop Camera(Event Player);
		Event Player.R = 0;
		Small Message(Event Player, Custom String("{0} CREEPING DEATH DISABLED", Ability Icon String(Hero(Reaper), Button(Ultimate))));
	}
}

rule("Flying Toggle [Updated by Arkhanglesk#11200]")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == False;
		Is Button Held(Event Player, Button(Reload)) == True;
		(Has Status(Event Player, Hacked) || Has Status(Event Player, Frozen) || Has Status(Event Player, Rooted) || Has Status(
			Event Player, Knocked Down) || Has Status(Event Player, Stunned) || Has Status(Event Player, Asleep)) == False;
		(Hero Of(Event Player) == Hero(Sigma) || Hero Of(Event Player) == Hero(Zenyatta)) == True;
	}

	actions
	{
		"Toggle off"
		If(Event Player.Flight == True);
			Event Player.Flight = False;
			Small Message(Event Player, Custom String(" {0} Flying Off", Hero Icon String(Hero Of(Event Player))));
		"Toggle on"
		Else If(Event Player.Flight == False);
			Event Player.Flight = True;
			Small Message(Event Player, Custom String(" {0} Flying On", Hero Icon String(Hero Of(Event Player))));
		End;
		Wait(1, Ignore Condition);
	}
}

rule("Flying [Broken in OW2; updated by Arkhanglesk#11200 using code from XWJQQ] - High server cost")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.Flight == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Set Gravity(Event Player, 0);
		Event Player.MOVEMENT -= 125;
		Set Move Speed(Event Player, Event Player.MOVEMENT);
		While(Event Player.Flight && Is Alive(Event Player));
			"If the player is giving any movement input"
			If(X Component Of(Throttle Of(Event Player)) * -1 * Normalize(Cross Product(Facing Direction Of(Event Player), Up))
				+ Z Component Of(Throttle Of(Event Player)) * Facing Direction Of(Event Player) + (Is Button Held(Event Player, Button(Jump))
				? Up : Vector(0, 0, 0)) + (Is Button Held(Event Player, Button(Crouch)) ? Down : Vector(0, 0, 0)) != Vector(0, 0, 0));
				If(Event Player.FlightKnockInterrupt < 0.400);
					"Remove a large portion of all momentum that is not in the player's intended direction"
					Apply Impulse(Event Player, Velocity Of(Event Player) - Dot Product(Velocity Of(Event Player), Normalize(X Component Of(
						Throttle Of(Event Player)) * -1 * Normalize(Cross Product(Facing Direction Of(Event Player), Up)) + Z Component Of(Throttle Of(
						Event Player)) * Facing Direction Of(Event Player) + (Is Button Held(Event Player, Button(Jump)) ? Up : Vector(0, 0, 0)) + (
						Is Button Held(Event Player, Button(Crouch)) ? Down : Vector(0, 0, 0)))) * Normalize(X Component Of(Throttle Of(Event Player))
						* -1 * Normalize(Cross Product(Facing Direction Of(Event Player), Up)) + Z Component Of(Throttle Of(Event Player))
						* Facing Direction Of(Event Player) + (Is Button Held(Event Player, Button(Jump)) ? Up : Vector(0, 0, 0)) + (Is Button Held(
						Event Player, Button(Crouch)) ? Down : Vector(0, 0, 0))), Magnitude Of(Velocity Of(Event Player) - Dot Product(Velocity Of(
						Event Player), Normalize(X Component Of(Throttle Of(Event Player)) * -1 * Normalize(Cross Product(Facing Direction Of(
						Event Player), Up)) + Z Component Of(Throttle Of(Event Player)) * Facing Direction Of(Event Player) + (Is Button Held(
						Event Player, Button(Jump)) ? Up : Vector(0, 0, 0)) + (Is Button Held(Event Player, Button(Crouch)) ? Down : Vector(0, 0, 0))))
						* Normalize(X Component Of(Throttle Of(Event Player)) * -1 * Normalize(Cross Product(Facing Direction Of(Event Player), Up))
						+ Z Component Of(Throttle Of(Event Player)) * Facing Direction Of(Event Player) + (Is Button Held(Event Player, Button(Jump))
						? Up : Vector(0, 0, 0)) + (Is Button Held(Event Player, Button(Crouch)) ? Down : Vector(0, 0, 0)))) * -0.400, To World,
						Incorporate Contrary Motion);
				End;
				"Move the player in their intended direction, applying stronger impulses relative to the difference between the current and desired velocity"
				Apply Impulse(Event Player, X Component Of(Throttle Of(Event Player)) * -1 * Normalize(Cross Product(Facing Direction Of(
					Event Player), Up)) + Z Component Of(Throttle Of(Event Player)) * Facing Direction Of(Event Player) + (Is Button Held(
					Event Player, Button(Jump)) ? Up : Vector(0, 0, 0)) + (Is Button Held(Event Player, Button(Crouch)) ? Down : Vector(0, 0, 0)),
					Max(Min((Event Player.FlightSpeedMetersPerSecond == 0 ? 5.500 : Event Player.FlightSpeedMetersPerSecond)
					* 1.200 - Speed Of In Direction(Event Player, X Component Of(Throttle Of(Event Player)) * -1 * Normalize(Cross Product(
					Facing Direction Of(Event Player), Up)) + Z Component Of(Throttle Of(Event Player)) * Facing Direction Of(Event Player) + (
					Is Button Held(Event Player, Button(Jump)) ? Up : Vector(0, 0, 0)) + (Is Button Held(Event Player, Button(Crouch))
					? Down : Vector(0, 0, 0))), (Event Player.FlightSpeedMetersPerSecond == 0 ? 5.500 : Event Player.FlightSpeedMetersPerSecond)
					* 2.400) * (Event Player.FlightKnockInterrupt < 0.400 ? 0.180 : 0.080), 0), To World, Incorporate Contrary Motion);
			"Else: when the player isn't giving any movement input"
			Else;
				If(!Event Player.FlightKnockInterrupt);
					"Come to a halt relatively slowly"
					Apply Impulse(Event Player, Velocity Of(Event Player), Min(Speed Of(Event Player) * 0.035 + 0.060, Speed Of(Event Player)) * -1,
						To World, Incorporate Contrary Motion);
				End;
			End;
			Wait(0.016, Ignore Condition);
		End;
		Set Gravity(Event Player, 100);
		Event Player.MOVEMENT += 125;
		Set Move Speed(Event Player, Event Player.MOVEMENT);
	}
}

rule("Flying OFF on death")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.Flight == True;
		Is Dead(Event Player) == True;
	}

	actions
	{
		"When Echo had Flying on by default (disabled, workshop load testing)"
		disabled If(Hero Of(Event Player) != Hero(Echo));
		Event Player.Flight = False;
		Set Gravity(Event Player, 100);
		Small Message(Event Player, Custom String(" {0} Flying Off", Hero Icon String(Hero Of(Event Player))));
	}
}

rule("Flying OFF on hero change")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.Flight == True;
		Is In Spawn Room(Event Player) == True;
		(Hero Of(Event Player) == Hero(Sigma) || Hero Of(Event Player) == Hero(Zenyatta)) == False;
	}

	actions
	{
		Event Player.Flight = False;
	}
}

rule("PLAYER Third Person During Ultimate ON [Broken in OW2; updated by Arkhanglesk#11200]")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Event Player.UltimateThirdPerson == True;
	}

	actions
	{
		If(Hero Of(Event Player) == Hero(Moira));
			Start Camera(Event Player, Facing Direction Of(Event Player) * 0.200 + Ray Cast Hit Position(Eye Position(Event Player),
				Eye Position(Event Player) + World Vector Of(Vector(-0.500, 0.500, -1), Event Player, Rotation) + Facing Direction Of(
				Event Player) * Vector(2, 2, 2) * -1, All Players(All Teams), Event Player, False), Eye Position(Event Player)
				+ World Vector Of(Vector(-0.500, 0.500, -1), Event Player, Rotation) + Facing Direction Of(Event Player) * 500, 50);
		Else;
			Start Camera(Event Player, Facing Direction Of(Event Player) * 0.200 + Ray Cast Hit Position(Eye Position(Event Player),
				Eye Position(Event Player) + World Vector Of(Vector(0, 0.500, -1), Event Player, Rotation) + Facing Direction Of(Event Player)
				* Vector(2, 2, 2) * -1.500, Null, Event Player, False), Eye Position(Event Player) + World Vector Of(Vector(0, 0.500, -1),
				Event Player, Rotation) + Facing Direction Of(Event Player) * 500, 80);
		End;
	}
}

rule("PLAYER Third Person During Ultimate OFF [Broken in OW2; updated by Arkhanglesk#11200]")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == False;
		Event Player.UltimateThirdPerson == True;
	}

	actions
	{
		Stop Camera(Event Player);
	}
}

disabled rule("MAUGA Ultimate [Added by Arkhanglesk#11200; work in progress]")
{
	event
	{
		Ongoing - Global;
	}
}
